/*
 * Weavr Multi Product API
 * Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 
 *
 * OpenAPI spec version: 3.53.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.brightbankdemo.weavrfundstransfer.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
/**
 * ConsumerBeneficiaryType
 */

public class ConsumerBeneficiaryType {
  @JsonProperty("fullName")
  private String fullName = null;

  public ConsumerBeneficiaryType fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

   /**
   * The person beneficiary name. The allowed length and pattern is dependent on the beneficiary details type:  &#x60;InstrumentDetailsBeneficiary&#x60; or &#x60;BankAccountDetailsBeneficiary&#x60; with &#x60;SepaBankDetails&#x60;: &gt;&#x3D; &#x60;1&#x60; character and &lt;&#x3D; &#x60;150&#x60; characters  &#x60;BankAccountDetailsBeneficiary&#x60; with &#x60;FasterPaymentsBankDetails&#x60;: &gt;&#x3D; &#x60;1&#x60; character and &lt;&#x3D; &#x60;140&#x60; characters with a pattern of &#x60;^[a-zA-Z0-9/\\-?:().,’+\\s#&#x3D;!\&quot;%&amp;*&lt;&gt;;\\{@\\r\\n]*$&#x60; (please note that the &#x60;’&#x60; symbol is the unicode value U+2019 (right single quotation mark) and not the unicode value U+0027 (apostrophe)) 
   * @return fullName
  **/
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsumerBeneficiaryType ConsumerBeneficiaryType = (ConsumerBeneficiaryType) o;
    return Objects.equals(this.fullName, ConsumerBeneficiaryType.fullName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsumerBeneficiaryType {\n");
    
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
