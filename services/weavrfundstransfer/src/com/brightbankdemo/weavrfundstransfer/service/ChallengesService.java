package com.brightbankdemo.weavrfundstransfer.service;



import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.lang.Object;
import org.springframework.util.MultiValueMap;
import feign.*;

public interface ChallengesService {

  /**
   * Issue a one-time password that can be used to verify a list of resources
   * Starts the verification process for a list of resources in which a one-time password is sent to a device belonging to the logged-in user that was previously enrolled through the &#x60;/authentication_factors/otp/{channel}&#x60; endpoint.   This endpoint can be used to challenge _Outgoing Wire Transfers_ &amp; _Sends_.  You should only start this process if the operation &#x60;state&#x60; is &#x60;PENDING_CHALLENGE&#x60;.  _Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \\\&quot;123456\\\&quot;._ 
    * @param channel The unique identifier for the channel. (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /challenges/otp/{channel}")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",
    "idempotency-ref: {idempotency_ref}"  })
  void multipleSCAChallenge(@Param("channel") Object channel, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Issue a push notification that can be used to verify a list of resources
   * Starts the verification process for a list of resources in which a push notification is sent to a device belonging to the logged-in user that was previously enrolled through the &#x60;/authentication_factors/push/{channel}&#x60; endpoint.  This endpoint can be used to challenge _Outgoing Wire Transfers_ &amp; _Sends_.  You should only start this process if the resource &#x60;state&#x60; is &#x60;PENDING_CHALLENGE&#x60;. 
    * @param channel  (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /challenges/push/{channel}")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",
    "idempotency-ref: {idempotency_ref}"  })
  void multipleSCAChallengePush(@Param("channel") Object channel, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Verify a list of resources using a one-time password
   * Completes the verification process for a list of resources.  This endpoint can be used to challenge _Outgoing Wire Transfers_ &amp; _Sends_.  If the outcome of the verification is successful, the resource is executed.  If not verified challenge expires after 5 minutes and the number of incorrect OTP attempts is limited to reduce the risk of fraud.  _Note that on the Sandbox Environment, text messages are not sent and the &#x60;verificationCode&#x60; is always \\\&quot;123456\\\&quot;._ 
    * @param scaChallengeId The unique identifier of the SCA challenge. (required)
    * @param channel The unique identifier for the channel. (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /challenges/{scaChallengeId}/otp/{channel}/verify")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",
    "idempotency-ref: {idempotency_ref}"  })
  void multipleSCAVerify(@Param("scaChallengeId") String scaChallengeId, @Param("channel") Object channel, @Param("idempotency_ref") String idempotency_ref);

}
