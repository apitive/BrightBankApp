package com.brightbankdemo.weavrfundstransfer.service;



import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.lang.Object;
import org.springframework.util.MultiValueMap;
import feign.*;

public interface ConsumersService {

  /**
   * Charge fee to a consumer
   * Charge a fee to the logged-in consumer based on a pre-defined custom fee. Custom fees can be configured in the Multi Portal.  The fees collected will be deposited into your Revenue Account. The balance and transaction history of your revenue account can be viewed in the Multi Portal. 
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /consumers/fees/charge")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",
    "idempotency-ref: {idempotency_ref}"  })
  void consumerChargeFee(@Param("idempotency_ref") String idempotency_ref);

  /**
   * Create a consumer
   * Create a Consumer Identity to represent an Individual.  The information provided must be accurate as it will be passed on for KYC verification with our partner.  *Incorrect information may incur a re-processing fee.* 
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /consumers")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",
    "idempotency-ref: {idempotency_ref}"  })
  void consumerCreate(@Param("idempotency_ref") String idempotency_ref);

  /**
   * Get a consumer
   * Retrieve the details of the logged-in Consumer.
   */
  @RequestLine("GET /consumers")
  @Headers({
    "Accept: ",  })
  void consumerGet();

  /**
   * Get KYC for a consumer
   * Returns the KYC status for the logged-in consumer.
   */
  @RequestLine("GET /consumers/kyc")
  @Headers({
    "Accept: ",  })
  void consumerKycGet();

  /**
   * Start KYC for a consumer
   * Consumers need to complete due diligence (KYC) before they can create instruments and fund transaction.  This operation initiates the due diligence process for the logged-in consumer.    Due Diligence is handled by a KYC provider, you will need to embed the KYC UI Component in your application to show the KYC screens to your users.  To initialise the KYC UI Component, you need a &#x60;reference&#x60; that is given to you in the response of this operation. 
   */
  @RequestLine("POST /consumers/kyc")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void consumerKycStart();

  /**
   * Start consumer KYC on mobile
   * Consumers need to complete due diligence (KYC) before they can create instruments and perform transactions. Use this call instead of &#x60;/consumers/kyc&#x60; only in case where the KYC is to be performed using a mobile device.  The information returned in the response is to be used to integrate directly with Sumsub Mobile SDK. 
   */
  @RequestLine("POST /consumers/kyc_mobile_sumsub")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void consumerKycStartSumsubMobile();

  /**
   * Send an email verification code to the root user
   * The first step in verifying a root user&#x27;s email. The root user whose email address is to be verified is sent an email containing a randomly generated code.  This code must then be provided in the _consumerRootUserEmailVerify_ operation to verify the root user&#x27;s email address.  Note that on the Sandbox Environment, the &#x60;verificationCode&#x60; is always set to \\\&quot;123456\\\&quot;. 
   */
  @RequestLine("POST /consumers/verification/email/send")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void consumerRootUserEmailVerificationCodeSend();

  /**
   * Verify email of the root user
   * The second step in verifying the root user&#x27;s email. The randomly generated code sent to the root user via email, using the _consumerRootUserEmailVerificationCodeSend_ operation, is submitted here to verify the root user&#x27;s email.  This is needed as part of the verification process for basic due diligence.  Note that on the Sandbox Environment, emails are not sent and the verification code is always set to \\\&quot;123456\\\&quot;. 
   */
  @RequestLine("POST /consumers/verification/email/verify")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void consumerRootUserEmailVerify();

  /**
   * Update a consumer
   * Update the details of the logged-in consumer identity.  If the Consumer root user has already completed KYC, the following details cannot be updated:   - name   - surname   - email   - mobile Country Code   - mobile Number   - date of Birth   - address 
   */
  @RequestLine("PATCH /consumers")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void consumerUpdate();

}
