package com.brightbankdemo.weavrfundstransfer.service;



import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.lang.Object;
import org.springframework.util.MultiValueMap;
import feign.*;

public interface AdditionalFactorsService {

  /**
   * Get user authentication factors
   * Retrieves the list of authentication factors that can be used to verify the logged-in user.
   */
  @RequestLine("GET /authentication_factors")
  @Headers({
    "Accept: ",  })
  void authFactorsGet();

  /**
   * Enrol a user device for authentication using one-time passwords
   * This is the first step in enrolling the logged-in user&#x27;s mobile device, where a one-time password is sent to the device.  _Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \\\&quot;123456\\\&quot;._ 
    * @param channel The unique identifier for the channel. (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /authentication_factors/otp/{channel}")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",
    "idempotency-ref: {idempotency_ref}"  })
  void enrolDeviceUsingOtpStepOne(@Param("channel") Object channel, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Verify enrolment of a user device for authentication using one-time passwords
   * The second step in enrolling the logged-in user (root or authorised user) to use one-time-passwords to enable verification of transactions. The challenge expires after 5 minutes and the number of incorrect OTP attempts is limited to reduce the risk of fraud, in that case challenge has to be issued again.  _Note that on the Sandbox Environment, text messages are not sent and the &#x60;verificationCode&#x60; is always set to \\\&quot;123456\\\&quot;._ 
    * @param channel The unique identifier for the channel. (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /authentication_factors/otp/{channel}/verify")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",
    "idempotency-ref: {idempotency_ref}"  })
  void enrolDeviceUsingOtpStepTwo(@Param("channel") Object channel, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Enrol a user device for authentication using push notifications
   * This is the first step in enrolling the logged-in user&#x27;s mobile device, where a push notification is sent to the device. 
    * @param channel  (required)
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /authentication_factors/push/{channel}")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",
    "idempotency-ref: {idempotency_ref}"  })
  void enrolDeviceUsingPush(@Param("channel") Object channel, @Param("idempotency_ref") String idempotency_ref);

  /**
   * Unlink a user device for authentication using push notifications
   * Unlink a user device for authentication using push notifications
    * @param channel  (required)
   */
  @RequestLine("DELETE /authentication_factors/push/{channel}")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void unlinkDeviceUsingPush(@Param("channel") Object channel);

}
