package com.brightbankdemo.weavrfundstransfer.service;


import com.brightbankdemo.weavrfundstransfer.model.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.lang.Object;
import org.springframework.util.MultiValueMap;
import feign.*;

public interface BeneficiariesService {

  /**
   * Get all beneficiaries
   * Retrieves the beneficiaries that match the query parameters.
    * @param offset The offset value for paging, indicating the initial item number to be returned from the data set satisfying the given criteria. Leave out to fetch the first page of results. (optional)
    * @param limit The limit of the results for paging, starting at the offset. Limit is always capped at 100. (optional)
    * @param batchId Search by the beneficiary batch id. (optional)
    * @param group Search by the beneficiary group. (optional)
   */
  @RequestLine("GET /beneficiaries?offset={offset}&limit={limit}&batchId={batchId}&group={group}")
  @Headers({
    "Accept: ",  })
  void beneficiariesGet(@Param("offset") Integer offset, @Param("limit") Integer limit, @Param("batchId") List batchId, @Param("group") List group);


    /**
     * Get all beneficiaries
     * Retrieves the beneficiaries that match the query parameters.
     * Note, this is equivalent to the other <code>beneficiariesGet</code> method,
     * but with the query parameters collected into a single Map parameter. This
     * is convenient for services with optional query parameters, especially when
     * used with the {@link BeneficiariesGetQueryParams} class that allows for
     * building up this map in a fluent style.
     * @param queryParams Map of query parameters as name-value pairs
     *   <p>The following elements may be specified in the query map:</p>
     *   <ul>
     *   <li>offset - The offset value for paging, indicating the initial item number to be returned from the data set satisfying the given criteria. Leave out to fetch the first page of results. (optional)</li>
     *   <li>limit - The limit of the results for paging, starting at the offset. Limit is always capped at 100. (optional)</li>
     *   <li>batchId - Search by the beneficiary batch id. (optional)</li>
     *   <li>group - Search by the beneficiary group. (optional)</li>
     *   </ul>
     */
    @RequestLine("GET /beneficiaries?offset={offset}&limit={limit}&batchId={batchId}&group={group}")
    @Headers({
    "Accept: ",    })
    void beneficiariesGet
    (@QueryMap(encoded=true)
    MultiValueMap<String, String> queryParams);

  /**
   * Add beneficiaries
   * Create one or more beneficiaries for the logged-in corporate or consumer identity.
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /beneficiaries")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",
    "idempotency-ref: {idempotency_ref}"  })
  void beneficiaryBatchCreate(@Param("idempotency_ref") String idempotency_ref);

  /**
   * Get a beneficiary batch
   * Retrieves the details of a beneficiary batch identified by the batchId path parameter
    * @param id The unique identifier of a beneficiary batch. (required)
   */
  @RequestLine("GET /beneficiaries/batch/{id}")
  @Headers({
    "Accept: ",  })
  void beneficiaryBatchGet(@Param("id") String id);

  /**
   * Remove beneficiaries
   * Removes one or more beneficiaries from the beneficiaries list identified by the id path parameter used in the array.
    * @param idempotency_ref A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours. (optional)
   */
  @RequestLine("POST /beneficiaries/remove")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",
    "idempotency-ref: {idempotency_ref}"  })
  void beneficiaryBatchRemove(@Param("idempotency_ref") String idempotency_ref);

  /**
   * Issue a one-time password to verify a beneficiary batch
   * Starts the verification process for updating the beneficiaries batch in which a one-time password is sent to a device belonging to the logged-in user that was previously enrolled through the &#x60;/authentication_factors/otp/{channel}&#x60; endpoint.  You should only start this process if the beneficiary update &#x60;state&#x60; is &#x60;PENDING_CHALLENGE&#x60;.  _Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \\\&quot;123456\\\&quot;._ 
    * @param id The unique identifier of the Beneficiary Batch Operation. (required)
    * @param channel The unique identifier for the channel. (required)
   */
  @RequestLine("POST /beneficiaries/batch/{id}/challenges/otp/{channel}")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void beneficiaryBatchSCAChallenge(@Param("id") String id, @Param("channel") Object channel);

  /**
   * Issue a push notification that can be used to verify a beneficiary batch
   * Starts the verification process for updating a beneficiary batch in which a push notification is sent to a device belonging to the logged-in user that was previously enrolled through the &#x60;/authentication_factors/push/{channel}&#x60; endpoint.  You should only start this process if the beneficiary update operation &#x60;state&#x60; is &#x60;PENDING_CHALLENGE&#x60;. 
    * @param id The unique identifier of the Beneficiary Batch Operation. (required)
    * @param channel  (required)
   */
  @RequestLine("POST /beneficiaries/batch/{id}/challenges/push/{channel}")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void beneficiaryBatchSCAChallengePush(@Param("id") String id, @Param("channel") Object channel);

  /**
   * Verify a beneficiary batch using a one-time password
   * Completes the verification process for updating the beneficiary batch.  If the outcome of the verification is successful, the beneficiary update batch is executed.  _Note that on the Sandbox Environment, text messages are not sent and the verificationCode is always \\\&quot;123456\\\&quot;._ 
    * @param id The unique identifier of the Beneficiary Batch Operation. (required)
    * @param channel The unique identifier for the channel. (required)
   */
  @RequestLine("POST /beneficiaries/batch/{id}/challenges/otp/{channel}/verify")
  @Headers({
    "Content-Type: application/json",
    "Accept: ",  })
  void beneficiaryBatchSCAVerify(@Param("id") String id, @Param("channel") Object channel);

  /**
   * Get all beneficiary batches
   * Retrieves all beneficiary batches matching the query parameters and that belong to the logged-in identity.
    * @param offset The offset value for paging, indicating the initial item number to be returned from the data set satisfying the given criteria. Leave out to fetch the first page of results. (optional)
    * @param limit The limit of the results for paging, starting at the offset. Limit is always capped at 100. (optional)
    * @param state  (optional)
    * @param operation  (optional)
    * @param tag Filter by the beneficiary batch tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries. (optional)
   */
  @RequestLine("GET /beneficiaries/batch?offset={offset}&limit={limit}&state={state}&operation={operation}&tag={tag}")
  @Headers({
    "Accept: ",  })
  void beneficiaryBatchesGet(@Param("offset") Integer offset, @Param("limit") Integer limit, @Param("state") List state, @Param("operation") List operation, @Param("tag") List tag);


    /**
     * Get all beneficiary batches
     * Retrieves all beneficiary batches matching the query parameters and that belong to the logged-in identity.
     * Note, this is equivalent to the other <code>beneficiaryBatchesGet</code> method,
     * but with the query parameters collected into a single Map parameter. This
     * is convenient for services with optional query parameters, especially when
     * used with the {@link BeneficiaryBatchesGetQueryParams} class that allows for
     * building up this map in a fluent style.
     * @param queryParams Map of query parameters as name-value pairs
     *   <p>The following elements may be specified in the query map:</p>
     *   <ul>
     *   <li>offset - The offset value for paging, indicating the initial item number to be returned from the data set satisfying the given criteria. Leave out to fetch the first page of results. (optional)</li>
     *   <li>limit - The limit of the results for paging, starting at the offset. Limit is always capped at 100. (optional)</li>
     *   <li>state -  (optional)</li>
     *   <li>operation -  (optional)</li>
     *   <li>tag - Filter by the beneficiary batch tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries. (optional)</li>
     *   </ul>
     */
    @RequestLine("GET /beneficiaries/batch?offset={offset}&limit={limit}&state={state}&operation={operation}&tag={tag}")
    @Headers({
    "Accept: ",    })
    void beneficiaryBatchesGet
    (@QueryMap(encoded=true)
    MultiValueMap<String, String> queryParams);

  /**
   * Get a beneficiary
   * Retrieves a beneficiary identified by the id path parameter
    * @param id The unique identifier of a beneficiary. (required)
   */
  @RequestLine("GET /beneficiaries/{id}")
  @Headers({
    "Accept: ",  })
  void beneficiaryGet(@Param("id") String id);

}
