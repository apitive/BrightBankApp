{
  "security" : [ ],
  "basePath" : "${rest.weavrfundstransfer.basepath}",
  "paths" : {
    "/corporates/kyb" : {
      "post" : {
        "summary" : "Start KYB for a corporate",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_corporateKybStart",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Corporates",
        "produces" : [ "application/json" ],
        "description" : "Corporates need to complete due diligence (KYB) before they can create instruments and perform transactions.\n\nThis operation initiates the due diligence process for the logged-in corporate.\n\nDue Diligence is handled by a KYB provider - you will need to embed the KYB UI Component in your application so that the Corporate will be able to perform the KYB process.\n\nTo initialise the KYB UI Component, you need a `reference` that is given you in the response of this operation.\n",
        "operationId" : "weavrfundstransfer_corporateKybStart",
        "responses" : {
          "200" : {
            "schema" : {
              "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.WeavrfundstransferCorporateKybStartResponse",
              "type" : "object",
              "properties" : {
                "reference" : {
                  "pattern" : "^[0-9]+$",
                  "description" : "The reference required to initialise the KYB UI Component.",
                  "type" : "string"
                }
              }
            },
            "description" : "Success"
          },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "KYB_ALREADY_APPROVED", "KYB_PERMANENTLY_REJECTED", "KYB_PENDING_REVIEW", "EMAIL_UNVERIFIED" ]
                }
              }
            },
            "description" : "Conflict"
          }
        },
        "tags" : [ "Corporates" ],
        "consumes" : [ "application/json" ]
      },
      "get" : {
        "summary" : "Get KYB for a corporate",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_corporateKybGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Corporates",
        "produces" : [ "application/json" ],
        "description" : "Returns the KYB status for the logged-in corporate.",
        "operationId" : "weavrfundstransfer_corporateKybGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { }
        },
        "tags" : [ "Corporates" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/corporates/kyb",
      "parameters" : [ ]
    },
    "/managed_cards" : {
      "post" : {
        "summary" : "Create a managed card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardCreate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "create",
        "description" : "Creates a managed card for the consumer or corporate identity.\nThe Managed Card Profile (configured in the Multi Portal) specified determines the behaviour and restrictions that the managed card will have.\n",
        "operationId" : "weavrfundstransfer_managedCardCreate",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/ManagedCardRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "get" : {
        "summary" : "Get all managed cards",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardsGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Fetch cards matching the search criteria provided.",
        "operationId" : "weavrfundstransfer_managedCardsGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/offset"
        }, {
          "$ref" : "#/parameters/limit"
        }, {
          "$ref" : "#/parameters/profileId"
        }, {
          "$ref" : "#/parameters/friendlyName"
        }, {
          "$ref" : "#/parameters/state"
        }, {
          "$ref" : "#/parameters/state_blockedReason"
        }, {
          "$ref" : "#/parameters/state_destroyedReason"
        }, {
          "$ref" : "#/parameters/currency"
        }, {
          "$ref" : "#/parameters/card_type"
        }, {
          "in" : "query",
          "name" : "externalHandle",
          "description" : "Search by the card's `externalHandle`.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "cardNumberFirstSix",
          "description" : "Filter by first six digits of the card.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "cardNumberLastFour",
          "description" : "Filter by last four digits of the card.",
          "type" : "string",
          "required" : false
        }, {
          "$ref" : "#/parameters/createdFrom"
        }, {
          "$ref" : "#/parameters/createdTo"
        }, {
          "in" : "query",
          "name" : "mode",
          "description" : "Filter by card mode (prepaid mode or debit mode).",
          "type" : "string",
          "required" : false
        }, {
          "$ref" : "#/parameters/tag"
        }, {
          "in" : "query",
          "name" : "parentManagedAccountId",
          "description" : "Filter by the Id of the parent managed account associated with the card. This is applicable only for debit mode cards.",
          "type" : "string",
          "required" : false
        }, {
          "in" : "query",
          "name" : "manufacturingState",
          "type" : "array",
          "required" : false
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards",
      "parameters" : [ ]
    },
    "/managed_cards/assign" : {
      "post" : {
        "summary" : "Assign a managed card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardAssign",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "If your application requires anonymous cards, Weavr will create a pool of cards that are initially not assigned to any identity.\nThis operation assigns one such previously created managed card from the card pool to the logged-in consumer or corporate identity.\n",
        "operationId" : "weavrfundstransfer_managedCardAssign",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/ManagedCardAssignRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards/assign",
      "parameters" : [ ]
    },
    "/managed_cards/{id}/block" : {
      "post" : {
        "summary" : "Block a managed card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardBlock",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Blocks the managed card identified by the `id` path parameter. This is a reversible action and the card can be unblocked using the _managedCardUnblock_ operation.",
        "operationId" : "weavrfundstransfer_managedCardBlock",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of a managed card.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards/{id}/block",
      "parameters" : [ ]
    },
    "/bulks/users/_user_id_/invite" : {
      "post" : {
        "summary" : "Send a user invite",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_bulksUserInviteSend",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Operations",
        "produces" : [ "application/json" ],
        "description" : "Submit the details for the creation of a batch of Authorised User invites\n\nThe  bulkId returned in the response can subsequently be used to launch the creation of the bulk process through _bulkIdExecute_. A submitted bulk process can be managed (executed, accessed, paused, resumed and cancelled) by any other Authorised User of the same identity of the user that submits the details.\n\nThe status of the bulk process after execution of this operation is set to ‘SUBMITTED’. The execution of the bulk process is launched through the Execute bulk process operation.\n\nThe submission of data for a bulk process does not expire but it can be cancelled through _bulkIdCancel_\n\nThe system is configured to accept bulk requests to process up to a maximum of 10,000 bulk operations\n\nEach create authorised user operation in this bulk process is processed via _userInviteSend_.\n",
        "operationId" : "weavrfundstransfer_bulksUserInviteSend",
        "responses" : {
          "201" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "operationCount" : {
                  "format" : "int32",
                  "type" : "integer"
                },
                "path" : {
                  "type" : "string"
                },
                "bulkId" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Success - returning bulk process"
          }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.WeavrfundstransferBulksUserInviteSendRequest",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "pathParams" : {
                  "type" : "object",
                  "properties" : {
                    "_user_id_" : {
                      "$ref" : "#/definitions/UserId"
                    }
                  }
                }
              }
            }
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Operations" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/bulks/users/_user_id_/invite",
      "parameters" : [ ]
    },
    "/challenges/otp/{channel}" : {
      "post" : {
        "summary" : "Issue a one-time password that can be used to verify a list of resources",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_multipleSCAChallenge",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Challenges",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "create",
        "description" : "Starts the verification process for a list of resources in which a one-time password is sent to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/otp/{channel}` endpoint. \n\nThis endpoint can be used to challenge _Outgoing Wire Transfers_ & _Sends_.\n\nYou should only start this process if the operation `state` is `PENDING_CHALLENGE`.\n\n_Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_multipleSCAChallenge",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "405" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "$ref" : "#/parameters/channel"
        }, {
          "schema" : {
            "$ref" : "#/definitions/MultipleSCAChallengeRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Challenges" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/challenges/otp/{channel}",
      "parameters" : [ ]
    },
    "/managed_accounts/{id}/statement" : {
      "get" : {
        "summary" : "Get a managed account statement",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedAccountStatement",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Accounts",
        "produces" : [ "application/json" ],
        "description" : "Returns a list of transactions against the managed account identified by the `id` path parameter, matching the criteria provided in the request.",
        "operationId" : "weavrfundstransfer_managedAccountStatement",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the managed account.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/accept"
        }, {
          "$ref" : "#/parameters/offset"
        }, {
          "$ref" : "#/parameters/limit"
        }, {
          "$ref" : "#/parameters/orderByTimestamp"
        }, {
          "$ref" : "#/parameters/fromTimestamp"
        }, {
          "$ref" : "#/parameters/toTimestamp"
        }, {
          "$ref" : "#/parameters/showFundMovementsOnly"
        }, {
          "$ref" : "#/parameters/singleEntryPerTransaction"
        } ],
        "tags" : [ "Managed Accounts" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_accounts/{id}/statement",
      "parameters" : [ ]
    },
    "/bulks" : {
      "get" : {
        "summary" : "Get all bulk processes",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_bulks",
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Manage",
        "produces" : [ "application/json" ],
        "description" : "Filter bulk processes.",
        "operationId" : "weavrfundstransfer_bulks",
        "responses" : {
          "200" : {
            "schema" : {
              "$ref" : "#/definitions/BulkProcessesPaged"
            },
            "description" : "Success"
          },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/offset"
        }, {
          "$ref" : "#/parameters/limit"
        }, {
          "$ref" : "#/parameters/bulkProcessStatus"
        } ],
        "tags" : [ "Manage" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/bulks",
      "parameters" : [ ]
    },
    "/bulks/{bulk_id}" : {
      "get" : {
        "summary" : "Get bulk process",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_bulkId",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Manage",
        "produces" : [ "application/json" ],
        "description" : "Retrieves details on the bulk process identified by the bulk_id parameter.",
        "operationId" : "weavrfundstransfer_bulkId",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/bulkId"
        } ],
        "tags" : [ "Manage" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/bulks/{bulk_id}",
      "parameters" : [ ]
    },
    "/consumers/verification/email/send" : {
      "post" : {
        "summary" : "Send an email verification code to the root user",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_consumerRootUserEmailVerificationCodeSend",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Consumers",
        "produces" : [ "application/json" ],
        "description" : "The first step in verifying a root user's email. The root user whose email address is to be verified is sent an email containing a randomly generated code.\n\nThis code must then be provided in the _consumerRootUserEmailVerify_ operation to verify the root user's email address.\n\nNote that on the Sandbox Environment, the `verificationCode` is always set to \\\"123456\\\".\n",
        "operationId" : "weavrfundstransfer_consumerRootUserEmailVerificationCodeSend",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "schema" : {
            "$ref" : "#/definitions/EmailRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Consumers" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/consumers/verification/email/send",
      "parameters" : [ ]
    },
    "/managed_cards/{id}/unblock" : {
      "post" : {
        "summary" : "Unblock a managed card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardUnblock",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Unblocks the managed card identified by the `id` path parameter.\nThe managed card must have `state.blockedReason` as `USER` so that it can be unblocked.\nIf the managed card was blocked by `SYSTEM`, users cannot unblock it.\n",
        "operationId" : "weavrfundstransfer_managedCardUnblock",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the managed card.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards/{id}/unblock",
      "parameters" : [ ]
    },
    "/managed_cards/{id}/physical/pin/unblock" : {
      "patch" : {
        "summary" : "Unblock PIN for a physical card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardPhysicalPinUnBlock",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Physical cards can be marked as `pinBlocked` if there are too many failed PIN attempts.\n\nUse this operation to unblock a PIN so that the card can be used again.\n",
        "operationId" : "weavrfundstransfer_managedCardPhysicalPinUnBlock",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards/{id}/physical/pin/unblock",
      "parameters" : [ ]
    },
    "/consumers/fees/charge" : {
      "post" : {
        "summary" : "Charge fee to a consumer",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_consumerChargeFee",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Consumers",
        "produces" : [ "application/json" ],
        "description" : "Charge a fee to the logged-in consumer based on a pre-defined custom fee. Custom fees can be configured in the Multi Portal.\n\nThe fees collected will be deposited into your Revenue Account. The balance and transaction history of your revenue account can be viewed in the Multi Portal.\n",
        "operationId" : "weavrfundstransfer_consumerChargeFee",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/ChargeFeeRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Consumers" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/consumers/fees/charge",
      "parameters" : [ ]
    },
    "/authentication_factors/otp/{channel}/verify" : {
      "post" : {
        "summary" : "Verify enrolment of a user device for authentication using one-time passwords",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_enrolDeviceUsingOtpStepTwo",
        "security" : [ {
          "api_key" : [ ]
        }, {
          "auth_token" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Additional Factors",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "create",
        "description" : "The second step in enrolling the logged-in user (root or authorised user) to use one-time-passwords to enable verification of transactions.\nThe challenge expires after 5 minutes and the number of incorrect OTP attempts is limited to reduce the risk of fraud, in that case challenge has to be issued again.\n\n_Note that on the Sandbox Environment, text messages are not sent and the `verificationCode` is always set to \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_enrolDeviceUsingOtpStepTwo",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "$ref" : "#/parameters/channel"
        }, {
          "schema" : {
            "$ref" : "#/definitions/SCAVerifyRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Additional Factors" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/authentication_factors/otp/{channel}/verify",
      "parameters" : [ ]
    },
    "/managed_accounts/{id}/block" : {
      "post" : {
        "summary" : "Block a managed account",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedAccountBlock",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Accounts",
        "produces" : [ "application/json" ],
        "description" : "Temporarily blocks a managed account.",
        "operationId" : "weavrfundstransfer_managedAccountBlock",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the managed account.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "tags" : [ "Managed Accounts" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_accounts/{id}/block",
      "parameters" : [ ]
    },
    "/managed_accounts/{id}/iban" : {
      "post" : {
        "summary" : "Upgrade a managed account with IBAN",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedAccountsIBANUpgrade",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Accounts",
        "produces" : [ "application/json" ],
        "description" : "Assign an IBAN to a Managed Account.\n\nIBANs enable managed accounts to receive and send funds via wire transfers.\n\nAssigning an IBAN to a Managed Account may be done asynchronously, in which case the `ManagedAccountIBAN.state` will be set to `PENDING_ALLOCATION` until bank details are ready to use.\n",
        "operationId" : "weavrfundstransfer_managedAccountsIBANUpgrade",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the Managed Account.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "tags" : [ "Managed Accounts" ],
        "consumes" : [ "application/json" ]
      },
      "get" : {
        "summary" : "Get a managed account IBAN",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedAccountIBANGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Accounts",
        "produces" : [ "application/json" ],
        "description" : "Fetch the IBAN details associated with the Managed Account identified by the `id` in the path.",
        "operationId" : "weavrfundstransfer_managedAccountIBANGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "Managed Accounts" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_accounts/{id}/iban",
      "parameters" : [ ]
    },
    "/stepup/challenges/otp/{channel}/verify" : {
      "post" : {
        "summary" : "Verify a step-up token using a one-time password",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_stepupSCAVerify",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Step-up",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "create",
        "description" : "Completes the verification process for a step up token.\nThe challenge expires after 5 minutes and the number of incorrect OTP attempts is limited to reduce the risk of fraud, in that case challenge has to be issued again.\n\n_Note that on the Sandbox Environment, text messages are not sent and the `verificationCode` is always \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_stepupSCAVerify",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "$ref" : "#/parameters/channel"
        }, {
          "schema" : {
            "$ref" : "#/definitions/SCAVerifyRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Step-up" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/stepup/challenges/otp/{channel}/verify",
      "parameters" : [ ]
    },
    "/consumers/kyc_mobile_sumsub" : {
      "post" : {
        "summary" : "Start consumer KYC on mobile",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_consumerKycStartSumsubMobile",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Consumers",
        "produces" : [ "application/json" ],
        "description" : "Consumers need to complete due diligence (KYC) before they can create instruments and perform transactions.\nUse this call instead of `/consumers/kyc` only in case where the KYC is to be performed using a mobile device. \nThe information returned in the response is to be used to integrate directly with Sumsub Mobile SDK.\n",
        "operationId" : "weavrfundstransfer_consumerKycStartSumsubMobile",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "schema" : {
            "$ref" : "#/definitions/ConsumerKycLevelRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Consumers" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/consumers/kyc_mobile_sumsub",
      "parameters" : [ ]
    },
    "/challenges/push/{channel}" : {
      "post" : {
        "summary" : "Issue a push notification that can be used to verify a list of resources",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_multipleSCAChallengePush",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Challenges",
        "produces" : [ "application/json" ],
        "description" : "Starts the verification process for a list of resources in which a push notification is sent to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/push/{channel}` endpoint.\n\nThis endpoint can be used to challenge _Outgoing Wire Transfers_ & _Sends_.\n\nYou should only start this process if the resource `state` is `PENDING_CHALLENGE`.\n",
        "operationId" : "weavrfundstransfer_multipleSCAChallengePush",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "405" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "$ref" : "#/parameters/scaPushChannel"
        }, {
          "schema" : {
            "$ref" : "#/definitions/MultipleSCAChallengeRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Challenges" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/challenges/push/{channel}",
      "parameters" : [ ]
    },
    "/sends/{id}/challenges/push/{channel}" : {
      "post" : {
        "summary" : "Issue a push notification that can be used to verify Send transaction",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_sendSCAChallengePush",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Sends",
        "deprecated" : true,
        "produces" : [ "application/json" ],
        "description" : "Deprecated in favour of [Challenges endpoints](Challenges/#operation/multipleSCAChallengePush)\n\nStarts the verification process for a Send in which a push notification is sent to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/push/{channel}` endpoint.\n\nYou should only start this process if the Send transaction `state` is `PENDING_CHALLENGE`.\n",
        "operationId" : "weavrfundstransfer_sendSCAChallengePush",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "503" : { },
          "405" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the send transaction.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/scaPushChannel"
        } ],
        "tags" : [ "Sends" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/sends/{id}/challenges/push/{channel}",
      "parameters" : [ ]
    },
    "/outgoing_wire_transfers/bulk/create" : {
      "post" : {
        "summary" : "Create a bulk of outgoing wire transfer transactions",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_outgoingWireTransferCreateBulk",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Outgoing Wire Transfers",
        "deprecated" : true,
        "produces" : [ "application/json" ],
        "description" : "Deprecated in favour of the [Bulk operation](Operations/#operation/bulksOutgoingWireTransferCreate).\n\nTransfers funds from multiple managed accounts to multiple external bank accounts.\n\nThe Outgoing Wire Transfer Profile (configured in the Multi Portal) specified determines the behaviour and restrictions of the transaction (for example, fees).\n\nNote that even if the transaction is created successfully, you still need to check its state in order to determine if it is pending completion of an authentication challenge by the user. \n",
        "operationId" : "weavrfundstransfer_outgoingWireTransferCreateBulk",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/OutgoingWireTransferBulkCreateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Outgoing Wire Transfers" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/outgoing_wire_transfers/bulk/create",
      "parameters" : [ ]
    },
    "/beneficiaries/batch/{id}/challenges/otp/{channel}/verify" : {
      "post" : {
        "summary" : "Verify a beneficiary batch using a one-time password",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_beneficiaryBatchSCAVerify",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Beneficiaries",
        "produces" : [ "application/json" ],
        "description" : "Completes the verification process for updating the beneficiary batch.\n\nIf the outcome of the verification is successful, the beneficiary update batch is executed.\n\n_Note that on the Sandbox Environment, text messages are not sent and the verificationCode is always \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_beneficiaryBatchSCAVerify",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the Beneficiary Batch Operation.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/channel"
        }, {
          "schema" : {
            "$ref" : "#/definitions/SCAVerifyRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Beneficiaries" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/beneficiaries/batch/{id}/challenges/otp/{channel}/verify",
      "parameters" : [ ]
    },
    "/sends/bulk/cancel" : {
      "post" : {
        "summary" : "Cancel send transactions",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_sendCancel",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Sends",
        "produces" : [ "application/json" ],
        "description" : "Cancels send transactions that are scheduled to be executed in the future.",
        "operationId" : "weavrfundstransfer_sendCancel",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "schema" : {
            "$ref" : "#/definitions/TransactionBulkCancelRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Sends" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/sends/bulk/cancel",
      "parameters" : [ ]
    },
    "/corporates/verification/email/verify" : {
      "post" : {
        "summary" : "Verify email of the root user",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_corporateRootUserEmailVerify",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Corporates",
        "produces" : [ "application/json" ],
        "description" : "The second step in verifying the root user's email. The randomly generated code sent to the root user via\nemail, using the _corporateRootUserEmailVerificationCodeSend_ operation, is submitted here to verify the root user's email.\n\nThis is needed as part of the verification process for basic due diligence.\n\n_Note that on the Sandbox Environment, the `verificationCode` is always set to \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_corporateRootUserEmailVerify",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "schema" : {
            "$ref" : "#/definitions/EmailVerifyRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Corporates" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/corporates/verification/email/verify",
      "parameters" : [ ]
    },
    "/bulks/managed_cards/_id_/spend_rules" : {
      "patch" : {
        "summary" : "Update spend rules for a managed card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_bulksManagedCardSpendRulesUpdate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Operations",
        "produces" : [ "application/json" ],
        "description" : "Submit the details to update the spend rules of Managed Cards\n\nThe  bulkId returned in the response can subsequently be used to launch the updating of Managed Card spend rules process through <Execute bulk process>. A submitted bulk process can be managed (executed, accessed, paused, resumed and cancelled) by any other Authorised User of the same identity of the user that submits the details.\n\nThe status of the bulk process after execution of this operation is set to ‘SUBMITTED’. The execution of the bulk process is launched through the Execute bulk process operation.\n\nThe submission of data for a bulk process does not expire but it can be cancelled through <Cancel bulk process>\n\nThe system is configured to accept bulk requests to process up to a maximum of 10,000 bulk operations\n\nEach spend rules update operation in this bulk process is processed via <Managed Cards > Update a Managed Card\n",
        "operationId" : "weavrfundstransfer_bulksManagedCardSpendRulesUpdate",
        "responses" : {
          "201" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "operationCount" : {
                  "format" : "int32",
                  "type" : "integer"
                },
                "path" : {
                  "type" : "string"
                },
                "bulkId" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Success - returning bulk process"
          }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.WeavrfundstransferBulksManagedCardSpendRulesUpdateRequest",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "pathParams" : {
                  "type" : "object",
                  "properties" : {
                    "_id_" : {
                      "pattern" : "^[0-9]+$",
                      "type" : "string"
                    }
                  }
                },
                "requestBody" : {
                  "$ref" : "#/definitions/UpdateCardLevelSpendRules"
                }
              }
            }
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Operations" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/bulks/managed_cards/_id_/spend_rules",
      "parameters" : [ ]
    },
    "/managed_cards/{id}/statement" : {
      "get" : {
        "summary" : "Get a managed card statement",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardStatement",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Returns a list of transactions against the managed card identified by the `id` path parameter, matching the criteria provided in the request.",
        "operationId" : "weavrfundstransfer_managedCardStatement",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of a managed card.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/accept"
        }, {
          "$ref" : "#/parameters/offset"
        }, {
          "$ref" : "#/parameters/limit"
        }, {
          "$ref" : "#/parameters/orderByTimestamp"
        }, {
          "$ref" : "#/parameters/fromTimestamp"
        }, {
          "$ref" : "#/parameters/toTimestamp"
        }, {
          "$ref" : "#/parameters/singleEntryPerTransaction"
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards/{id}/statement",
      "parameters" : [ ]
    },
    "/managed_cards/{id}/physical/activate" : {
      "post" : {
        "summary" : "Activate a physical card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardPhysicalActivate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Activates the physical card identified by the `id` path paramter.",
        "operationId" : "weavrfundstransfer_managedCardPhysicalActivate",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/ManagedCardPhysicalActivateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards/{id}/physical/activate",
      "parameters" : [ ]
    },
    "/passwords/{user_id}/create" : {
      "post" : {
        "summary" : "Create a password",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_passwordCreate",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Passwords",
        "produces" : [ "application/json" ],
        "description" : "Create a new password for the user identified by the `user_id` path parameter.",
        "operationId" : "weavrfundstransfer_passwordCreate",
        "responses" : {
          "200" : { },
          "default" : { },
          "410" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/userId"
        }, {
          "schema" : {
            "$ref" : "#/definitions/PasswordCreateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Passwords" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/passwords/{user_id}/create",
      "parameters" : [ ]
    },
    "/bulks/{bulk_id}/operations" : {
      "get" : {
        "summary" : "Get all operations in a bulk",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_bulkIdOperations",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Manage",
        "produces" : [ "application/json" ],
        "description" : "Retrieves the bulk process operations that match the query parameters.",
        "operationId" : "weavrfundstransfer_bulkIdOperations",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/bulkId"
        }, {
          "$ref" : "#/parameters/offset"
        }, {
          "$ref" : "#/parameters/limit"
        }, {
          "$ref" : "#/parameters/sequence"
        }, {
          "$ref" : "#/parameters/bulkProcessOperationStatus"
        } ],
        "tags" : [ "Manage" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/bulks/{bulk_id}/operations",
      "parameters" : [ ]
    },
    "/consumers/verification/email/verify" : {
      "post" : {
        "summary" : "Verify email of the root user",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_consumerRootUserEmailVerify",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Consumers",
        "produces" : [ "application/json" ],
        "description" : "The second step in verifying the root user's email. The randomly generated code sent to the root user via\nemail, using the _consumerRootUserEmailVerificationCodeSend_ operation, is submitted here to verify the root user's email.\n\nThis is needed as part of the verification process for basic due diligence.\n\nNote that on the Sandbox Environment, emails are not sent and the verification code is always set to \\\"123456\\\".\n",
        "operationId" : "weavrfundstransfer_consumerRootUserEmailVerify",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "schema" : {
            "$ref" : "#/definitions/EmailVerifyRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Consumers" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/consumers/verification/email/verify",
      "parameters" : [ ]
    },
    "/authentication_factors" : {
      "get" : {
        "summary" : "Get user authentication factors",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_authFactorsGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Additional Factors",
        "produces" : [ "application/json" ],
        "description" : "Retrieves the list of authentication factors that can be used to verify the logged-in user.",
        "operationId" : "weavrfundstransfer_authFactorsGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "tags" : [ "Additional Factors" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/authentication_factors",
      "parameters" : [ ]
    },
    "/outgoing_wire_transfers/{id}/challenges/push/{channel}" : {
      "post" : {
        "summary" : "Issue a push notification that can be used to verify an outgoing wire transfer",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_outgoingWireTransferSCAChallengePush",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Outgoing Wire Transfers",
        "deprecated" : true,
        "produces" : [ "application/json" ],
        "description" : "Deprecated in favour of [Challenges endpoints](Challenges/#operation/multipleSCAChallengePush)\n\nStarts the verification process for an outgoing wire transfer in which a push notification is sent to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/push/{channel}` endpoint.\n\nYou should only start this process if the outgoing wire transfer `state` is `PENDING_CHALLENGE`.\n",
        "operationId" : "weavrfundstransfer_outgoingWireTransferSCAChallengePush",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "503" : { },
          "405" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the Outgoing Wire Transfer transaction.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/scaPushChannel"
        } ],
        "tags" : [ "Outgoing Wire Transfers" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/outgoing_wire_transfers/{id}/challenges/push/{channel}",
      "parameters" : [ ]
    },
    "/managed_accounts/{id}/unblock" : {
      "post" : {
        "summary" : "Unblock a managed account",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedAccountUnblock",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Accounts",
        "produces" : [ "application/json" ],
        "description" : "Unblocks the managed account identified by the `id` path parameter.\nThe managed account must have `state.blockedReason` as `USER` so that it can be unblocked.\nIf the managed account was blocked by `SYSTEM`, users cannot unblock it.\n",
        "operationId" : "weavrfundstransfer_managedAccountUnblock",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the managed account.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "tags" : [ "Managed Accounts" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_accounts/{id}/unblock",
      "parameters" : [ ]
    },
    "/stepup/challenges/push/{channel}" : {
      "post" : {
        "summary" : "Issue a push notification that can be used to step-up a token",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_stepupSCAChallengePush",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Step-up",
        "produces" : [ "application/json" ],
        "description" : "Initiates the step-up token process by submitting a push notification to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/push/{channel}` endpoint.\n\nYou should only start this process if the token step-up isn't already in flight.\n",
        "operationId" : "weavrfundstransfer_stepupSCAChallengePush",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "405" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "$ref" : "#/parameters/scaPushChannel"
        } ],
        "tags" : [ "Step-up" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/stepup/challenges/push/{channel}",
      "parameters" : [ ]
    },
    "/managed_accounts/{id}/remove" : {
      "post" : {
        "summary" : "Remove a managed account",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedAccountRemove",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Accounts",
        "produces" : [ "application/json" ],
        "description" : "Destroys the managed account identified by the `id` path parameter. Unlike block, this action is not reversible.\n\nA managed account must be emptied from any remaining funds before it can be destroyed.\n",
        "operationId" : "weavrfundstransfer_managedAccountRemove",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the managed account.",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "Managed Accounts" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_accounts/{id}/remove",
      "parameters" : [ ]
    },
    "/managed_cards/{id}/physical" : {
      "post" : {
        "summary" : "Upgrade a card to physical",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardPhysicalUpgrade",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Upgrades the virtual card identified by the `id` path parameter to physical.\n\nBefore cards can be upgraded, a physical card programme must be set up and the card profile configuration updated accordingly.\n",
        "operationId" : "weavrfundstransfer_managedCardPhysicalUpgrade",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/ManagedCardPhysicalUpgradeRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards/{id}/physical",
      "parameters" : [ ]
    },
    "/authentication_factors/otp/{channel}" : {
      "post" : {
        "summary" : "Enrol a user device for authentication using one-time passwords",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_enrolDeviceUsingOtpStepOne",
        "security" : [ {
          "api_key" : [ ]
        }, {
          "auth_token" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Additional Factors",
        "produces" : [ "application/json" ],
        "description" : "This is the first step in enrolling the logged-in user's mobile device, where a one-time password is sent to the device.\n\n_Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_enrolDeviceUsingOtpStepOne",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "$ref" : "#/parameters/channel"
        } ],
        "tags" : [ "Additional Factors" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/authentication_factors/otp/{channel}",
      "parameters" : [ ]
    },
    "/managed_cards/{id}/physical/pin" : {
      "get" : {
        "summary" : "Get PIN for a physical card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardPhysicalPinGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Retrieves the PIN of the physical card identified by the `id` path parameter.",
        "operationId" : "weavrfundstransfer_managedCardPhysicalPinGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards/{id}/physical/pin",
      "parameters" : [ ]
    },
    "/users/kyc" : {
      "post" : {
        "summary" : "Start KYC for the user",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_userKyc",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Authorised Users",
        "produces" : [ "application/json" ],
        "description" : "Perform the kyc for a corporate user.\n",
        "operationId" : "weavrfundstransfer_userKyc",
        "responses" : {
          "200" : {
            "schema" : {
              "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.WeavrfundstransferUserKycResponse",
              "type" : "object",
              "properties" : {
                "reference" : {
                  "pattern" : "^[0-9]+$",
                  "description" : "The reference required to initialise the KYB UI Component.",
                  "type" : "string"
                }
              }
            },
            "description" : "Success"
          },
          "default" : {
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "description" : "Error"
          },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "409" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "EMAIL_NOT_VERIFIED", "MOBILE_NOT_VERIFIED", "KYC_ALREADY_APPROVED", "KYC_PENDING_REVIEW", "KYC_REJECTED", "KYB_IDENTITY_NOT_APPROVED" ]
                }
              }
            },
            "description" : "Conflict"
          }
        },
        "tags" : [ "Authorised Users" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/users/kyc",
      "parameters" : [ ]
    },
    "/access_token" : {
      "post" : {
        "summary" : "Acquire a new access token",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_requestAccessToken",
        "security" : [ {
          "api_key" : [ ]
        }, {
          "auth_token" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Access",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "create",
        "description" : "This API endpoint accepts a POST request with an auth_token parameter and returns an access_token that grants authorized access to additional resources within the API, with a different expiration time and unique signature.\n",
        "operationId" : "weavrfundstransfer_requestAccessToken",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "423" : { },
          "500" : { },
          "403" : {
            "description" : "The auth token is not specified or is incorrect."
          },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "schema" : {
            "$ref" : "#/definitions/AccessTokenRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Access" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/access_token",
      "parameters" : [ ]
    },
    "/managed_accounts" : {
      "post" : {
        "summary" : "Create a managed account",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedAccountCreate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Accounts",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "create",
        "description" : "Creates a managed account for the consumer or corporate identity.\nThe Managed Account Profile (configured in the Multi Portal) specified determines the behavior and restrictions that the managed account will have.\"\n",
        "operationId" : "weavrfundstransfer_managedAccountCreate",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/ManagedAccountCreateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Managed Accounts" ],
        "consumes" : [ "application/json" ]
      },
      "get" : {
        "summary" : "Get all managed accounts",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedAccountsGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Accounts",
        "produces" : [ "application/json" ],
        "description" : "Retrieves all managed accounts belonging to the logged-in identity.",
        "operationId" : "weavrfundstransfer_managedAccountsGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/offset"
        }, {
          "$ref" : "#/parameters/limit"
        }, {
          "$ref" : "#/parameters/profileId"
        }, {
          "$ref" : "#/parameters/friendlyName"
        }, {
          "$ref" : "#/parameters/state"
        }, {
          "$ref" : "#/parameters/state_blockedReason"
        }, {
          "$ref" : "#/parameters/state_destroyedReason"
        }, {
          "$ref" : "#/parameters/currency"
        }, {
          "$ref" : "#/parameters/createdFrom"
        }, {
          "$ref" : "#/parameters/createdTo"
        }, {
          "$ref" : "#/parameters/tag"
        } ],
        "tags" : [ "Managed Accounts" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_accounts",
      "parameters" : [ ]
    },
    "/bulks/users" : {
      "post" : {
        "summary" : "Create a user",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_bulksUserCreate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Operations",
        "produces" : [ "application/json" ],
        "description" : "Submit the details for the creation of a batch of Authorised Users \n\nThe bulkId returned in the response can subsequently be used to launch the creation of the bulk process through _bulkIdExecute_ process. A submitted bulk process can be managed (executed, accessed, paused, resumed and cancelled) by any other Authorised User of the same identity of the user that submits the details.\n\nThe status of the bulk process after execution of this operation is set to ‘SUBMITTED’. The execution of the bulk process is launched through the Execute bulk process operation.\n\nThe submission of data for a bulk process does not expire but it can be cancelled through _bulkIdCancel_\n\nThe system is configured to accept bulk requests to process up to a maximum of 10,000 bulk operations\n\nEach create Authorised User operation in this bulk process is processed via _userCreate_\n",
        "operationId" : "weavrfundstransfer_bulksUserCreate",
        "responses" : {
          "201" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "operationCount" : {
                  "format" : "int32",
                  "type" : "integer"
                },
                "path" : {
                  "type" : "string"
                },
                "bulkId" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Success - returning bulk process"
          }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.WeavrfundstransferBulksUserCreateRequest",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "pathParams" : {
                  "type" : "object"
                },
                "requestBody" : {
                  "type" : "object",
                  "properties" : {
                    "surname" : {
                      "description" : "The last name of the user.",
                      "type" : "string",
                      "maxLength" : 20
                    },
                    "name" : {
                      "description" : "The first name of the user.",
                      "type" : "string",
                      "maxLength" : 20
                    },
                    "mobile" : {
                      "$ref" : "#/definitions/Mobile"
                    },
                    "dateOfBirth" : {
                      "$ref" : "#/definitions/Date"
                    },
                    "tag" : {
                      "$ref" : "#/definitions/Tag"
                    },
                    "email" : {
                      "$ref" : "#/definitions/Email"
                    }
                  }
                }
              }
            }
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Operations" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/bulks/users",
      "parameters" : [ ]
    },
    "/login_via_biometrics" : {
      "post" : {
        "summary" : "Login via biometrics",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_loginViaBiometrics",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Access",
        "produces" : [ "application/json" ],
        "description" : "Trigger a push notification and subsequent biometric authentication of a user, by providing the email that was \nused in the enrolment process of biometrics.\n\nThis endpoint can be used in conjunction with your application to authenticate a user and receive a stepped-up \ntoken in a single action, for use in-session for any endpoints or UI components that require step-up \nauthentication.\n\nGiven that the user credentials are correct, a push notification is sent to the user requesting them to complete\nbiometric authentication. On successful completion of authentication, a token will be shared that can be used \nfor endpoints or UI components that require a stepped-up token.\n",
        "operationId" : "weavrfundstransfer_loginViaBiometrics",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "423" : { },
          "500" : { },
          "403" : {
            "description" : "The authentication credentials are not found or are incorrect."
          },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "schema" : {
            "$ref" : "#/definitions/LoginViaBiometricsRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Access" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/login_via_biometrics",
      "parameters" : [ ]
    },
    "/bulks/outgoing_wire_transfers" : {
      "post" : {
        "summary" : "Create an outgoing wire transfer",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_bulksOutgoingWireTransferCreate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Operations",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "create",
        "description" : "Submit the details for the creation of a batch of Outgoing Wire Transfers.\n\nThe bulkId returned in the response can subsequently be used to launch the creation of the bulk process through _bulkIdExecute_ process. A submitted bulk process can be managed (executed, accessed, paused, resumed and cancelled) by any other Authorised User of the same identity of the user that submits the details.\n\nThe status of the bulk process after execution of this operation is set to ‘SUBMITTED’. The execution of the bulk process is launched through the Execute bulk process operation.\n\nThe submission of data for a bulk process does not expire but it can be cancelled through _bulkIdCancel_.\n\nThe system is configured to accept bulk requests to process up to a maximum of 10,000 bulk operations.\n\nEach create Outgoing Wire Transfer operation in this bulk process is processed via _outgoingWireTransferCreate_.\n",
        "operationId" : "weavrfundstransfer_bulksOutgoingWireTransferCreate",
        "responses" : {
          "201" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "operationCount" : {
                  "format" : "int32",
                  "type" : "integer"
                },
                "path" : {
                  "type" : "string"
                },
                "bulkId" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Success - returning bulk process"
          }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.WeavrfundstransferBulksOutgoingWireTransferCreateRequest",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "pathParams" : {
                  "type" : "object"
                },
                "requestBody" : {
                  "$ref" : "#/definitions/OutgoingWireTransferCreateRequest"
                }
              }
            }
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Operations" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/bulks/outgoing_wire_transfers",
      "parameters" : [ ]
    },
    "/bulks/{bulk_id}/pause" : {
      "post" : {
        "summary" : "Pause bulk process",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_bulkIdPause",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Manage",
        "produces" : [ "application/json" ],
        "description" : "Pauses the execution of operations of the bulk process that is in state ‘RUNNING’ as identified by the bulk_id  parameter.\n\nThe status of the bulk process after execution of this operation is set to ‘PAUSED’\n\nThe execution can be resumed through _bulkIdResume_\n",
        "operationId" : "weavrfundstransfer_bulkIdPause",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/bulkId"
        } ],
        "tags" : [ "Manage" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/bulks/{bulk_id}/pause",
      "parameters" : [ ]
    },
    "/transfers/{id}" : {
      "get" : {
        "summary" : "Get a transfer transaction",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_transferGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Transfers",
        "produces" : [ "application/json" ],
        "description" : "Retrieve the transfer transaction identified by the `id` path parameter.",
        "operationId" : "weavrfundstransfer_transferGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the Transfer transaction.",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "Transfers" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/transfers/{id}",
      "parameters" : [ ]
    },
    "/users/verification/email/verify" : {
      "post" : {
        "summary" : "Verify email of the authorised user",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_authorisedUserEmailVerify",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Authorised Users",
        "produces" : [ "application/json" ],
        "description" : "The second step in verifying the authorised user's email. The randomly generated code sent to the authorised user via\nemail, using the _authorisedUserEmailVerificationCodeSend_ operation, is submitted here to verify the authorised user's email.\n\nThis is needed as part of the verification process for basic due diligence.\n\n_Note that on the Sandbox Environment, the `verificationCode` is always set to \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_authorisedUserEmailVerify",
        "responses" : {
          "default" : {
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "description" : "Error"
          },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "VERIFICATION_CODE_INVALID" ]
                }
              }
            },
            "description" : "Conflict"
          }
        },
        "parameters" : [ {
          "schema" : {
            "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.WeavrfundstransferAuthorisedUserEmailVerifyRequest",
            "type" : "object",
            "required" : [ "email", "verificationCode" ],
            "properties" : {
              "email" : {
                "$ref" : "#/definitions/Email"
              },
              "verificationCode" : {
                "$ref" : "#/definitions/VerificationCode"
              }
            }
          },
          "in" : "body",
          "name" : "body",
          "required" : true
        } ],
        "tags" : [ "Authorised Users" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/users/verification/email/verify",
      "parameters" : [ ]
    },
    "/bulks/{bulk_id}/execute" : {
      "post" : {
        "summary" : "Execute bulk process",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_bulkIdExecute",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Manage",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "create",
        "description" : "Launches execution of operations of any bulk process identified by the bulk_id  parameter.\n\nThe status of the bulk process has to be in a ‘SUBMITTED’ state and after execution initiates, the bulk process state is set to ‘RUNNING’.\n\nThe final state of execution can be any of\n\nCOMPLETED: the execution of the bulk process is complete and all bulk operations of the bulk process were executed successfully\n\nFAILED:  none of the operations of the bulk process have executed.\n\nPARTIALLY_COMPLETED: the execution of the bulk process is complete and some of the bulk operations of the bulk process failed.\n\nThis operation is asynchronous and will return immediately. You can track the status of the execution of the bulk process through Get bulk process. You can also pause execution through _bulkIdPause_\n",
        "operationId" : "weavrfundstransfer_bulkIdExecute",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/bulkId"
        }, {
          "schema" : {
            "$ref" : "#/definitions/BulkProcessExecute"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Manage" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/bulks/{bulk_id}/execute",
      "parameters" : [ ]
    },
    "/sends/{id}/challenges/otp/{channel}" : {
      "post" : {
        "summary" : "Issue a one-time password that can be used to verify a send",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_sendSCAChallenge",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Sends",
        "deprecated" : true,
        "produces" : [ "application/json" ],
        "description" : "Deprecated in favour of [Challenges endpoints](Challenges/#operation/multipleSCAChallenge)\n\nStarts the verification process for a send in which a one-time password is sent to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/otp/{channel}` endpoint.\n\nYou should only start this process if the send `state` is `PENDING_CHALLENGE`.\n\n_Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_sendSCAChallenge",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "503" : { },
          "405" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the send transaction.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/channel"
        } ],
        "tags" : [ "Sends" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/sends/{id}/challenges/otp/{channel}",
      "parameters" : [ ]
    },
    "/outgoing_wire_transfers" : {
      "post" : {
        "summary" : "Create an outgoing wire transfer",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_outgoingWireTransferCreate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Outgoing Wire Transfers",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "create",
        "description" : "Transfers funds from managed accounts to an external bank account.\n\nThe Outgoing Wire Transfer Profile (configured in the Multi Portal) specified determines the behaviour and restrictions of the transaction (for example, fees).\n\nNote that even if the transaction is created successfully, you still need to check its state in order to determine if it is pending completion of an authentication challenge by the user. \n",
        "operationId" : "weavrfundstransfer_outgoingWireTransferCreate",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/OutgoingWireTransferCreateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Outgoing Wire Transfers" ],
        "consumes" : [ "application/json" ]
      },
      "get" : {
        "summary" : "Get all outgoing wire transfer transactions",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_outgoingWireTransfersGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Outgoing Wire Transfers",
        "produces" : [ "application/json" ],
        "description" : "Retrieves all the outgoing wire transfer transactions performed by the logged-in identity.",
        "operationId" : "weavrfundstransfer_outgoingWireTransfersGet",
        "responses" : {
          "200" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/offset"
        }, {
          "$ref" : "#/parameters/limit"
        }, {
          "$ref" : "#/parameters/profileId"
        }, {
          "$ref" : "#/parameters/owtInstrument"
        }, {
          "$ref" : "#/parameters/sourceInstrument_id"
        }, {
          "$ref" : "#/parameters/sourceInstrument_type"
        }, {
          "$ref" : "#/parameters/owtState"
        }, {
          "in" : "query",
          "name" : "createdFrom",
          "format" : "int64",
          "description" : "Filter for outgoing wire transfer transactions created after `createdFrom` timestamp, expressed in Epoch timestamp using millisecond precision. Leave out to fetch all outgoing wire transfer transactions.",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "createdTo",
          "format" : "int64",
          "description" : "Filter for Outgoing Wire Transfer transactions created before `createdTo` timestamp, expressed in Epoch timestamp using millisecond precision. Leave out to fetch all outgoing wire transfer transactions.",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "executedFrom",
          "format" : "int64",
          "description" : "Filter for outgoing wire transfer transactions executed after `executedFrom` timestamp, expressed in Epoch timestamp using millisecond precision. Leave out to fetch all outgoing wire transfer transactions.",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "executedTo",
          "format" : "int64",
          "description" : "Filter for Outgoing Wire Transfer transactions executed before `executedTo` timestamp, expressed in Epoch timestamp using millisecond precision. Leave out to fetch all outgoing wire transfer transactions.",
          "type" : "integer",
          "required" : false
        }, {
          "in" : "query",
          "name" : "tag",
          "description" : "Filter by the outgoing wire transfer tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries.",
          "type" : "string",
          "required" : false
        } ],
        "tags" : [ "Outgoing Wire Transfers" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/outgoing_wire_transfers",
      "parameters" : [ ]
    },
    "/bulks/{bulk_id}/resume" : {
      "post" : {
        "summary" : "Resume bulk process",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_bulkIdResume",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Manage",
        "produces" : [ "application/json" ],
        "description" : "Resumes the execution of operations of the bulk process that is in state ' PAUSED' as identified by the bulk_id parameter.\n\nThe status of the bulk process after execution of this operation is set back to ‘RUNNING’\n",
        "operationId" : "weavrfundstransfer_bulkIdResume",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/bulkId"
        } ],
        "tags" : [ "Manage" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/bulks/{bulk_id}/resume",
      "parameters" : [ ]
    },
    "/consumers/kyc" : {
      "post" : {
        "summary" : "Start KYC for a consumer",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_consumerKycStart",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Consumers",
        "produces" : [ "application/json" ],
        "description" : "Consumers need to complete due diligence (KYC) before they can create instruments and fund transaction.\n\nThis operation initiates the due diligence process for the logged-in consumer.  \n\nDue Diligence is handled by a KYC provider, you will need to embed the KYC UI Component in your application to show the KYC screens to your users.\n\nTo initialise the KYC UI Component, you need a `reference` that is given to you in the response of this operation.\n",
        "operationId" : "weavrfundstransfer_consumerKycStart",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "schema" : {
            "$ref" : "#/definitions/ConsumerKycLevelRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Consumers" ],
        "consumes" : [ "application/json" ]
      },
      "get" : {
        "summary" : "Get KYC for a consumer",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_consumerKycGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Consumers",
        "produces" : [ "application/json" ],
        "description" : "Returns the KYC status for the logged-in consumer.",
        "operationId" : "weavrfundstransfer_consumerKycGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { }
        },
        "tags" : [ "Consumers" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/consumers/kyc",
      "parameters" : [ ]
    },
    "/beneficiaries/batch/{id}" : {
      "get" : {
        "summary" : "Get a beneficiary batch",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_beneficiaryBatchGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Beneficiaries",
        "produces" : [ "application/json" ],
        "description" : "Retrieves the details of a beneficiary batch identified by the batchId path parameter",
        "operationId" : "weavrfundstransfer_beneficiaryBatchGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of a beneficiary batch.",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "Beneficiaries" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/beneficiaries/batch/{id}",
      "parameters" : [ ]
    },
    "/consumers" : {
      "patch" : {
        "summary" : "Update a consumer",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_consumerUpdate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Consumers",
        "produces" : [ "application/json" ],
        "description" : "Update the details of the logged-in consumer identity.\n\nIf the Consumer root user has already completed KYC, the following details cannot be updated:\n  - name\n  - surname\n  - email\n  - mobile Country Code\n  - mobile Number\n  - date of Birth\n  - address\n",
        "operationId" : "weavrfundstransfer_consumerUpdate",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "schema" : {
            "$ref" : "#/definitions/ConsumerUpdateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Consumers" ],
        "consumes" : [ "application/json" ]
      },
      "post" : {
        "summary" : "Create a consumer",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_consumerCreate",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Consumers",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "create",
        "description" : "Create a Consumer Identity to represent an Individual.\n\nThe information provided must be accurate as it will be passed on for KYC verification with our partner.\n\n*Incorrect information may incur a re-processing fee.*\n",
        "operationId" : "weavrfundstransfer_consumerCreate",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/ConsumerCreateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Consumers" ],
        "consumes" : [ "application/json" ]
      },
      "get" : {
        "summary" : "Get a consumer",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_consumerGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Consumers",
        "produces" : [ "application/json" ],
        "description" : "Retrieve the details of the logged-in Consumer.",
        "operationId" : "weavrfundstransfer_consumerGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { }
        },
        "tags" : [ "Consumers" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/consumers",
      "parameters" : [ ]
    },
    "/challenges/{scaChallengeId}/otp/{channel}/verify" : {
      "post" : {
        "summary" : "Verify a list of resources using a one-time password",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_multipleSCAVerify",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Challenges",
        "produces" : [ "application/json" ],
        "description" : "Completes the verification process for a list of resources.\n\nThis endpoint can be used to challenge _Outgoing Wire Transfers_ & _Sends_.\n\nIf the outcome of the verification is successful, the resource is executed.\n\nIf not verified challenge expires after 5 minutes and the number of incorrect OTP attempts is limited to reduce the risk of fraud.\n\n_Note that on the Sandbox Environment, text messages are not sent and the `verificationCode` is always \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_multipleSCAVerify",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "in" : "path",
          "name" : "scaChallengeId",
          "description" : "The unique identifier of the SCA challenge.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/channel"
        }, {
          "schema" : {
            "$ref" : "#/definitions/MultipleSCAVerifyRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Challenges" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/challenges/{scaChallengeId}/otp/{channel}/verify",
      "parameters" : [ ]
    },
    "/outgoing_wire_transfers/{id}" : {
      "get" : {
        "summary" : "Get an outgoing wire transfer transaction",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_outgoingWireTransferGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Outgoing Wire Transfers",
        "produces" : [ "application/json" ],
        "description" : "Retrieves the outgoing wire transfer identified by the `id` path parameter.",
        "operationId" : "weavrfundstransfer_outgoingWireTransferGet",
        "responses" : {
          "200" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the Outgoing Wire Transfer transaction.",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "Outgoing Wire Transfers" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/outgoing_wire_transfers/{id}",
      "parameters" : [ ]
    },
    "/managed_cards/{id}/physical/report_lost" : {
      "post" : {
        "summary" : "Report a physical card as lost",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardPhysicalReportLost",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Report the physical card identified by the `id` path parameter as lost. This will deactivate the instrument and a new card will need to be requested.",
        "operationId" : "weavrfundstransfer_managedCardPhysicalReportLost",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards/{id}/physical/report_lost",
      "parameters" : [ ]
    },
    "/passwords/update" : {
      "post" : {
        "summary" : "Update a password",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_passwordUpdate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Passwords",
        "produces" : [ "application/json" ],
        "description" : "Update the password for the logged-in user.",
        "operationId" : "weavrfundstransfer_passwordUpdate",
        "responses" : {
          "200" : { },
          "default" : { },
          "410" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "schema" : {
            "$ref" : "#/definitions/PasswordUpdateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Passwords" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/passwords/update",
      "parameters" : [ ]
    },
    "/users/verification/email/send" : {
      "post" : {
        "summary" : "Send an email verification code to the authorised user",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_authorisedUserEmailVerificationCodeSend",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Authorised Users",
        "produces" : [ "application/json" ],
        "description" : "The first step in verifying an authorised user's email. The authorised user whose email address is to be verified is sent an email containing a randomly generated code.\n\nThis code must then be provided in the _authorisedUserEmailVerify_ operation to verify the authorised user's email address.\n\n_Note that on the Sandbox Environment, the `verificationCode` is always set to \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_authorisedUserEmailVerificationCodeSend",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "errorCode" : {
                  "type" : "string",
                  "enum" : [ "EMAIL_NOT_FOUND" ]
                }
              }
            },
            "description" : "Conflict"
          }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.WeavrfundstransferAuthorisedUserEmailVerificationCodeSendRequest",
            "type" : "object",
            "required" : [ "email" ],
            "properties" : {
              "email" : {
                "$ref" : "#/definitions/Email"
              }
            }
          },
          "in" : "body",
          "name" : "body",
          "required" : true
        } ],
        "tags" : [ "Authorised Users" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/users/verification/email/send",
      "parameters" : [ ]
    },
    "/transfers" : {
      "post" : {
        "summary" : "Create a transfer transaction",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_transferCreate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Transfers",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "create",
        "description" : "Transfers funds between managed accounts and managed cards belonging to the same corporate or consumer identity.\n\nThe Transfer Profile (configured in the Multi Portal) specified determines the behaviour and restrictions of the transaction (for example, fees).\n",
        "operationId" : "weavrfundstransfer_transferCreate",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/CreateTransferRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Transfers" ],
        "consumes" : [ "application/json" ]
      },
      "get" : {
        "summary" : "Get all transfer transactions",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_transfersGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Transfers",
        "produces" : [ "application/json" ],
        "description" : "Retrieves all the transfer transactions performed by the logged-in identity.",
        "operationId" : "weavrfundstransfer_transfersGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/offset"
        }, {
          "$ref" : "#/parameters/limit"
        }, {
          "$ref" : "#/parameters/transferProfileId"
        }, {
          "$ref" : "#/parameters/instrumentId"
        }, {
          "$ref" : "#/parameters/transactionState"
        }, {
          "$ref" : "#/parameters/transferCreatedFrom"
        }, {
          "$ref" : "#/parameters/transferCreatedTo"
        }, {
          "$ref" : "#/parameters/transferExecutedFrom"
        }, {
          "$ref" : "#/parameters/transferExecutedTo"
        }, {
          "$ref" : "#/parameters/transferTag"
        } ],
        "tags" : [ "Transfers" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/transfers",
      "parameters" : [ ]
    },
    "/logout" : {
      "post" : {
        "summary" : "Logout",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_logout",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Access",
        "produces" : [ "application/json" ],
        "description" : "Logs out the user and terminates the session identified by the `auth_token` in the Authorization Header.",
        "operationId" : "weavrfundstransfer_logout",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "503" : { },
          "429" : { }
        },
        "tags" : [ "Access" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/logout",
      "parameters" : [ ]
    },
    "/beneficiaries/{id}" : {
      "get" : {
        "summary" : "Get a beneficiary",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_beneficiaryGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Beneficiaries",
        "produces" : [ "application/json" ],
        "description" : "Retrieves a beneficiary identified by the id path parameter",
        "operationId" : "weavrfundstransfer_beneficiaryGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of a beneficiary.",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "Beneficiaries" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/beneficiaries/{id}",
      "parameters" : [ ]
    },
    "/users/{user_id}/invite/consume" : {
      "post" : {
        "summary" : "Consume a user invite",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_userInviteConsume",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Authorised Users",
        "produces" : [ "application/json" ],
        "description" : "Consumes an invitation perviously sent to the user via _userInviteSend_. This is needed so that the invited user sets up the password.\n\n_Note that on the Sandbox Environment, the `inviteCode` is always set to \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_userInviteConsume",
        "responses" : {
          "200" : { },
          "default" : { },
          "410" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "$ref" : "#/parameters/userIdExplode"
        }, {
          "schema" : {
            "$ref" : "#/definitions/UserInviteConsumeRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Authorised Users" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/users/{user_id}/invite/consume",
      "parameters" : [ ]
    },
    "/sends" : {
      "post" : {
        "summary" : "Create a send transaction",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_sendCreate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Sends",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "create",
        "description" : "Sends funds between managed accounts and managed cards belonging to *different* corporate or consumer identities.\n\nThe Send Profile (configured in the Multi Portal) specified determines the behaviour and restrictions of the transaction (for example, fees).\n",
        "operationId" : "weavrfundstransfer_sendCreate",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/SendCreateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Sends" ],
        "consumes" : [ "application/json" ]
      },
      "get" : {
        "summary" : "Get all send transactions",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_sendsGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Sends",
        "produces" : [ "application/json" ],
        "description" : "Retrieves all the send transactions performed by the logged-in identity.",
        "operationId" : "weavrfundstransfer_sendsGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/offset"
        }, {
          "$ref" : "#/parameters/limit"
        }, {
          "$ref" : "#/parameters/sendProfileId"
        }, {
          "$ref" : "#/parameters/instrumentId"
        }, {
          "$ref" : "#/parameters/sourceId"
        }, {
          "$ref" : "#/parameters/sourceType"
        }, {
          "$ref" : "#/parameters/sendState"
        }, {
          "$ref" : "#/parameters/sendCreatedFrom"
        }, {
          "$ref" : "#/parameters/sendCreatedTo"
        }, {
          "$ref" : "#/parameters/sendExecutedFrom"
        }, {
          "$ref" : "#/parameters/sendExecutedTo"
        }, {
          "$ref" : "#/parameters/sendTag"
        } ],
        "tags" : [ "Sends" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/sends",
      "parameters" : [ ]
    },
    "/beneficiaries/batch/{id}/challenges/otp/{channel}" : {
      "post" : {
        "summary" : "Issue a one-time password to verify a beneficiary batch",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_beneficiaryBatchSCAChallenge",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Beneficiaries",
        "produces" : [ "application/json" ],
        "description" : "Starts the verification process for updating the beneficiaries batch in which a one-time password is sent to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/otp/{channel}` endpoint.\n\nYou should only start this process if the beneficiary update `state` is `PENDING_CHALLENGE`.\n\n_Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_beneficiaryBatchSCAChallenge",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "503" : { },
          "405" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the Beneficiary Batch Operation.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/channel"
        } ],
        "tags" : [ "Beneficiaries" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/beneficiaries/batch/{id}/challenges/otp/{channel}",
      "parameters" : [ ]
    },
    "/outgoing_wire_transfers/bulk/cancel" : {
      "post" : {
        "summary" : "Cancel outgoing wire transfer transactions",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_outgoingWireTransferCancel",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Outgoing Wire Transfers",
        "produces" : [ "application/json" ],
        "description" : "Cancels outgoing wire transfers that are scheduled to be executed in the future.",
        "operationId" : "weavrfundstransfer_outgoingWireTransferCancel",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "schema" : {
            "$ref" : "#/definitions/TransactionBulkCancelRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Outgoing Wire Transfers" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/outgoing_wire_transfers/bulk/cancel",
      "parameters" : [ ]
    },
    "/beneficiaries/batch" : {
      "get" : {
        "summary" : "Get all beneficiary batches",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_beneficiaryBatchesGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Beneficiaries",
        "produces" : [ "application/json" ],
        "description" : "Retrieves all beneficiary batches matching the query parameters and that belong to the logged-in identity.",
        "operationId" : "weavrfundstransfer_beneficiaryBatchesGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/offset"
        }, {
          "$ref" : "#/parameters/limit"
        }, {
          "in" : "query",
          "name" : "state",
          "type" : "array",
          "required" : false
        }, {
          "in" : "query",
          "name" : "operation",
          "type" : "array",
          "required" : false
        }, {
          "in" : "query",
          "name" : "tag",
          "description" : "Filter by the beneficiary batch tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries.",
          "type" : "array",
          "required" : false
        } ],
        "tags" : [ "Beneficiaries" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/beneficiaries/batch",
      "parameters" : [ ]
    },
    "/managed_cards/{id}/remove" : {
      "post" : {
        "summary" : "Remove a managed card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardRemove",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Destroys the managed card identified by the `id` path parameter. Unlike block, this action is not reversible.\n\nA managed card must be empty before it can be destroyed using this operation.\n",
        "operationId" : "weavrfundstransfer_managedCardRemove",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of a managed card.",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards/{id}/remove",
      "parameters" : [ ]
    },
    "/bulks/sends" : {
      "post" : {
        "summary" : "Create a send transaction",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_bulksSendCreate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Operations",
        "produces" : [ "application/json" ],
        "description" : "Submit the details for the creation of a batch of Sends.\n\nThe bulkId returned in the response can subsequently be used to launch the creation of the bulk process through _bulkIdExecute_ process. A submitted bulk process can be managed (executed, accessed, paused, resumed and cancelled) by any other Authorised User of the same identity of the user that submits the details.\n\nThe status of the bulk process after execution of this operation is set to ‘SUBMITTED’. The execution of the bulk process is launched through the Execute bulk process operation.\n\nThe submission of data for a bulk process does not expire but it can be cancelled through _bulkIdCancel_.\n\nThe system is configured to accept bulk requests to process up to a maximum of 10,000 bulk operations.\n\nEach create Outgoing Wire Transfer operation in this bulk process is processed via _sendCreate_.\n",
        "operationId" : "weavrfundstransfer_bulksSendCreate",
        "responses" : {
          "201" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "operationCount" : {
                  "format" : "int32",
                  "type" : "integer"
                },
                "path" : {
                  "type" : "string"
                },
                "bulkId" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Success - returning bulk process"
          }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.WeavrfundstransferBulksSendCreateRequest",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "pathParams" : {
                  "type" : "object"
                },
                "requestBody" : {
                  "$ref" : "#/definitions/SendCreateRequest"
                }
              }
            }
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Operations" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/bulks/sends",
      "parameters" : [ ]
    },
    "/users/{user_id}/invite" : {
      "post" : {
        "summary" : "Send a user invite",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_userInviteSend",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Authorised Users",
        "produces" : [ "application/json" ],
        "description" : "Once a user is created using the _userCreate_ operation, the user needs to setup his/her password.\n\nAn invitation needs to be sent to the user in order to be able to set up the password for the first time. The invitation email, which remains valid for 1 month, will contain a URL having all information required to setup the password via the _userInviteConsume_.\n",
        "operationId" : "weavrfundstransfer_userInviteSend",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "$ref" : "#/parameters/userIdExplode"
        } ],
        "tags" : [ "Authorised Users" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/users/{user_id}/invite",
      "parameters" : [ ]
    },
    "/users/{user_id}/invite/validate" : {
      "post" : {
        "summary" : "Validate a user invite",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_userInviteValidate",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Authorised Users",
        "produces" : [ "application/json" ],
        "description" : "Check if a user's invite is still valid. This operation is useful to avoid having the user fill in a form only to be held by a validation issue (eg. expired invite).",
        "operationId" : "weavrfundstransfer_userInviteValidate",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/userIdExplode"
        }, {
          "schema" : {
            "$ref" : "#/definitions/UserInviteValidateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Authorised Users" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/users/{user_id}/invite/validate",
      "parameters" : [ ]
    },
    "/managed_cards/{id}/physical/contactless_limit/reset" : {
      "post" : {
        "summary" : "Reset contactless limit for a physical card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardPhysicalContactlessLimitReset",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "For security purposes, the cardholder needs to provide the PIN after a number of contactless purchases. Use this operation to reset the physical card's contactless limit.\nThe contactless limit can only be reset for physical cards having the wearable form factor.\n",
        "operationId" : "weavrfundstransfer_managedCardPhysicalContactlessLimitReset",
        "responses" : {
          "default" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards/{id}/physical/contactless_limit/reset",
      "parameters" : [ ]
    },
    "/bulks/{bulk_id}/cancel" : {
      "post" : {
        "summary" : "Cancel bulk process",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_bulkIdCancel",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Manage",
        "produces" : [ "application/json" ],
        "description" : "Cancels the execution of operations of a bulk process that is in state ‘PAUSED’ or ‘RUNNING’ as identified by the bulk_id parameter.\n\nThe status of the bulk process after execution of this operation is set  to ‘CANCELLED’. This is a final state and a cancelled bulk process cannot be resumed.\n",
        "operationId" : "weavrfundstransfer_bulkIdCancel",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/bulkId"
        } ],
        "tags" : [ "Manage" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/bulks/{bulk_id}/cancel",
      "parameters" : [ ]
    },
    "/stepup/challenges/otp/{channel}" : {
      "post" : {
        "summary" : "Issue a one-time password that can be used to step-up a token",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_stepupSCAChallenge",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Step-up",
        "produces" : [ "application/json" ],
        "description" : "Initiates the step-up token process by sending an SMS with an one-time-password to a device belonging to the logged-in user that was previously enrolled through `/authentication_factors/otp/{channel}` endpoint.\n\nThis process is required for endpoints that require a step-up token to complete the call.\n\n_Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_stepupSCAChallenge",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "503" : { },
          "405" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "$ref" : "#/parameters/channel"
        } ],
        "tags" : [ "Step-up" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/stepup/challenges/otp/{channel}",
      "parameters" : [ ]
    },
    "/passwords/validate" : {
      "post" : {
        "summary" : "Validate a password",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_passwordValidate",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Passwords",
        "produces" : [ "application/json" ],
        "description" : "Check that a password adheres to all complexity checks.",
        "operationId" : "weavrfundstransfer_passwordValidate",
        "responses" : {
          "default" : { },
          "410" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "schema" : {
            "$ref" : "#/definitions/PasswordValidateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Passwords" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/passwords/validate",
      "parameters" : [ ]
    },
    "/sends/{id}/challenges/otp/{channel}/verify" : {
      "post" : {
        "summary" : "Verify a send using a one-time password",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_sendSCAVerify",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Sends",
        "deprecated" : true,
        "produces" : [ "application/json" ],
        "description" : "Deprecated in favour of [Challenges endpoints](Challenges/#operation/multipleSCAVerify)\n\nCompletes the verification process for a Send.\n\nIf the outcome of the verification is successful, the send is executed.\n\nIf not verified challenge expires after 5 minutes and the number of incorrect OTP attempts is limited to reduce the risk of fraud.\n\n_Note that on the Sandbox Environment, text messages are not sent and the `verificationCode` is always \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_sendSCAVerify",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the send transaction.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/channel"
        }, {
          "schema" : {
            "$ref" : "#/definitions/SCAVerifyRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Sends" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/sends/{id}/challenges/otp/{channel}/verify",
      "parameters" : [ ]
    },
    "/users/{user_id}/deactivate" : {
      "post" : {
        "summary" : "Deactivate a user",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_userDeactivate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Authorised Users",
        "produces" : [ "application/json" ],
        "description" : "De-activate the user identified by the `user_id` path parameter.\n\nDeactivated users cannot log in or execute any operations with their credentials.\n\nThis operations is not final and a user can be re-activated using the userActivate operation. Note that another active user would need to log in so as to re-activate the de-activated user.\n",
        "operationId" : "weavrfundstransfer_userDeactivate",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/userId"
        } ],
        "tags" : [ "Authorised Users" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/users/{user_id}/deactivate",
      "parameters" : [ ]
    },
    "/identities" : {
      "get" : {
        "summary" : "Get user identities",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_userIdentities",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Access",
        "produces" : [ "application/json" ],
        "description" : "Retrieves a list of identities available to the holder of the token.",
        "operationId" : "weavrfundstransfer_userIdentities",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "409" : { }
        },
        "tags" : [ "Access" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/identities",
      "parameters" : [ ]
    },
    "/outgoing_wire_transfers/{id}/challenges/otp/{channel}" : {
      "post" : {
        "summary" : "Issue a one-time password that can be used to verify an outgoing wire transfer",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_outgoingWireTransferSCAChallenge",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Outgoing Wire Transfers",
        "deprecated" : true,
        "produces" : [ "application/json" ],
        "description" : "Deprecated in favour of [Challenges endpoints](Challenges/#operation/multipleSCAChallenge)\n\nStarts the verification process for an outgoing wire transfer in which a one-time password is sent to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/otp/{channel}` endpoint.\n\nYou should only start this process if the outgoing wire transfer `state` is `PENDING_CHALLENGE`.\n\n_Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_outgoingWireTransferSCAChallenge",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "503" : { },
          "405" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the Outgoing Wire Transfer transaction.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/channel"
        } ],
        "tags" : [ "Outgoing Wire Transfers" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/outgoing_wire_transfers/{id}/challenges/otp/{channel}",
      "parameters" : [ ]
    },
    "/corporates/fees/charge" : {
      "post" : {
        "summary" : "Charge fee to a corporate",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_corporateChargeFee",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Corporates",
        "produces" : [ "application/json" ],
        "description" : "Charge a fee to the corporate identified by the auth token, based on a pre-defined custom fee. Custom fees can be configured in the Multi Portal.\n\nThe fees collected will be deposited into your Revenue Account. The balance and transaction history of your revenue account can be viewed in the Multi Portal.\n",
        "operationId" : "weavrfundstransfer_corporateChargeFee",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/ChargeFeeRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Corporates" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/corporates/fees/charge",
      "parameters" : [ ]
    },
    "/corporates/verification/email/send" : {
      "post" : {
        "summary" : "Send an email verification code to the root user",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_corporateRootUserEmailVerificationCodeSend",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Corporates",
        "produces" : [ "application/json" ],
        "description" : "The first step in verifying a root user's email. The root user whose email address is to be verified is sent an email containing a randomly generated code.\n\nThis code must then be provided in the _corporateRootUserEmailVerify_ operation to verify the root user's email address.\n\n_Note that on the Sandbox Environment, the `verificationCode` is always set to \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_corporateRootUserEmailVerificationCodeSend",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/EmailRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Corporates" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/corporates/verification/email/send",
      "parameters" : [ ]
    },
    "/users/{user_id}" : {
      "patch" : {
        "summary" : "Update a user",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_userUpdate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Authorised Users",
        "produces" : [ "application/json" ],
        "description" : "Update the details of a user identified by the `user_id` in the the path parameter.\n\nOnly the fields that are specified in the request body will be updated. All other fields will remain unchanged.\n\nWhen patching a mobile number, the new mobile number should be enrolled for Additional Factors.\n",
        "operationId" : "weavrfundstransfer_userUpdate",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/userId"
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/UserPatchRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Authorised Users" ],
        "consumes" : [ "application/json" ]
      },
      "get" : {
        "summary" : "Get a user",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_userGetById",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Authorised Users",
        "produces" : [ "application/json" ],
        "description" : "Retrieves the user identified by the `user_id` path parameter.",
        "operationId" : "weavrfundstransfer_userGetById",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/userId"
        } ],
        "tags" : [ "Authorised Users" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/users/{user_id}",
      "parameters" : [ ]
    },
    "/login_with_password" : {
      "post" : {
        "summary" : "Login with password",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_loginWithPassword",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Access",
        "produces" : [ "application/json" ],
        "description" : "Authenticate a user with the `email` and `password` that they provided when registering.\n\nGiven that the user credentials are correct, this returns a `token` that can then be used to authorise\nother secured operations. In case the password is expired, a temporary `token` is returned, which can be used\nsolely for updating the password.\n\nThe token returned is valid for 5 minutes from last activity.\n",
        "operationId" : "weavrfundstransfer_loginWithPassword",
        "responses" : {
          "200" : { },
          "default" : { },
          "410" : { },
          "400" : { },
          "401" : { },
          "423" : { },
          "500" : { },
          "403" : {
            "description" : "The authentication credentials are not found or are incorrect."
          },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "schema" : {
            "$ref" : "#/definitions/LoginWithPasswordRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Access" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/login_with_password",
      "parameters" : [ ]
    },
    "/sends/{id}" : {
      "get" : {
        "summary" : "Get a send transaction",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_sendGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Sends",
        "produces" : [ "application/json" ],
        "description" : "Retrieve the send transaction identified by the `id` path parameter.",
        "operationId" : "weavrfundstransfer_sendGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the Send transaction.",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "Sends" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/sends/{id}",
      "parameters" : [ ]
    },
    "/managed_cards/{id}/physical/replace_damaged" : {
      "post" : {
        "summary" : "Replace a damaged physical card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardPhysicalReplaceDamaged",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Report as damaged, and replace the physical card identified by the `id` path parameter.",
        "operationId" : "weavrfundstransfer_managedCardPhysicalReplaceDamaged",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/ManagedCardPhysicalReplaceDamagedRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards/{id}/physical/replace_damaged",
      "parameters" : [ ]
    },
    "/users/{user_id}/activate" : {
      "post" : {
        "summary" : "Activate a user",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_userActivate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Authorised Users",
        "produces" : [ "application/json" ],
        "description" : "Activate the user identified by the `user_id` path parameter.\n\nBy default, any new users created will be automatically activated. This operation needs to be used only if the user was previously de-activated using the _userDeactivate_ operation, or if the user was de-activated automatically after multiple incorrect login attempts.\n",
        "operationId" : "weavrfundstransfer_userActivate",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/userId"
        } ],
        "tags" : [ "Authorised Users" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/users/{user_id}/activate",
      "parameters" : [ ]
    },
    "/beneficiaries/batch/{id}/challenges/push/{channel}" : {
      "post" : {
        "summary" : "Issue a push notification that can be used to verify a beneficiary batch",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_beneficiaryBatchSCAChallengePush",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Beneficiaries",
        "produces" : [ "application/json" ],
        "description" : "Starts the verification process for updating a beneficiary batch in which a push notification is sent to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/push/{channel}` endpoint.\n\nYou should only start this process if the beneficiary update operation `state` is `PENDING_CHALLENGE`.\n",
        "operationId" : "weavrfundstransfer_beneficiaryBatchSCAChallengePush",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "503" : { },
          "405" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the Beneficiary Batch Operation.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/scaPushChannel"
        } ],
        "tags" : [ "Beneficiaries" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/beneficiaries/batch/{id}/challenges/push/{channel}",
      "parameters" : [ ]
    },
    "/managed_cards/{id}/physical/replace_lost_stolen" : {
      "post" : {
        "summary" : "Replace a lost or stolen physical card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardPhysicalReplaceLostOrStolen",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Issue a replacement for the physical card, identified by the `id` path parameter, that has already been reported as lost or stolen.\n\nAny funds (that are not blocked pending a purchase for a previous authorisation) remaining on the card will be automatically transferred to the new replacement card.\n",
        "operationId" : "weavrfundstransfer_managedCardPhysicalReplaceLostOrStolen",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/ManagedCardPhysicalReplaceLostOrStolenRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards/{id}/physical/replace_lost_stolen",
      "parameters" : [ ]
    },
    "/passwords/lost_password/resume" : {
      "post" : {
        "summary" : "Resume lost password process",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_lostPasswordResume",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Passwords",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "create",
        "description" : "This is the second and final step in updating the password of a user who forgot their password.",
        "operationId" : "weavrfundstransfer_lostPasswordResume",
        "responses" : {
          "200" : { },
          "default" : { },
          "410" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "schema" : {
            "$ref" : "#/definitions/LostPasswordResumeRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Passwords" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/passwords/lost_password/resume",
      "parameters" : [ ]
    },
    "/transfers/bulk/cancel" : {
      "post" : {
        "summary" : "Cancel transfer transactions",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_transferCancel",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Transfers",
        "produces" : [ "application/json" ],
        "description" : "Cancels transfers that are scheduled to be executed in the future.",
        "operationId" : "weavrfundstransfer_transferCancel",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "schema" : {
            "$ref" : "#/definitions/TransactionBulkCancelRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Transfers" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/transfers/bulk/cancel",
      "parameters" : [ ]
    },
    "/beneficiaries" : {
      "post" : {
        "summary" : "Add beneficiaries",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_beneficiaryBatchCreate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Beneficiaries",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "create",
        "description" : "Create one or more beneficiaries for the logged-in corporate or consumer identity.",
        "operationId" : "weavrfundstransfer_beneficiaryBatchCreate",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/BeneficiaryBatchCreateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Beneficiaries" ],
        "consumes" : [ "application/json" ]
      },
      "get" : {
        "summary" : "Get all beneficiaries",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_beneficiariesGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Beneficiaries",
        "produces" : [ "application/json" ],
        "description" : "Retrieves the beneficiaries that match the query parameters.",
        "operationId" : "weavrfundstransfer_beneficiariesGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/offset"
        }, {
          "$ref" : "#/parameters/limit"
        }, {
          "in" : "query",
          "name" : "batchId",
          "description" : "Search by the beneficiary batch id.",
          "type" : "array",
          "required" : false
        }, {
          "in" : "query",
          "name" : "group",
          "description" : "Search by the beneficiary group.",
          "type" : "array",
          "required" : false
        } ],
        "tags" : [ "Beneficiaries" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/beneficiaries",
      "parameters" : [ ]
    },
    "/users" : {
      "post" : {
        "summary" : "Create a user",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_userCreate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Authorised Users",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "create",
        "description" : "Creates a user linked to the logged-in corporate or consumer identity.\n\nOnce on-boarded, users have access to all instruments (cards and accounts) of the identity.\n\nApplication-specific permissions to limit what each user can view and do need to be implemented in your application.\n\nIn order to Create an Authorised User you would need a stepped-up token. After calling `/multi/users` you need to step-up ( issue a challenge `multi/stepup/challenges/otp/{channel}` )\n\nMore details on how to step-up a token can be found here [Step-Up](/tag/Step-up#operation/stepupSCAChallenge ) \n",
        "operationId" : "weavrfundstransfer_userCreate",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/UserCreateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Authorised Users" ],
        "consumes" : [ "application/json" ]
      },
      "get" : {
        "summary" : "Get all users",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_usersGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Authorised Users",
        "produces" : [ "application/json" ],
        "description" : "Fetches all authorised users associated with the corporate or consumer identity the logged-in user belongs to.",
        "operationId" : "weavrfundstransfer_usersGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/offset"
        }, {
          "$ref" : "#/parameters/limit"
        }, {
          "$ref" : "#/parameters/active"
        }, {
          "$ref" : "#/parameters/email"
        }, {
          "$ref" : "#/parameters/tag"
        } ],
        "tags" : [ "Authorised Users" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/users",
      "parameters" : [ ]
    },
    "/managed_cards/{id}/spend_rules" : {
      "patch" : {
        "summary" : "Update spend rules for a managed card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardSpendRulesUpdate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Must be user after a POST, to update individual spend rules associated with the managed card identified by the `id` path parameter.",
        "operationId" : "weavrfundstransfer_managedCardSpendRulesUpdate",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/UpdateCardLevelSpendRulesRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "post" : {
        "summary" : "Create spend rules for a managed card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardSpendRulesCreate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Create the spend rules associated with the managed card identified by the `id` path parameter.",
        "operationId" : "weavrfundstransfer_managedCardSpendRulesCreate",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/CardLevelSpendRulesRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "get" : {
        "summary" : "Get all spend rules for a managed card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardSpendRulesGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Fetch the list of spend rules associated with the managed card identified by the `id` path parameter.",
        "operationId" : "weavrfundstransfer_managedCardSpendRulesGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards/{id}/spend_rules",
      "delete" : {
        "summary" : "Delete all spend rules for a managed card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardSpendRulesDelete",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "delete",
        "description" : "Remove all spend rules associated with the managed card identified by the `id` path parameter.",
        "operationId" : "weavrfundstransfer_managedCardSpendRulesDelete",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "parameters" : [ ]
    },
    "/authentication_factors/push/{channel}" : {
      "post" : {
        "summary" : "Enrol a user device for authentication using push notifications",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_enrolDeviceUsingPush",
        "security" : [ {
          "api_key" : [ ]
        }, {
          "auth_token" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Additional Factors",
        "produces" : [ "application/json" ],
        "description" : "This is the first step in enrolling the logged-in user's mobile device, where a push notification is sent to the device.\n",
        "operationId" : "weavrfundstransfer_enrolDeviceUsingPush",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "$ref" : "#/parameters/authFactorsPushChannel"
        } ],
        "tags" : [ "Additional Factors" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/authentication_factors/push/{channel}",
      "delete" : {
        "summary" : "Unlink a user device for authentication using push notifications",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_unlinkDeviceUsingPush",
        "security" : [ {
          "api_key" : [ ]
        }, {
          "auth_token" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Additional Factors",
        "produces" : [ "application/json" ],
        "description" : "Unlink a user device for authentication using push notifications",
        "operationId" : "weavrfundstransfer_unlinkDeviceUsingPush",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/scaPushChannel"
        } ],
        "tags" : [ "Additional Factors" ],
        "consumes" : [ "application/json" ]
      },
      "parameters" : [ ]
    },
    "/outgoing_wire_transfers/{id}/challenges/otp/{channel}/verify" : {
      "post" : {
        "summary" : "Verify an outgoing wire transfer using a one-time password",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_outgoingWireTransferSCAVerify",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Outgoing Wire Transfers",
        "deprecated" : true,
        "produces" : [ "application/json" ],
        "description" : "Deprecated in favour of [Challenges endpoints](Challenges/#operation/multipleSCAVerify)\n\nCompletes the verification process for an outgoing wire transfer.\n\nIf the outcome of the verification is successful, the outgoing wire transfer transaction is executed.\n\nIf not verified challenge expires after 5 minutes and the number of incorrect OTP attempts is limited to reduce the risk of fraud.\n\n_Note that on the Sandbox Environment, text messages are not sent and the `verificationCode` is always \\\"123456\\\"._\n",
        "operationId" : "weavrfundstransfer_outgoingWireTransferSCAVerify",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the Outgoing Wire Transfer transaction.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/channel"
        }, {
          "schema" : {
            "$ref" : "#/definitions/SCAVerifyRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Outgoing Wire Transfers" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/outgoing_wire_transfers/{id}/challenges/otp/{channel}/verify",
      "parameters" : [ ]
    },
    "/beneficiaries/remove" : {
      "post" : {
        "summary" : "Remove beneficiaries",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_beneficiaryBatchRemove",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Beneficiaries",
        "produces" : [ "application/json" ],
        "description" : "Removes one or more beneficiaries from the beneficiaries list identified by the id path parameter used in the array.",
        "operationId" : "weavrfundstransfer_beneficiaryBatchRemove",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/BeneficiaryBatchRemoveRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Beneficiaries" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/beneficiaries/remove",
      "parameters" : [ ]
    },
    "/sends/bulk/create" : {
      "post" : {
        "summary" : "Create a bulk of send transactions",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_sendCreateBulk",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Sends",
        "deprecated" : true,
        "produces" : [ "application/json" ],
        "description" : "Deprecated in favour of the [Bulk operation](Operations/#operation/bulksSendCreate).\n\nSends funds between multiple managed accounts and managed cards belonging to *different* corporate or consumer identities.\n\nThe Send Profile (configured in the Multi Portal) specified determines the behaviour and restrictions of the transaction (for example, fees).\n",
        "operationId" : "weavrfundstransfer_sendCreateBulk",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/SendBulkCreateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Sends" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/sends/bulk/create",
      "parameters" : [ ]
    },
    "/managed_accounts/{id}" : {
      "patch" : {
        "summary" : "Update a managed account",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedAccountUpdate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Accounts",
        "produces" : [ "application/json" ],
        "description" : "Update the details for the managed account identified by the `id` in the path.",
        "operationId" : "weavrfundstransfer_managedAccountUpdate",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the managed account.",
          "type" : "string",
          "required" : true
        }, {
          "schema" : {
            "$ref" : "#/definitions/ManagedAccountUpdateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Managed Accounts" ],
        "consumes" : [ "application/json" ]
      },
      "get" : {
        "summary" : "Get a managed account",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedAccountGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Accounts",
        "produces" : [ "application/json" ],
        "description" : "Fetch the managed account identified by the `id` in path.",
        "operationId" : "weavrfundstransfer_managedAccountGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of the Managed Account.",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "Managed Accounts" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_accounts/{id}",
      "parameters" : [ ]
    },
    "/managed_cards/{id}/physical/report_stolen" : {
      "post" : {
        "summary" : "Report a physical card as stolen",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardPhysicalReportStolen",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Report the physical card identified by the `id` path parameter as stolen. This will destroy the instrument and a new replacement card will need to be requested.\n\nOnce a replacement is requested, any funds remaining on this destroyed card will be transferred to the replacement card.\"\n",
        "operationId" : "weavrfundstransfer_managedCardPhysicalReportStolen",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards/{id}/physical/report_stolen",
      "parameters" : [ ]
    },
    "/corporates" : {
      "patch" : {
        "summary" : "Update a corporate",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_corporateUpdate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Corporates",
        "produces" : [ "application/json" ],
        "description" : "Update the details of the logged-in corporate identity.\n\nThe following Corporate details are verified during due diligence (KYB) and cannot be updated via the API once the Corporate has been verified:\n  - Root User Name\n  - Root User Surname\n  - Root User Email\n  - Root User Mobile Country Code\n  - Root User Mobile Number\n  - Business Address\n  - Date of birth\n\n*If these details need to be changed after due diligence is completed, please contact Customer Support to restart the Due Diligence process.*\n",
        "operationId" : "weavrfundstransfer_corporateUpdate",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/CorporateUpdateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Corporates" ],
        "consumes" : [ "application/json" ]
      },
      "post" : {
        "summary" : "Create a corporate",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_corporateCreate",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Corporates",
        "produces" : [ "application/json" ],
        "x-WM-OPERATION_TYPE" : "create",
        "description" : "Create a corporate identity for a business customer.  The information provided must be accurate and will be passed on for KYB verification with our partner.",
        "operationId" : "weavrfundstransfer_corporateCreate",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/CorporateCreateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Corporates" ],
        "consumes" : [ "application/json" ]
      },
      "get" : {
        "summary" : "Get a corporate",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_corporateGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Corporates",
        "produces" : [ "application/json" ],
        "description" : "Retrieve the details of the logged-in corporate.",
        "operationId" : "weavrfundstransfer_corporateGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "503" : { },
          "429" : { }
        },
        "tags" : [ "Corporates" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/corporates",
      "parameters" : [ ]
    },
    "/passwords/lost_password/start" : {
      "post" : {
        "summary" : "Initiate lost password process",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_lostPasswordInitiate",
        "security" : [ {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Passwords",
        "produces" : [ "application/json" ],
        "description" : "Initiate the lost password process.\n\nIf the email address provided is associated with an active user, an email will be sent, containing a URL that redirects the user to change their password.\nThe URL contains request parameters for all of the parameters required to change the password for the user via the `/passwords/lost_password/resume` POST endpoint.\n",
        "operationId" : "weavrfundstransfer_lostPasswordInitiate",
        "responses" : {
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "204" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "schema" : {
            "$ref" : "#/definitions/EmailRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Passwords" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/passwords/lost_password/start",
      "parameters" : [ ]
    },
    "/managed_cards/{id}" : {
      "patch" : {
        "summary" : "Update a managed card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardUpdate",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Update the details of the managed card identified by the `id` path parameter.",
        "operationId" : "weavrfundstransfer_managedCardUpdate",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { },
          "409" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of a card.",
          "type" : "string",
          "required" : true
        }, {
          "$ref" : "#/parameters/idempotency-ref"
        }, {
          "schema" : {
            "$ref" : "#/definitions/ManagedCardUpdateRequest"
          },
          "in" : "body",
          "name" : "body",
          "required" : false
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "get" : {
        "summary" : "Get a managed card",
        "x-WM-METHOD_NAME" : "weavrfundstransfer_managedCardGet",
        "security" : [ {
          "auth_token" : [ ]
        }, {
          "api_key" : [ ]
        } ],
        "x-WM-CRUD_OPERATION_ID" : "weavrfundstransfer.Managed Cards",
        "produces" : [ "application/json" ],
        "description" : "Returns all details of the managed card identified by the `id` path parameter.",
        "operationId" : "weavrfundstransfer_managedCardGet",
        "responses" : {
          "200" : { },
          "default" : { },
          "400" : { },
          "401" : { },
          "500" : { },
          "403" : { },
          "404" : { },
          "503" : { },
          "429" : { }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique identifier of a card.",
          "type" : "string",
          "required" : true
        } ],
        "tags" : [ "Managed Cards" ],
        "consumes" : [ "application/json" ]
      },
      "x-WM-COMPLETE_PATH" : "${rest.weavrfundstransfer.scheme}://${rest.weavrfundstransfer.host}${rest.weavrfundstransfer.basepath}/managed_cards/{id}",
      "parameters" : [ ]
    }
  },
  "host" : "${rest.weavrfundstransfer.host}",
  "responses" : {
    "StepUpSCAChallengePushConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "CHALLENGE_LIMIT_EXCEEDED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "MultipleSCAChallengeConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "description" : "Error codes:\n  * `STATE_INVALID` - The operation no longer requires additional verification, it was either cancelled or completed.\n  * `CHANNEL_NOT_SUPPORTED` - The channel selected cannot be used to verify this type of operation.\n  * `CHANNEL_NOT_REGISTERED` - The channel selected must be enrolled to receive one-time passwords before it can be used to verify this type of operation.\n",
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "UserCreateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "EMAIL_NOT_UNIQUE", "MOBILE_OR_COUNTRY_CODE_INVALID", "EMAIL_DOMAIN_NOT_ALLOWED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedCardStatementResponse" : {
      "schema" : {
        "$ref" : "#/definitions/Statement"
      },
      "description" : "Success"
    },
    "ChargeFeeResponse" : {
      "schema" : {
        "$ref" : "#/definitions/ChargeFee"
      },
      "description" : "Success"
    },
    "NotFoundToken" : {
      "schema" : {
        "$ref" : "#/definitions/TokenError"
      },
      "description" : "Not found - The requested token couldn't be found."
    },
    "UsersGetResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "format" : "int32",
            "description" : "The total number of records (excluding the paging limit).",
            "type" : "integer"
          },
          "responseCount" : {
            "format" : "int32",
            "description" : "The total number of records returned in this response (always capped at 100).",
            "type" : "integer"
          },
          "users" : {
            "description" : "The list of users matching the criteria specified.",
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/User"
            }
          }
        }
      },
      "description" : "Success"
    },
    "BeneficiaryResponse" : {
      "schema" : {
        "$ref" : "#/definitions/Beneficiary"
      },
      "description" : "Success"
    },
    "TransactionBulkCancelResponse" : {
      "schema" : {
        "$ref" : "#/definitions/TransactionBulkCancelResponse"
      },
      "description" : "Success"
    },
    "ManagedCardUpdateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_DESTROYED", "INSTRUMENT_NOT_PHYSICAL", "COUNTRY_INVALID", "WALLETS_NOT_ENABLED", "WALLET_ARTWORK_NOT_SPECIFIED", "WALLET_ARTWORK_INVALID", "PUSHPROVISIONING_NOT_ENABLED", "AUTH_FORWARDING_NOT_ENABLED", "THREEDS_DETAILS_NOT_PROVIDED", "USER_NOT_ENROLLED_FOR_BIOMETRICS", "BIOMETRIC_AUTHENTICATION_NOT_SUPPORTED", "LINKED_USER_NOT_FOUND", "USER_INACTIVE", "INVALID_CHANNELS_SELECTED", "INVALID_PRIMARY_CHANNEL_SELECTED", "USER_MOBILE_NUMBER_DOES_NOT_EXIST", "MORE_THAN_ONE_MOBILE_NUMBER_PROVIDED", "MOBILE_NUMBER_ALREADY_EXISTS", "TWILIO_AUTHY_AUTHENTICATION_NOT_SUPPORTED", "USER_NOT_ENROLLED_FOR_TWILIO_AUTHY", "DELIVERY_METHOD_INVALID", "CONTACT_NUMBER_NEEDED_FOR_BULK_DELIVERY", "PRODUCT_REFERENCE_INVALID", "CARRIER_TYPE_INVALID", "CONFIG_ERROR_CARD_BUREAU", "RENEWAL_TYPE_NOT_SUPPORTED_BY_PROFILE" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "TokenExpired" : {
      "schema" : {
        "$ref" : "#/definitions/TokenError"
      },
      "description" : "Gone - The requested token is expired."
    },
    "ConsumerKycStartSumsubMobileConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "KYC_ALREADY_APPROVED", "KYC_PENDING_REVIEW", "KYC_ALREADY_REJECTED", "SOURCE_OF_FUNDS_MISSING", "EMAIL_UNVERIFIED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ConsumerKycStartSumsubMobileResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "verificationFlow" : {
            "description" : "Name of verification flow, to be provided to Sumsub Mobile SDK.",
            "type" : "string"
          },
          "kycLevel" : {
            "$ref" : "#/definitions/KycLevel"
          },
          "identityType" : {
            "description" : "Type of identity, to be provided to Sumsub Mobile SDK.",
            "type" : "string"
          },
          "externalUserId" : {
            "description" : "The application user identifier.",
            "type" : "string"
          },
          "kycProviderKey" : {
            "description" : "Sumsub key.",
            "type" : "string"
          },
          "accessToken" : {
            "pattern" : "^[0-9]+$",
            "description" : "The access token, to be provided to Sumsub Mobile SDK.",
            "type" : "string"
          }
        }
      },
      "description" : "Success"
    },
    "ManagedCardPageResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "cards" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ManagedCard"
            }
          },
          "count" : {
            "format" : "int32",
            "description" : "The total number of records (excluding the paging limit).",
            "type" : "integer"
          },
          "responseCount" : {
            "format" : "int32",
            "description" : "The total number of records returned in this response (always capped at 100).",
            "type" : "integer"
          }
        }
      },
      "description" : "Success"
    },
    "ManagedCardPhysicalReportStolenConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "PHYSICAL_CARD_NOT_ACTIVATED", "INSTRUMENT_ALREADY_MARKED_STOLEN", "INSTRUMENT_ALREADY_MARKED_LOST", "INSTRUMENT_DESTROYED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "OutgoingWireTransferSCAChallengePushConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "CHALLENGE_LIMIT_EXCEEDED", "SCA_EXEMPTION_APPLIED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "TransfersGetResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "transfer" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Transfer"
            }
          },
          "count" : {
            "format" : "int32",
            "description" : "Total number of records (excluding the paging limit).",
            "type" : "integer"
          },
          "responseCount" : {
            "format" : "int32",
            "description" : "Total number of records returned in this response.",
            "type" : "integer"
          }
        }
      },
      "description" : "Success"
    },
    "OutgoingWireTransferBulkCreateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "description" : "Error codes:\n  * `TRANSACTION_LIMIT_EXCEEDED` - The number of transactions exceeds the limit of 1000.\n",
            "type" : "string",
            "enum" : [ "TRANSACTION_LIMIT_EXCEEDED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "UnlinkDeviceUsingPushConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "CHANNEL_NOT_REGISTERED", "CREDENTIALS_INACTIVE" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedAccountUnblockConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_INACTIVE", "INSTRUMENT_NOT_BLOCKED", "INSTRUMENT_DESTROYED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "BulkProcessOperations" : {
      "schema" : {
        "$ref" : "#/definitions/BulkProcessOperationsPaged"
      },
      "description" : "Success"
    },
    "ManagedCardPhysicalReplaceLostOrStolenConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "INSTRUMENT_NOT_MARKED_LOST_OR_STOLEN", "INSTRUMENT_DESTROYED", "INSTRUMENT_ALREADY_REPLACED", "PARENT_MANAGED_ACCOUNT_NOT_ACTIVE", "MAX_PRINT_CHARACTERS_EXCEEDED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedAccountsGetResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "format" : "int32",
            "description" : "The total number of records (excluding the paging limit).",
            "type" : "integer"
          },
          "responseCount" : {
            "format" : "int32",
            "description" : "The total number of records returned in this response (always capped at 100).",
            "type" : "integer"
          },
          "accounts" : {
            "description" : "The filtered managed accounts list.",
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ManagedAccount"
            }
          }
        }
      },
      "description" : "Success"
    },
    "BeneficiaryPageResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "format" : "int32",
            "description" : "The total number of records (excluding the paging limit).",
            "type" : "integer"
          },
          "responseCount" : {
            "format" : "int32",
            "description" : "The total number of records returned in this response (always capped at 100).",
            "type" : "integer"
          },
          "beneficiaries" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Beneficiary"
            }
          }
        }
      },
      "description" : "Success"
    },
    "ManagedCardGetResponse" : {
      "schema" : {
        "$ref" : "#/definitions/ManagedCard"
      },
      "description" : "Success"
    },
    "AuthFactorsGetResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "factors" : {
            "description" : "The list of challenge types the logged-in user is enrolled on.",
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SCAFactor"
            }
          }
        }
      },
      "description" : "Success"
    },
    "CorporateUpdateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "FEE_GROUP_INVALID", "COUNTRY_INVALID", "EMAIL_NOT_UNIQUE", "ROOT_USER_ALREADY_VERIFIED", "COUNTRY_UNSUPPORTED", "MOBILE_OR_COUNTRY_CODE_INVALID", "MOBILE_NO_CHANGE_LIMIT_EXCEEDED", "TOO_FREQUENT_EMAIL_CHANGES", "EMAIL_DOMAIN_NOT_ALLOWED", "MOBILE_CHANGE_NOT_ALLOWED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ChargeFeeConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "UNRESOLVED_FEE_TYPE", "UNRESOLVED_CURRENCY", "UNRESOLVED_INSTRUMENT", "FUNDS_INSUFFICIENT", "IDENTITY_NOT_OWNER_OF_INSTRUMENT" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedCardSpendRulesCreateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "SPEND_LIMIT_CURRENCY_DIFFERENT_FROM_CARD_CURRENCY", "SPEND_LIMIT_NOT_SUPPORTED_FOR_PREPAID_MODE_CARD", "SPEND_LIMIT_DUPLICATE_INTERVAL", "SPEND_LIMIT_AMOUNT_INVALID", "SPEND_RULE_ALREADY_SET" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "NoContent" : {
      "description" : "Success - No Content."
    },
    "StepUpSCAChallengePushResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "pattern" : "^[0-9]+$",
            "description" : "The challenge id.",
            "type" : "string"
          }
        }
      },
      "description" : "Success"
    },
    "MultipleSCAVerifyConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "VERIFICATION_CODE_EXPIRED", "VERIFICATION_CODE_INVALID", "CHALLENGE_LIMIT_EXCEEDED", "ONE_CHALLENGE_LIMIT_REMAINING" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "UserIdentitiesConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "IDENTITY_TYPE_NOT_SUPPORTED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedAccountBlockConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_INACTIVE", "INSTRUMENT_ALREADY_BLOCKED", "INSTRUMENT_DESTROYED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ConsumerKycGetResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "kycLevel" : {
            "$ref" : "#/definitions/KycLevel"
          },
          "ongoingKycLevel" : {
            "$ref" : "#/definitions/KycLevel"
          },
          "fullDueDiligence" : {
            "$ref" : "#/definitions/KyiStatus"
          },
          "ongoingFullDueDiligence" : {
            "$ref" : "#/definitions/KyiStatus"
          }
        }
      },
      "description" : "Success"
    },
    "ConsumerUpdateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "FEE_GROUP_INVALID", "COUNTRY_INVALID", "CONSUMER_VERIFIED", "EMAIL_NOT_UNIQUE", "MOBILE_OR_COUNTRY_CODE_INVALID", "COUNTRY_UNSUPPORTED", "MOBILE_NO_CHANGE_LIMIT_EXCEEDED", "TOO_FREQUENT_EMAIL_CHANGES", "EMAIL_DOMAIN_NOT_ALLOWED", "MOBILE_CHANGE_NOT_ALLOWED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "SendSCAChallengeConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "SCA_EXEMPTION_APPLIED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "OutgoingWireTransferBulkCreateResponse" : {
      "schema" : {
        "$ref" : "#/definitions/OutgoingWireTransferBulkCreateResponse"
      },
      "description" : "Success"
    },
    "InternalServerError" : {
      "description" : "Internal Server Error - There is a problem with the server. Please try again later."
    },
    "LoginWithIamResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string"
          }
        }
      },
      "description" : "Success"
    },
    "ManagedCardPhysicalPinUnBlockConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "PHYSICAL_CARD_NOT_ACTIVATED", "INSTRUMENT_BLOCKED", "INSTRUMENT_DESTROYED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "EnrolDeviceUsingOtpStepOneConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "CHANNEL_NOT_SUPPORTED", "CHANNEL_ALREADY_REGISTERED", "MOBILE_NUMBER_NOT_AVAILABLE", "MOBILE_NUMBER_INVALID", "MOBILE_COUNTRY_NOT_SUPPORTED", "CREDENTIALS_INACTIVE", "TYPE_DOES_NOT_SUPPORT_ENROLMENT" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "BeneficiaryBatchResponse" : {
      "schema" : {
        "$ref" : "#/definitions/BeneficiaryBatch"
      },
      "description" : "Success"
    },
    "UserIdentitiesGetResponse" : {
      "schema" : {
        "description" : "The list of identities available to user.",
        "type" : "array",
        "items" : {
          "$ref" : "#/definitions/UserIdentity"
        }
      },
      "description" : "Success"
    },
    "UserInviteSendConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INVITE_ALREADY_CONSUMED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedAccountStatementResponse" : {
      "schema" : {
        "$ref" : "#/definitions/Statement"
      },
      "description" : "Success"
    },
    "BeneficiaryBatchSCAChallengePushConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "CHALLENGE_LIMIT_EXCEEDED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "OutgoingWireTransferSCAVerifyConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "VERIFICATION_CODE_EXPIRED", "VERIFICATION_CODE_INVALID", "SCA_EXEMPTION_APPLIED", "CHALLENGE_LIMIT_EXCEEDED", "ONE_CHALLENGE_LIMIT_REMAINING" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "SendsGetPageResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "format" : "int32",
            "description" : "Total number of records (excluding the paging limit).",
            "type" : "integer"
          },
          "responseCount" : {
            "format" : "int32",
            "description" : "Total number of records returned in this response.",
            "type" : "integer"
          },
          "send" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Send"
            }
          }
        }
      },
      "description" : "Success"
    },
    "OutgoingWireTransfersGetPageResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "transfer" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/OutgoingWireTransfer"
            }
          },
          "count" : {
            "format" : "int32",
            "description" : "Total number of records (excluding the paging limit)",
            "type" : "integer"
          },
          "responseCount" : {
            "format" : "int32",
            "description" : "Total number of records returned in this response (always capped at 100).",
            "type" : "integer"
          }
        }
      },
      "description" : "Success"
    },
    "LogoutResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "description" : "The logout url for third party auth providers.",
            "type" : "string"
          }
        }
      },
      "description" : "Success"
    },
    "ManagedCardSpendRulesUpdateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "SPEND_LIMIT_CURRENCY_DIFFERENT_FROM_CARD_CURRENCY", "SPEND_LIMIT_NOT_SUPPORTED_FOR_PREPAID_MODE_CARD", "SPEND_LIMIT_DUPLICATE_INTERVAL", "SPEND_LIMIT_AMOUNT_INVALID" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "LoginWithPasswordConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "token" : {
            "description" : "Temporary authorisation token required to initiate the _passwordUpdate_ operation.",
            "type" : "string"
          }
        }
      },
      "description" : "The user's password has expired. Use the returned temporary token to update their password via the  '_/passwords/update_' endpoint."
    },
    "EnrolDeviceUsingPushConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_READY", "CHANNEL_ALREADY_REGISTERED", "MOBILE_NUMBER_NOT_AVAILABLE", "CHALLENGE_LIMIT_EXCEEDED", "PASSCODE_NOT_SET", "ENROLMENT_LIMIT_EXCEEDED", "MOBILE_COUNTRY_NOT_SUPPORTED", "TYPE_DOES_NOT_SUPPORT_ENROLMENT" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "PasswordValidateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "UNRESOLVED_IDENTITY", "PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE", "PASSWORD_TOO_SHORT", "PASSWORD_TOO_LONG", "PASSWORD_TOO_SIMPLE" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedCardRemoveConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "BALANCE_NOT_ZERO", "INSTRUMENT_ALREADY_REMOVED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedCardPhysicalActivateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "INSTRUMENT_ALREADY_ACTIVATED", "ACTIVATION_CODE_INVALID", "INSTRUMENT_BLOCKED", "INSTRUMENT_DESTROYED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedCardPhysicalReportLostConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "INSTRUMENT_ALREADY_MARKED_LOST", "INSTRUMENT_ALREADY_MARKED_STOLEN", "INSTRUMENT_DESTROYED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "OutgoingWireTransferSCAChallengeConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "description" : "Error codes:\n  * `STATE_INVALID` - The transaction no longer requires additional verification, it was either cancelled or completed.\n  * `CHANNEL_NOT_SUPPORTED` - The channel selected cannot be used to verify this type of transaction.\n  * `CHANNEL_NOT_REGISTERED` - The channel selected must be enrolled to receive one-time passwords before it can be used to verify this type of transaction.\n  * `SCA_EXEMPTION_APPLIED` - The transaction no longer requires additional verification, it was proceeded via PSD2 Regulation low value SCA exemption, it is either cancelled or completed.\n",
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "SCA_EXEMPTION_APPLIED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "BeneficiaryBatchSCAChallengeConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "description" : "Error codes:\n  * `STATE_INVALID` - The operation no longer requires additional verification, it was either cancelled or completed.\n  * `CHANNEL_NOT_SUPPORTED` - The channel selected cannot be used to verify this type of operation.\n  * `CHANNEL_NOT_REGISTERED` - The channel selected must be enrolled to receive one-time passwords before it can be used to verify this type of operation.\n",
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedAccountRemoveConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "BALANCE_NOT_ZERO", "INSTRUMENT_ALREADY_REMOVED", "INSTRUMENT_HAS_PENDING_ACTIONS", "INSTRUMENT_HAS_LINKED_CARDS" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "TransferConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "PROFILE_INACTIVE", "MODEL_CONSTRAINTS_VIOLATED", "INTERCEPTOR_DENIED_TRANSACTION", "INSTRUMENT_DENIED_TRANSACTION", "SOURCE_INSTRUMENT_DESTROYED", "DESTINATION_INSTRUMENT_DESTROYED", "FOREX_TRADE_DENIED_TRANSACTION", "CURRENCY_MISMATCH", "SOURCE_INSTRUMENT_BLOCKED", "DESTINATION_INSTRUMENT_BLOCKED", "FUNDS_INSUFFICIENT", "AMOUNT_INVALID", "SOURCE_NOT_FOUND", "DESTINATION_NOT_FOUND", "FEE_NOT_CONFIGURED_FOR_CURRENCY", "DESTINATION_LIMIT_EXCEEDED", "SOURCE_CANNOT_BE_DEBIT_MODE_CARD", "DESTINATION_CANNOT_BE_DEBIT_MODE_CARD", "TRANSFER_BETWEEN_INSTRUMENTS_UNSUPPORTED", "SOURCE_AND_DESTINATION_MUST_BE_DIFFERENT", "SCHEDULED_TIMESTAMP_INVALID" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "MultipleSCAChallengePushConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "CHALLENGE_LIMIT_EXCEEDED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "VerifyConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "VERIFICATION_CODE_INVALID", "EMAIL_NOT_UNIQUE" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedCardResponse" : {
      "schema" : {
        "$ref" : "#/definitions/ManagedCard"
      },
      "description" : "Success"
    },
    "ConsumerKycStartConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "KYC_ALREADY_APPROVED", "KYC_PENDING_REVIEW", "KYC_REJECTED", "EMAIL_UNVERIFIED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ConsumerResponse" : {
      "schema" : {
        "$ref" : "#/definitions/Consumer"
      },
      "description" : "Success"
    },
    "CorporateResponse" : {
      "schema" : {
        "$ref" : "#/definitions/Corporate"
      },
      "description" : "Success"
    },
    "StepUpSCAChallengeConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "MOBILE_NUMBER_INVALID", "MOBILE_COUNTRY_NOT_SUPPORTED", "RETRY_IN_15SEC", "CHALLENGE_LIMIT_EXCEEDED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedCardPhysicalPinGetResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "pin" : {
            "$ref" : "#/definitions/SensitivePin"
          }
        }
      },
      "description" : "Success"
    },
    "ManagedCardPhysicalContactlessLimitResetConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "PHYSICAL_CARD_NOT_ACTIVATED", "INSTRUMENT_BLOCKED", "INSTRUMENT_DESTROYED", "PHYSICAL_CARD_TYPE_NOT_SUPPORTED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "CreatePasswordConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "UNRESOLVED_IDENTITY", "PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE", "PASSWORD_TOO_SHORT", "PASSWORD_TOO_LONG", "PASSWORD_TOO_SIMPLE", "PASSWORD_KEY_ALREADY_IN_USE", "PASSWORD_ALREADY_CREATED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "InstrumentForbidden" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STEP_UP_REQUIRED", "ACCESS_TOKEN_REQUIRED" ]
          }
        }
      },
      "description" : "Forbidden - Access to the requested resource or action is forbidden."
    },
    "SendSCAVerifyConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "VERIFICATION_CODE_EXPIRED", "VERIFICATION_CODE_INVALID", "SCA_EXEMPTION_APPLIED", "CHALLENGE_NOT_PENDING", "CHALLENGE_LIMIT_EXCEEDED", "ONE_CHALLENGE_LIMIT_REMAINING" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedAccountCreateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "PROFILE_NOT_FOUND", "PROFILE_INACTIVE", "MODEL_CONSTRAINTS_VIOLATED", "CURRENCY_NOT_SUPPORTED_BY_PROFILE", "PROVIDER_NOT_SUPPORTED_BY_PROFILE", "INSTRUMENT_NOT_FOUND", "OWNER_IDENTITY_NOT_VERIFIED", "IDENTITY_LIMITS_EXCEEDED", "PROGRAMME_LIMITS_EXCEEDED", "INNOVATOR_LIMITS_EXCEEDED", "SYSTEM_LIMITS_EXCEEDED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "EnrolDeviceUsingOtpStepTwoConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "CHANNEL_NOT_SUPPORTED", "CHANNEL_ALREADY_REGISTERED", "VERIFICATION_CODE_EXPIRED", "VERIFICATION_CODE_INVALID", "CREDENTIALS_INACTIVE", "CHALLENGE_LIMIT_EXCEEDED", "ONE_CHALLENGE_LIMIT_REMAINING", "STATE_INVALID", "TYPE_DOES_NOT_SUPPORT_ENROLMENT" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "SendBulkCreateResponse" : {
      "schema" : {
        "$ref" : "#/definitions/SendBulkCreateResponse"
      },
      "description" : "Success"
    },
    "SendBulkCreateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "description" : "Error codes:\n  * `TRANSACTION_LIMIT_EXCEEDED` - The number of transactions exceeds the limit of 1000.\n",
            "type" : "string",
            "enum" : [ "TRANSACTION_LIMIT_EXCEEDED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "BulkProcess" : {
      "schema" : {
        "$ref" : "#/definitions/BulkProcess"
      },
      "description" : "Success"
    },
    "SCAChallengeResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "scaChallengeId" : {
            "$ref" : "#/definitions/Id"
          }
        }
      },
      "description" : "Success"
    },
    "ServiceUnavailable" : {
      "description" : "Service Unavailable - We're temporarily offline for maintenance. Please try again later."
    },
    "ManagedAccountsIBANUpgradeConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_ALREADY_UPGRADED_TO_IBAN", "INSTRUMENT_IS_NOT_ACTIVE", "IBAN_ALLOCATION_EXCEEDED", "IBAN_NOT_SUPPORTED", "IBAN_ALREADY_REQUESTED", "OWNER_NOT_VERIFIED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "SendSCAChallengePushConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "CHALLENGE_LIMIT_EXCEEDED", "SCA_EXEMPTION_APPLIED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "AccessTokenResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "credentials" : {
            "$ref" : "#/definitions/CredentialId"
          },
          "identity" : {
            "$ref" : "#/definitions/IdentityId"
          },
          "token" : {
            "type" : "string"
          },
          "status" : {
            "description" : "The token status, as follows:\n  - STANDARD: it is a standard token. \n  - STEPPED_UP: it is a stepped up token.\n",
            "type" : "string",
            "enum" : [ "STANDARD", "STEPPED_UP" ]
          }
        }
      },
      "description" : "Success"
    },
    "BeneficiaryBatchPageResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "batches" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/BeneficiaryBatch"
            }
          },
          "count" : {
            "format" : "int32",
            "description" : "The total number of records (excluding the paging limit).",
            "type" : "integer"
          },
          "responseCount" : {
            "format" : "int32",
            "description" : "The total number of records returned in this response (always capped at 100).",
            "type" : "integer"
          }
        }
      },
      "description" : "Success"
    },
    "LostPasswordResumeConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INVALID_NONCE_OR_EMAIL", "PASSWORD_ALREADY_USED", "PASSWORD_TOO_SHORT", "PASSWORD_TOO_LONG", "PASSWORD_TOO_SIMPLE", "PASSWORD_INCORRECT", "PASSWORD_NOT_SET" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedCardPhysicalReplaceDamagedConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "PHYSICAL_CARD_NOT_ACTIVATED", "INSTRUMENT_ALREADY_DESTROYED", "INSTRUMENT_ALREADY_PENDING_REPLACEMENT", "INSTRUMENT_MARKED_AS_LOST", "MAX_PRINT_CHARACTERS_EXCEEDED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedCardSpendRulesGetResponse" : {
      "schema" : {
        "$ref" : "#/definitions/AllLevelSpendRules"
      },
      "description" : "Success"
    },
    "SendResponse" : {
      "schema" : {
        "$ref" : "#/definitions/Send"
      },
      "description" : "Success"
    },
    "LoginViaBiometricsResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "challengeId" : {
            "description" : "The unique identifier of a Biometric challenge.",
            "type" : "string"
          }
        }
      },
      "description" : "Success"
    },
    "ConsumerKycStartResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "reference" : {
            "pattern" : "^[0-9]+$",
            "description" : "The reference used to initialise the KYC UI Component.",
            "type" : "string"
          },
          "kycLevel" : {
            "$ref" : "#/definitions/KycLevel"
          }
        }
      },
      "description" : "Success"
    },
    "CorporateKybGetResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "kybStatus" : {
            "$ref" : "#/definitions/KyiStatus"
          },
          "ongoingKybStatus" : {
            "$ref" : "#/definitions/KyiStatus"
          }
        }
      },
      "description" : "Success"
    },
    "ManagedCardBlockConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_ALREADY_BLOCKED", "INSTRUMENT_DESTROYED", "INSTRUMENT_MARKED_LOST_STOLEN" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "UserPatchConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "EMAIL_NOT_UNIQUE", "MOBILE_OR_COUNTRY_CODE_INVALID", "MOBILE_NO_CHANGE_LIMIT_EXCEEDED", "TOO_FREQUENT_EMAIL_CHANGES", "EMAIL_DOMAIN_NOT_ALLOWED", "MOBILE_CHANGE_NOT_ALLOWED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "OutgoingWireTransferResponse" : {
      "schema" : {
        "$ref" : "#/definitions/OutgoingWireTransfer"
      },
      "description" : "Success"
    },
    "ManagedCardPhysicalPinGetConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "PHYSICAL_CARD_NOT_ACTIVATED", "PIN_NOT_SET", "PIN_TRIES_EXCEEDED", "INSTRUMENT_BLOCKED", "INSTRUMENT_DESTROYED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "MethodNotAllowed" : {
      "schema" : {
        "$ref" : "#/definitions/Error"
      },
      "description" : "Method Not Allowed - The request was received but has been rejected for the requested resource."
    },
    "TokenResponse" : {
      "schema" : {
        "$ref" : "#/definitions/TokenResponse"
      },
      "description" : "Success"
    },
    "ManagedCardAssignConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "IDENTITY_NOT_VERIFIED", "IDENTITY_NOT_ACTIVE", "CARD_ALREADY_ASSIGNED", "ACTIVATION_CODE_INVALID", "INSTRUMENT_NOT_FOUND", "PROFILE_NOT_FOUND", "MODEL_CONSTRAINTS_VIOLATED", "IDENTITY_KYC_LEVEL_STEPUP_REQUIRED", "AUTH_FORWARDING_NOT_ENABLED", "THREEDS_DETAILS_NOT_PROVIDED", "USER_NOT_ENROLLED_FOR_BIOMETRICS", "BIOMETRIC_AUTHENTICATION_NOT_SUPPORTED", "LINKED_USER_NOT_FOUND", "USER_INACTIVE", "INVALID_CHANNELS_SELECTED", "INVALID_PRIMARY_CHANNEL_SELECTED", "USER_MOBILE_NUMBER_DOES_NOT_EXIST", "MORE_THAN_ONE_MOBILE_NUMBER_PROVIDED", "MOBILE_NUMBER_ALREADY_EXISTS", "TWILIO_AUTHY_AUTHENTICATION_NOT_SUPPORTED", "USER_NOT_ENROLLED_FOR_TWILIO_AUTHY" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "LoginWithPasswordResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "credentials" : {
            "$ref" : "#/definitions/CredentialId"
          },
          "identity" : {
            "$ref" : "#/definitions/IdentityId"
          },
          "tokenType" : {
            "$ref" : "#/definitions/TokenType"
          },
          "token" : {
            "description" : "An authorisation token (valid for 5 minutes from last activity) identifying the user to be used in the `auth_token` authorization header for secured operations.",
            "type" : "string"
          }
        }
      },
      "description" : "Success"
    },
    "TransferResponse" : {
      "schema" : {
        "$ref" : "#/definitions/Transfer"
      },
      "description" : "Success"
    },
    "ManagedCardConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "PAYMENT_MODEL_CONSTRAINTS_VIOLATED", "PROFILE_NOT_FOUND", "PROFILE_INACTIVE", "CURRENCY_NOT_SUPPORTED_BY_PROFILE", "PROVIDER_NOT_SUPPORTED_BY_PROFILE", "INSTRUMENT_NOT_FOUND", "COUNTRY_INVALID", "OWNER_IDENTITY_NOT_VERIFIED", "IDENTITY_LIMITS_EXCEEDED", "PROGRAMME_LIMITS_EXCEEDED", "INNOVATOR_LIMITS_EXCEEDED", "SYSTEM_LIMITS_EXCEEDED", "PARENT_MANAGED_ACCOUNT_NOT_ACTIVE", "PARENT_MANAGED_ACCOUNT_NOT_FOUND", "WALLETS_NOT_ENABLED", "WALLET_ARTWORK_NOT_SPECIFIED", "WALLET_ARTWORK_INVALID", "IDENTITY_KYC_LEVEL_STEPUP_REQUIRED", "PUSHPROVISIONING_NOT_ENABLED", "AUTH_FORWARDING_NOT_ENABLED", "THREEDS_DETAILS_NOT_PROVIDED", "USER_NOT_ENROLLED_FOR_BIOMETRICS", "BIOMETRIC_AUTHENTICATION_NOT_SUPPORTED", "LINKED_USER_NOT_FOUND", "USER_INACTIVE", "INVALID_CHANNELS_SELECTED", "INVALID_PRIMARY_CHANNEL_SELECTED", "USER_MOBILE_NUMBER_DOES_NOT_EXIST", "MORE_THAN_ONE_MOBILE_NUMBER_PROVIDED", "MOBILE_NUMBER_ALREADY_EXISTS", "TWILIO_AUTHY_AUTHENTICATION_NOT_SUPPORTED", "USER_NOT_ENROLLED_FOR_TWILIO_AUTHY", "RENEWAL_TYPE_NOT_SUPPORTED_BY_PROFILE" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedAccountResponse" : {
      "schema" : {
        "$ref" : "#/definitions/ManagedAccount"
      },
      "description" : "Success"
    },
    "EmailVerificationConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "EMAIL_NOT_FOUND", "ALREADY_VERIFIED", "EMAIL_NOT_UNIQUE" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "Forbidden" : {
      "description" : "Forbidden - Access to the requested resource or action is forbidden."
    },
    "BeneficiaryBatchSCAVerifyConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "VERIFICATION_CODE_EXPIRED", "VERIFICATION_CODE_INVALID", "ONE_CHALLENGE_LIMIT_REMAINING", "CHALLENGE_LIMIT_EXCEEDED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "LoginViaBiometricsConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "CHANNEL_NOT_REGISTERED", "CHANNEL_NOT_SUPPORTED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "UserInviteConsumeConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INVITE_OR_INVITE_CODE_INVALID", "UNRESOLVED_IDENTITY", "PASSWORD_ALREADY_USED", "PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE", "PASSWORD_TOO_SHORT", "PASSWORD_TOO_LONG", "PASSWORD_TOO_SIMPLE", "PASSWORD_KEY_ALREADY_IN_USE", "PASSWORD_ALREADY_CREATED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "Locked" : {
      "description" : "Locked - Account is temporarily locked due to failed consecutive login attempts. Try again in 30 minutes."
    },
    "SendCreateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "PROFILE_INACTIVE", "MODEL_CONSTRAINTS_VIOLATED", "INTERCEPTOR_DENIED_TRANSACTION", "INSTRUMENT_DENIED_TRANSACTION", "FOREX_TRADE_DENIED_TRANSACTION", "CURRENCY_MISMATCH", "SOURCE_INSTRUMENT_BLOCKED", "DESTINATION_INSTRUMENT_BLOCKED", "SOURCE_NOT_FOUND", "DESTINATION_NOT_FOUND", "FEE_NOT_CONFIGURED_FOR_CURRENCY", "DESTINATION_LIMIT_EXCEEDED", "FUNDS_INSUFFICIENT", "AMOUNT_INVALID", "SOURCE_CANNOT_BE_DEBIT_MODE_CARD", "DESTINATION_CANNOT_BE_DEBIT_MODE_CARD", "SEND_TO_INSTRUMENT_UNSUPPORTED", "SOURCE_INSTRUMENT_DESTROYED", "DESTINATION_INSTRUMENT_DESTROYED", "SOURCE_AND_DESTINATION_MUST_BE_DIFFERENT", "IDENTITY_KYC_LEVEL_STEPUP_REQUIRED", "DESTINATION_BELONGS_TO_SAME_IDENTITY", "SOURCE_AND_DESTINATION_MUST_BE_IN_SAME_PROGRAMME", "BENEFICIARY_NOT_FOUND", "BENEFICIARY_TYPE_INVALID", "PROFILE_NOT_FOUND", "SCHEDULED_TIMESTAMP_INVALID", "DESTINATION_FEE_EXCEEDS_TRANSACTION_AMOUNT" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "LostPasswordInitiateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "MULTIPLE_ACCOUNTS_FOUND", "ACCOUNT_NOT_FOUND" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedAccountIBANResponse" : {
      "schema" : {
        "$ref" : "#/definitions/ManagedAccountIBAN"
      },
      "description" : "Success"
    },
    "OutgoingWireTransferCreateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "PROFILE_INACTIVE", "MODEL_CONSTRAINTS_VIOLATED", "INTERCEPTOR_DENIED_TRANSACTION", "INSTRUMENT_DENIED_TRANSACTION", "CURRENCY_MISMATCH", "SOURCE_INSTRUMENT_BLOCKED", "SOURCE_INSTRUMENT_DESTROYED", "AMOUNT_INVALID", "FUNDS_INSUFFICIENT", "SOURCE_NOT_FOUND", "FEE_NOT_CONFIGURED_FOR_CURRENCY", "TYPE_NOT_SUPPORTED_BY_PROFILE", "IDENTITY_KYC_LEVEL_STEPUP_REQUIRED", "BENEFICIARY_NOT_FOUND", "BENEFICIARY_TYPE_INVALID", "PROFILE_NOT_FOUND", "SCHEDULED_TIMESTAMP_INVALID", "BENEFICIARY_BANK_DETAILS_INVALID", "PLUGIN_FILTER_DATA_INVALID", "IBAN_UPGRADE_REQUIRED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "Unauthorized" : {
      "description" : "Unauthorized - Your credentials or access token are invalid."
    },
    "CreateCorporateResponse" : {
      "schema" : {
        "$ref" : "#/definitions/CreatedCorporate"
      },
      "description" : "Success"
    },
    "StepUpSCAVerifyConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "VERIFICATION_CODE_EXPIRED", "VERIFICATION_CODE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "ONE_CHALLENGE_LIMIT_REMAINING", "CHALLENGE_LIMIT_EXCEEDED", "ALREADY_VERIFIED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "BulkProcessorConflictResponse" : {
      "schema" : {
        "$ref" : "#/definitions/BulkProcessConflict"
      },
      "description" : "BulkProcessorConflict - bulk processor conflict."
    },
    "ManagedCardPhysicalUpgradeConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_ALREADY_UPGRADED_TO_PHYSICAL", "CONFIG_ERROR_PRODUCT_REFERENCE", "PRODUCT_REFERENCE_NOT_SPECIFIED", "PRODUCT_REFERENCE_INVALID", "CONFIG_ERROR_CARRIER_TYPE", "CARRIER_TYPE_NOT_SPECIFIED", "CARRIER_TYPE_INVALID", "CONFIG_ERROR_CARD_BUREAU", "INSTRUMENT_BLOCKED", "INSTRUMENT_DESTROYED", "PIN_INVALID_FORMAT", "PARENT_MANAGED_ACCOUNT_BLOCKED", "MAX_PRINT_CHARACTERS_EXCEEDED", "DELIVERY_METHOD_INVALID", "CONTACT_NUMBER_NEEDED_FOR_BULK_DELIVERY" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "CorporateCreateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "PAYMENT_MODEL_CONSTRAINTS_VIOLATED", "PROFILE_NOT_FOUND", "PROFILE_INACTIVE", "ROOT_EMAIL_NOT_UNIQUE", "CURRENCY_UNSUPPORTED", "FEE_GROUP_INVALID", "COUNTRY_INVALID", "TERMS_NOT_ACCEPTED", "MOBILE_OR_COUNTRY_CODE_INVALID", "COUNTRY_UNSUPPORTED", "ROOT_USER_INACTIVE", "ROOT_EMAIL_NOT_VERIFIED", "KYC_APPROVAL_MISSING", "PROFILE_MISMATCH", "COMPANY_TYPE_UNSUPPORTED", "EMAIL_DOMAIN_NOT_ALLOWED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ManagedCardUnblockConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_BLOCKED", "INSTRUMENT_DESTROYED", "INSTRUMENT_MARKED_LOST_STOLEN" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "PasswordResponse" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "passwordInfo" : {
            "$ref" : "#/definitions/PasswordInfo"
          },
          "token" : {
            "description" : "The authorisation token to be used in the Authorization header for secured operations.",
            "type" : "string"
          }
        }
      },
      "description" : "Success"
    },
    "Error" : {
      "schema" : {
        "$ref" : "#/definitions/Error"
      },
      "description" : "Error"
    },
    "BadRequestError" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "syntaxErrors" : {
            "$ref" : "#/definitions/SyntaxError"
          },
          "message" : {
            "description" : "When present helps to identify and fix the problem.",
            "type" : "string",
            "maxLength" : 255
          }
        }
      },
      "description" : "Bad Request Error - Your request is invalid."
    },
    "UserInviteValidateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INVITE_OR_INVITE_CODE_INVALID" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "UserResponse" : {
      "schema" : {
        "$ref" : "#/definitions/User"
      },
      "description" : "Success"
    },
    "TooManyRequests" : {
      "description" : "Too many requests."
    },
    "PasswordUpdateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "PASSWORD_ALREADY_USED", "PASSWORD_TOO_SHORT", "PASSWORD_TOO_LONG", "PASSWORD_TOO_SIMPLE", "PASSWORD_INCORRECT" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "ConsumerCreateConflict" : {
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "PAYMENT_MODEL_CONSTRAINTS_VIOLATED", "PROFILE_NOT_FOUND", "PROFILE_INACTIVE", "ROOT_EMAIL_NOT_UNIQUE", "CURRENCY_UNSUPPORTED", "FEE_GROUP_INVALID", "COUNTRY_INVALID", "TERMS_NOT_ACCEPTED", "MOBILE_OR_COUNTRY_CODE_INVALID", "COUNTRY_UNSUPPORTED", "EMAIL_DOMAIN_NOT_ALLOWED" ]
          }
        }
      },
      "description" : "Conflict"
    },
    "NotFound" : {
      "schema" : {
        "$ref" : "#/definitions/Error"
      },
      "description" : "Not found - The requested resource couldn't be found."
    }
  },
  "schemes" : [ "${rest.weavrfundstransfer.scheme}" ],
  "securityDefinitions" : {
    "api_key" : {
      "x-testValue" : null,
      "in" : "header",
      "name" : "api-key",
      "type" : "apiKey",
      "x-value" : "${rest.weavrfundstransfer.apikey.header.apikey}"
    },
    "webhooks_key" : {
      "x-testValue" : null,
      "in" : "header",
      "name" : "webhooks-key",
      "type" : "apiKey",
      "x-value" : "${rest.weavrfundstransfer.apikey.header.webhookskey}"
    },
    "auth_token" : {
      "x-testValue" : null,
      "in" : "header",
      "name" : "auth_token",
      "type" : "apiKey",
      "x-value" : "${rest.weavrfundstransfer.apikey.header.auth_token}"
    }
  },
  "definitions" : {
    "ProfileId" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ProfileId",
      "description" : "The profile Id which a specific identity, instrument or transaction type is linked to.\n\nProfiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.\n\nYou can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.\n\nProfile Ids can be found in the Multi Portal, in the API Credentials page.\n",
      "type" : "string"
    },
    "DestroyedReason" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.DestroyedReason",
      "description" : "The reason why the instrument has been destroyed:\n  - SYSTEM: The platform or an administrator of the platform has destroyed the instrument.\n  - USER: The root, or an authorised user, of the identity owning the instrument has destroyed the instrument.\n  - LOST: The instrument was automatically destroyed as it was marked as lost.\n  - STOLEN: The instrument was automatically destroyed as it was marked as stolen.\n  - EXPIRED: The instrument was automatically destroyed as it expired.\n",
      "type" : "string"
    },
    "TransactionState" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.TransactionState",
      "description" : "Status of the transaction.",
      "type" : "string"
    },
    "Address" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Address",
      "type" : "object",
      "required" : [ "addressLine1", "city", "country", "postCode" ],
      "properties" : {
        "country" : {
          "minLength" : 2,
          "pattern" : "^[A-Z]+$",
          "description" : "The country of the address expressed in ISO 3166 alpha-2 format.",
          "type" : "string",
          "maxLength" : 2
        },
        "city" : {
          "description" : "The city of the address.",
          "type" : "string",
          "maxLength" : 50
        },
        "addressLine1" : {
          "minLength" : 1,
          "description" : "The first line of the address.",
          "type" : "string",
          "maxLength" : 150
        },
        "addressLine2" : {
          "description" : "The second line of the address.",
          "type" : "string",
          "maxLength" : 150
        },
        "postCode" : {
          "pattern" : "^[A-Za-z0-9 -]*$",
          "description" : "The post code associated with the address.",
          "type" : "string",
          "maxLength" : 10
        },
        "state" : {
          "description" : "The state of the address.",
          "type" : "string",
          "maxLength" : 50
        }
      }
    },
    "CorporateRootUser" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.CorporateRootUser",
      "type" : "object",
      "required" : [ "active", "companyPosition", "email", "emailVerified", "id", "mobile", "mobileNumberVerified", "name", "surname" ],
      "properties" : {
        "emailVerified" : {
          "description" : "Indicates if the root user's email has been verified.",
          "type" : "boolean"
        },
        "companyPosition" : {
          "$ref" : "#/definitions/CompanyPosition"
        },
        "surname" : {
          "description" : "Last name of the root user.",
          "type" : "string",
          "maxLength" : 100
        },
        "name" : {
          "description" : "First name of the root user.",
          "type" : "string",
          "maxLength" : 100
        },
        "mobile" : {
          "$ref" : "#/definitions/Mobile"
        },
        "active" : {
          "description" : "The state of the root user. If false, then the user will not be able to log in.",
          "type" : "boolean"
        },
        "mobileNumberVerified" : {
          "description" : "Indicates if the root user's mobile number has been verified.",
          "type" : "boolean"
        },
        "dateOfBirth" : {
          "$ref" : "#/definitions/Date"
        },
        "id" : {
          "$ref" : "#/definitions/IdentityId"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "email" : {
          "$ref" : "#/definitions/Email"
        }
      }
    },
    "InstrumentType" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.InstrumentType",
      "type" : "string"
    },
    "BulkProcessesPaged" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BulkProcessesPaged",
      "type" : "object",
      "properties" : {
        "bulk_processes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BulkProcess"
          }
        },
        "count" : {
          "format" : "int32",
          "description" : "Total number of records (excluding limit)",
          "type" : "integer"
        },
        "responseCount" : {
          "format" : "int32",
          "description" : "Total number of records returned in this response",
          "type" : "integer"
        }
      }
    },
    "SCAPushChannel" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SCAPushChannel",
      "description" : "- \"AUTHY\": The push notification is sent on the user's device using [Twilio Authy](https://www.twilio.com/authy)\n- \"BIOMETRIC\": The push notification is sent to the user's device\n",
      "type" : "string"
    },
    "CardAuthorisationDetailsAuthorisationType" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.CardAuthorisationDetailsAuthorisationType",
      "type" : "string"
    },
    "SendBulkCreateRequest" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SendBulkCreateRequest",
      "type" : "object",
      "required" : [ "sends" ],
      "properties" : {
        "sends" : {
          "description" : "The object representing the sends' details.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SendCreateRequest"
          }
        }
      }
    },
    "BusinessBeneficiaryType" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BusinessBeneficiaryType",
      "type" : "object",
      "required" : [ "businessName" ],
      "properties" : {
        "businessName" : {
          "description" : "The business beneficiary name. The allowed length and pattern is dependent on the beneficiary details type:\n\n`InstrumentDetailsBeneficiary` or `BankAccountDetailsBeneficiary` with `SepaBankDetails`: >= `1` character and <= `150` characters\n\n`BankAccountDetailsBeneficiary` with `FasterPaymentsBankDetails`: >= `1` character and <= `140` characters with a pattern of `^[a-zA-Z0-9\\/\\-?:().,’+\\s#=!\"%&*<>;\\{@\\r\\n]*$`\n(please note that the `’` symbol is the unicode value U+2019 (right single quotation mark) and not the unicode value U+0027 (apostrophe))\n",
          "type" : "string"
        }
      }
    },
    "ChargeFee" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ChargeFee",
      "type" : "object",
      "required" : [ "feeType", "profileId", "source", "transactionId" ],
      "properties" : {
        "profileId" : {
          "description" : "The profile Id which a specific identity, instrument or transaction type is linked to.",
          "type" : "string"
        },
        "creationTimestamp" : {
          "format" : "int64",
          "type" : "integer"
        },
        "source" : {
          "$ref" : "#/definitions/InstrumentId"
        },
        "state" : {
          "$ref" : "#/definitions/TransactionState"
        },
        "feeType" : {
          "description" : "The fee type as defined in the Multi Portal, and as sent in the request.",
          "type" : "string"
        },
        "availableBalanceAdjustment" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "transactionId" : {
          "$ref" : "#/definitions/TransactionId"
        }
      }
    },
    "Consumer" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Consumer",
      "type" : "object",
      "required" : [ "acceptedTerms", "creationTimestamp", "id", "ipAddress", "profileId", "rootUser" ],
      "properties" : {
        "rootUser" : {
          "$ref" : "#/definitions/ConsumerRootUser"
        },
        "sourceOfFundsOther" : {
          "description" : "Description of source of funds in case `OTHER` was chosen.",
          "type" : "string"
        },
        "acceptedTerms" : {
          "description" : "Must be set to *true* to indicate that the consumer root user has accepted the terms and conditions.",
          "type" : "boolean"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "creationTimestamp" : {
          "format" : "int64",
          "description" : "The time when this consumer was created, expressed in Epoch timestamp using millisecond precision.",
          "type" : "integer"
        },
        "ipAddress" : {
          "minLength" : 5,
          "description" : "The IP address of the consumer user doing the registration.",
          "type" : "string",
          "maxLength" : 45
        },
        "sourceOfFunds" : {
          "$ref" : "#/definitions/ConsumerSourceOfFunds"
        },
        "id" : {
          "$ref" : "#/definitions/IdentityId"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "feeGroup" : {
          "description" : "The fee group which the consumer is bound to.",
          "type" : "string"
        },
        "baseCurrency" : {
          "$ref" : "#/definitions/Currency"
        }
      }
    },
    "Currency" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Currency",
      "description" : "The currency expressed in ISO-4217 code. Example: GBP, EUR, USD.",
      "type" : "string"
    },
    "TransactionBulkCancelResponse" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.TransactionBulkCancelResponse",
      "type" : "object",
      "required" : [ "cancellations" ],
      "properties" : {
        "cancellations" : {
          "description" : "Contains the cancellation details for each of the transactions.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TransactionCancelResponse"
          }
        }
      }
    },
    "AuthSCAPushChannel" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.AuthSCAPushChannel",
      "description" : "- \"AUTHY\": The push notification is sent on the user's device using [Twilio Authy](https://www.twilio.com/authy)\n",
      "type" : "string"
    },
    "ExternalData" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ExternalData",
      "description" : "External data fields, as provided and managed by the caller that are to be stored and associated with a Managed Card instance. This information is not processed or used by Weavr but some of the values could be shown in specific reports and used as filters",
      "type" : "array",
      "items" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "minLength" : 1,
            "pattern" : "^[a-zA-Z0-9 ]+$",
            "type" : "string",
            "maxLength" : 50
          },
          "value" : {
            "minLength" : 1,
            "pattern" : "^[a-zA-Z0-9 ]+$",
            "type" : "string",
            "maxLength" : 50
          }
        }
      }
    },
    "DeliveryTrackingCode" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.DeliveryTrackingCode",
      "description" : "The delivery tracking code for tracking the physical card's delivery status.",
      "type" : "string"
    },
    "TransactionCancellationReason" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.TransactionCancellationReason",
      "description" : "The reason the scheduled transaction was cancelled.",
      "type" : "string"
    },
    "OutgoingWireTransferCreateRequest" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.OutgoingWireTransferCreateRequest",
      "type" : "object",
      "required" : [ "destinationBeneficiary", "profileId", "sourceInstrument", "transferAmount" ],
      "properties" : {
        "scheduledTimestamp" : {
          "$ref" : "#/definitions/ScheduledTimestamp"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "transferAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "description" : {
          "description" : "These details are passed to the beneficiary as the `reference` . This field is mandatory for wire transfers executed over `SEPA`. The allowed length is dependent on the payment type:\n\n`SEPA` <= `35` characters. An extended character set is accepted to cater for all European languages. If `SEPA` does not support a particular character, it is automatically converted to an acceptable alternative, in line with `SEPA` scheme guidance.\n\n`Faster Payments` <= `18` characters\n",
          "type" : "string"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "sourceInstrument" : {
          "description" : "The managed account from which funds will be collected.",
          "type" : "object",
          "properties" : {
            "id" : {
              "pattern" : "^[0-9]+$",
              "type" : "string"
            },
            "type" : {
              "type" : "string",
              "enum" : [ "managed_accounts" ]
            }
          }
        },
        "destinationBeneficiary" : {
          "type" : "object"
        }
      }
    },
    "TransactionCancelRequest" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.TransactionCancelRequest",
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "cancellationReason" : {
          "$ref" : "#/definitions/TransactionCancellationReason"
        },
        "id" : {
          "pattern" : "^[0-9]+$",
          "description" : "The id of the transaction.",
          "type" : "string"
        }
      }
    },
    "SepaBankDetails" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SepaBankDetails",
      "description" : "Bank details used in case the wire transfer is executed over SEPA.",
      "type" : "object",
      "required" : [ "iban" ],
      "properties" : {
        "iban" : {
          "minLength" : 15,
          "pattern" : "^[A-Z]{2}[0-9]{2}[A-Z0-9]{11,30}$",
          "description" : "International Bank Account Number, required for wire transfer over SEPA.",
          "type" : "string",
          "maxLength" : 34
        },
        "bankIdentifierCode" : {
          "minLength" : 8,
          "pattern" : "^[a-zA-Z0-9]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}[a-zA-Z0-9]{0,3}$",
          "description" : "BIC, for wire transfer over SEPA.",
          "type" : "string",
          "maxLength" : 11
        }
      }
    },
    "SwiftBankDetails" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SwiftBankDetails",
      "description" : "Bank details used in case the wire transfer is executed over SWIFT.",
      "type" : "object",
      "required" : [ "code", "iban" ],
      "properties" : {
        "code" : {
          "minLength" : 8,
          "pattern" : "^[a-zA-Z0-9]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}[a-zA-Z0-9]{0,3}$",
          "description" : "SWIFT code, identifying a particular bank or branch, required for wire transfer over SWIFT.",
          "type" : "string",
          "maxLength" : 11
        },
        "iban" : {
          "minLength" : 15,
          "pattern" : "^[A-Z]{2}[0-9]{2}[A-Z0-9]{11,30}$",
          "description" : "International Bank Account Number, required for wire transfer over SWIFT.",
          "type" : "string",
          "maxLength" : 34
        }
      }
    },
    "UserIdentity" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.UserIdentity",
      "type" : "object",
      "required" : [ "id", "name" ],
      "properties" : {
        "name" : {
          "description" : "The name of the company.",
          "type" : "string"
        },
        "id" : {
          "$ref" : "#/definitions/IdentityId"
        }
      }
    },
    "CompanyType" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.CompanyType",
      "description" : "Supported company types - if company type is not listed, please contact our support team to check if the company type can be supported.",
      "type" : "string"
    },
    "SCAFactor" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SCAFactor",
      "type" : "object",
      "properties" : {
        "channel" : {
          "$ref" : "#/definitions/SCAChannel"
        },
        "type" : {
          "$ref" : "#/definitions/SCAChallengeType"
        },
        "status" : {
          "$ref" : "#/definitions/SCAFactorStatus"
        }
      }
    },
    "BeneficiaryBatchOperation" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BeneficiaryBatchOperation",
      "type" : "string"
    },
    "BeneficiaryBatch" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BeneficiaryBatch",
      "type" : "object",
      "required" : [ "operationBatchId", "state" ],
      "properties" : {
        "operationBatchId" : {
          "$ref" : "#/definitions/BeneficiaryOperationBatchId"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "state" : {
          "$ref" : "#/definitions/BeneficiaryBatchState"
        }
      }
    },
    "DebitModeCardAuthorisationEvent" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CardAuthorisationEvent"
      }, {
        "type" : "object",
        "required" : [ "parentManagedAccountId" ],
        "properties" : {
          "availableToSpend" : {
            "description" : "The amount of funds from the parent managed account that are available to be spent through the card, in a given time interval, _before_ this transaction is performed.",
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/AvailableToSpend"
            }
          },
          "parentManagedAccountId" : {
            "description" : "Id of the managed account holding funds which the managed card can access, up to a configurable spend limit.",
            "type" : "string"
          }
        }
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.DebitModeCardAuthorisationEvent"
    },
    "TransactionId" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.TransactionId",
      "type" : "object",
      "required" : [ "id", "type" ],
      "properties" : {
        "id" : {
          "pattern" : "^[0-9]+$",
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "AUTHORISATION", "SETTLEMENT", "MANUAL_TRANSACTION", "TRANSFER", "SEND", "DEPOSIT", "AUTHORISATION_REVERSAL", "AUTHORISATION_EXPIRY", "AUTHORISATION_DECLINE", "AUTHORISATION_MANUAL_CLOSE", "MERCHANT_REFUND", "MERCHANT_REFUND_REVERSAL", "ORIGINAL_CREDIT_TRANSACTION", "SETTLEMENT_REVERSAL", "ADJUSTMENT", "CHARGE_FEE", "WITHDRAWAL_RESERVE", "WITHDRAWAL_RELEASE", "FEE_REVERSAL", "OUTGOING_WIRE_TRANSFER", "AUTHORISATION_CANCELLATION", "SYSTEM_TRANSACTION", "OUTGOING_DIRECT_DEBIT_COLLECTION", "OUTGOING_DIRECT_DEBIT_REFUND" ]
        }
      }
    },
    "SpendLimitInterval" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SpendLimitInterval",
      "description" : "The time period for which the `spendLimit` is valid.\n - DAILY: starting from 00:00:00 UTC of current day to 23:59:59 UTC of current day\n - WEEKLY: 00:00:00 UTC Monday of current week to following Sunday 23:59:59 UTC\n - MONTHLY: 1st of current calendar month to end of current calendar month\n - QUARTERLY: starting from beginning of current quarter where quarters are defined as follows:\n  - 1 January 00:00:00 UTC to 31 March 23:59:59 UTC\n  - 1 April 00:00:00 UTC to 30 Jun 23:59:59 UTC\n  - 1 July 00:00:00 UTC to 30 September 23:59:59 UTC\n  - 1 October 00:00:00 UTC to 31 December 23:59:59 UTC\n\n- YEARLY: 1 January 00:00:00 UTC of current calendar year to 31 December 23:59:59 UTC of current calendar year.\n- ALWAYS: This indicates that the `spendLimit` is the total amount that can be spent through the card throughout the whole lifetime of the card.\n",
      "type" : "string"
    },
    "BulkProcessStatus" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BulkProcessStatus",
      "type" : "string"
    },
    "Transfer" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Transfer",
      "type" : "object",
      "required" : [ "creationTimestamp", "destination", "destinationAmount", "id", "profileId", "source", "state" ],
      "properties" : {
        "scheduledTimestamp" : {
          "$ref" : "#/definitions/ScheduledTimestamp"
        },
        "cancellationReason" : {
          "$ref" : "#/definitions/TransactionCancellationReason"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "destination" : {
          "$ref" : "#/definitions/InstrumentId"
        },
        "creationTimestamp" : {
          "format" : "int64",
          "description" : "The time when the transaction was created, expressed in Epoch timestamp using millisecond precision.",
          "type" : "integer"
        },
        "description" : {
          "pattern" : "^[a-zA-Z0-9\\\\/\\\\-?:().$_,'+\\\\s#=!\\\"%&*<>;\\\\{@\\\\r\\\\n]*$",
          "description" : "The description details that are included in the transaction as reference.",
          "type" : "string",
          "maxLength" : 255
        },
        "id" : {
          "pattern" : "^[0-9]+$",
          "description" : "The unique identifier of a Transfer transaction.",
          "type" : "string"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "source" : {
          "$ref" : "#/definitions/InstrumentId"
        },
        "state" : {
          "$ref" : "#/definitions/TransactionState"
        },
        "destinationAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "executionTimestamp" : {
          "$ref" : "#/definitions/ExecutionTimestamp"
        }
      }
    },
    "Id" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Id",
      "type" : "string"
    },
    "CredentialId" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.CredentialId",
      "type" : "object",
      "required" : [ "id", "type" ],
      "properties" : {
        "id" : {
          "pattern" : "^[0-9]+$",
          "description" : "The identifier of the user.",
          "type" : "string"
        },
        "type" : {
          "pattern" : "^[a-zA-Z0-9_-]+$",
          "description" : "The type of user.",
          "type" : "string",
          "maxLength" : 50,
          "enum" : [ "ROOT", "USER" ]
        }
      }
    },
    "PhysicalCardDetails" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.PhysicalCardDetails",
      "type" : "object",
      "required" : [ "pendingActivation" ],
      "properties" : {
        "deliveryTrackingMethod" : {
          "$ref" : "#/definitions/DeliveryTrackingMethod"
        },
        "pinBlocked" : {
          "description" : "Indicates if the physical card is blocked due to providing incorrect PINs.",
          "type" : "boolean"
        },
        "deliveryAddress" : {
          "$ref" : "#/definitions/DeliveryAddress"
        },
        "deliveryMethod" : {
          "$ref" : "#/definitions/DeliveryMethod"
        },
        "pendingActivation" : {
          "description" : "Indicates if the physical card is activated for physical usage such as with physical terminals.",
          "type" : "boolean"
        },
        "manufacturingState" : {
          "$ref" : "#/definitions/ManufacturingState"
        },
        "carrierType" : {
          "type" : "string"
        },
        "deliveryTrackingCode" : {
          "$ref" : "#/definitions/DeliveryTrackingCode"
        },
        "productReference" : {
          "description" : "The unique reference indicating the configuration of the physical card. Example the card design.",
          "type" : "string"
        },
        "bulkDelivery" : {
          "$ref" : "#/definitions/BulkCardDelivery"
        },
        "replacement" : {
          "description" : "Indicates if the physical card is replaced by another card.",
          "type" : "object",
          "properties" : {
            "replacementReason" : {
              "description" : "The reason why the physical card was replaced.\n  - DAMAGED: The physical card was damaged and cannot be used at a physical terminal.\n  - LOST_STOLEN: The physical card was either lost or stolen and cannot be used.\n  - EXPIRED: The physical card expired.\n",
              "type" : "string",
              "enum" : [ "DAMAGED", "LOST_STOLEN", "EXPIRED" ]
            },
            "replacementId" : {
              "pattern" : "^[0-9]+$",
              "description" : "The unique identifier of the new card that replaces this card.",
              "type" : "string"
            }
          }
        },
        "nameOnCardLine2" : {
          "pattern" : "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻäácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$",
          "description" : "Line 2 of the 'name on card' field. For Physical cards, this field will be printed on the card. The maximum characters allowed will depend on the design chosen and will be provided to you by Weavr when setting up your plastic cards. This field is deprecated",
          "type" : "string",
          "maxLength" : 27
        }
      }
    },
    "DeliveryAddress" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.DeliveryAddress",
      "description" : "The delivery address where the physical card is delivered.",
      "type" : "object",
      "required" : [ "addressLine1", "city", "country", "name", "postCode", "surname" ],
      "properties" : {
        "country" : {
          "minLength" : 2,
          "pattern" : "^[A-Z]+$",
          "description" : "Country of the identity in ISO 3166 alpha-2 format.",
          "type" : "string",
          "maxLength" : 2
        },
        "city" : {
          "type" : "string",
          "maxLength" : 20
        },
        "surname" : {
          "type" : "string",
          "maxLength" : 100
        },
        "name" : {
          "type" : "string",
          "maxLength" : 100
        },
        "contactNumber" : {
          "$ref" : "#/definitions/PhoneNumber"
        },
        "addressLine1" : {
          "minLength" : 1,
          "type" : "string",
          "maxLength" : 50
        },
        "addressLine2" : {
          "minLength" : 1,
          "type" : "string",
          "maxLength" : 50
        },
        "postCode" : {
          "pattern" : "^[A-Za-z0-9 -]*$",
          "type" : "string",
          "maxLength" : 10
        },
        "state" : {
          "type" : "string",
          "maxLength" : 50
        }
      }
    },
    "BulkProcessOperationsPaged" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BulkProcessOperationsPaged",
      "type" : "object",
      "properties" : {
        "operations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BulkProcessOperation"
          }
        },
        "count" : {
          "format" : "int32",
          "description" : "Total number of records (excluding limit)",
          "type" : "integer"
        },
        "responseCount" : {
          "format" : "int32",
          "description" : "Total number of records returned in this response",
          "type" : "integer"
        }
      }
    },
    "ManagedAccount" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ManagedAccount",
      "type" : "object",
      "required" : [ "balances", "creationTimestamp", "currency", "friendlyName", "id", "profileId", "state" ],
      "properties" : {
        "balances" : {
          "$ref" : "#/definitions/ManagedInstrumentBalance"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "creationTimestamp" : {
          "format" : "int64",
          "description" : "The time when the managed account was created, expressed in Epoch timestamp using millisecond precision.",
          "type" : "integer"
        },
        "currency" : {
          "$ref" : "#/definitions/Currency"
        },
        "id" : {
          "pattern" : "^[0-9]+$",
          "description" : "The unique identifier of a Managed Account.",
          "type" : "string"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "state" : {
          "$ref" : "#/definitions/ManagedInstrumentState"
        },
        "friendlyName" : {
          "minLength" : 1,
          "description" : "The friendly name given to the managed account.",
          "type" : "string",
          "maxLength" : 50
        }
      }
    },
    "DebitModeCard" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManagedCard"
      }, {
        "type" : "object",
        "required" : [ "parentManagedAccountId" ],
        "properties" : {
          "availableToSpend" : {
            "description" : "The amount of funds from the parent managed account that are available to be spent through the card, in a given time interval.",
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/AvailableToSpend"
            }
          },
          "parentManagedAccountId" : {
            "pattern" : "^[0-9]+$",
            "description" : "Id of the managed account holding funds which the managed card will access, up to a configurable spend limit.",
            "type" : "string"
          }
        }
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.DebitModeCard"
    },
    "OutgoingWireTransferBulkCreateResponse" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.OutgoingWireTransferBulkCreateResponse",
      "type" : "object",
      "required" : [ "response" ],
      "properties" : {
        "response" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "SensitiveCardNumber" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SensitiveCardNumber",
      "description" : "The full card number of the card.\n\nUnless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card number will be tokenised.\n\nTo show the full unredacted card number to your user, you need to embed the Card number UI Component in your application. This accepts the tokenised card number and shows the unredacted card number to the user on screen.\n",
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string",
          "maxLength" : 16
        }
      }
    },
    "ChallengeExemptionReason" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ChallengeExemptionReason",
      "description" : "The Reason the transaction was exempted from SCA verification",
      "type" : "string"
    },
    "BillingAddress" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BillingAddress",
      "type" : "object",
      "required" : [ "addressLine1", "city", "country", "postCode" ],
      "properties" : {
        "country" : {
          "minLength" : 2,
          "pattern" : "^[A-Z]+$",
          "description" : "The country of the address expressed in ISO 3166 alpha-2 format.",
          "type" : "string",
          "maxLength" : 2
        },
        "city" : {
          "description" : "The city of the address.",
          "type" : "string",
          "maxLength" : 20
        },
        "addressLine1" : {
          "minLength" : 1,
          "description" : "The first line of the address.",
          "type" : "string",
          "maxLength" : 150
        },
        "addressLine2" : {
          "description" : "The second line of the address.",
          "type" : "string",
          "maxLength" : 150
        },
        "postCode" : {
          "pattern" : "^[A-Za-z0-9 -]*$",
          "description" : "The post code associated with the address.",
          "type" : "string",
          "maxLength" : 10
        },
        "state" : {
          "description" : "The state of the address.",
          "type" : "string",
          "maxLength" : 50
        }
      }
    },
    "ManagedInstrumentState" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ManagedInstrumentState",
      "type" : "object",
      "required" : [ "state" ],
      "properties" : {
        "destroyedReason" : {
          "$ref" : "#/definitions/DestroyedReason"
        },
        "blockedReason" : {
          "$ref" : "#/definitions/BlockedReason"
        },
        "state" : {
          "$ref" : "#/definitions/InstrumentState"
        }
      }
    },
    "SourceInstrumentType" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SourceInstrumentType",
      "type" : "string"
    },
    "TokenType" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.TokenType",
      "description" : "The auth token received can only be used to access the following endpoints:\n  - `/identities`\n  - `/access_token`\n",
      "type" : "string"
    },
    "BeneficiaryValidationFailure" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BeneficiaryValidationFailure",
      "type" : "string"
    },
    "SCAOtpChannel" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SCAOtpChannel",
      "description" : "- \"SMS\": The one-time-password is sent as a text message\n",
      "type" : "string"
    },
    "LegalAddress" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.LegalAddress",
      "description" : "The legal address of the company. This information is captured via the Due Diligence (KYB) process.",
      "type" : "object",
      "required" : [ "addressLine1", "city", "country" ],
      "properties" : {
        "country" : {
          "minLength" : 2,
          "pattern" : "^[A-Z]+$",
          "description" : "Country of the identity in ISO 3166 alpha-2 format.",
          "type" : "string",
          "maxLength" : 2
        },
        "city" : {
          "type" : "string"
        },
        "addressLine1" : {
          "type" : "string"
        },
        "addressLine2" : {
          "type" : "string"
        },
        "postCode" : {
          "pattern" : "^[A-Za-z0-9 -]*$",
          "type" : "string",
          "maxLength" : 10
        },
        "state" : {
          "type" : "string",
          "maxLength" : 50
        }
      }
    },
    "AddressWithNoRequiredFields" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.AddressWithNoRequiredFields",
      "description" : "The address, with none of the separate fields being set as required.",
      "type" : "object",
      "properties" : {
        "country" : {
          "minLength" : 2,
          "pattern" : "^[A-Z]+$",
          "description" : "The country of the address expressed in ISO 3166 alpha-2 format.",
          "type" : "string",
          "maxLength" : 2
        },
        "city" : {
          "description" : "The city of the address.",
          "type" : "string"
        },
        "addressLine1" : {
          "description" : "The first line of the address.",
          "type" : "string"
        },
        "addressLine2" : {
          "description" : "The second line of the address.",
          "type" : "string"
        },
        "postCode" : {
          "pattern" : "^[A-Za-z0-9 -]*$",
          "description" : "The post code associated with the address.",
          "type" : "string",
          "maxLength" : 10
        },
        "state" : {
          "description" : "The state of the address.",
          "type" : "string",
          "maxLength" : 50
        }
      }
    },
    "TransactionBulkCancelRequest" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.TransactionBulkCancelRequest",
      "type" : "object",
      "required" : [ "cancellations" ],
      "properties" : {
        "cancellations" : {
          "description" : "Contains the details of the transactions to be cancelled.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TransactionCancelRequest"
          }
        }
      }
    },
    "PrepaidModeCard" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManagedCard"
      }, {
        "type" : "object",
        "properties" : {
          "balances" : {
            "$ref" : "#/definitions/ManagedInstrumentBalance"
          }
        }
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.PrepaidModeCard"
    },
    "DeliveryMethod" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.DeliveryMethod",
      "description" : "The delivery methods supported for delivering printed physical cards. If not specified, the STANDARD_DELIVERY method will be used.\n",
      "type" : "string"
    },
    "BlockedReason" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BlockedReason",
      "description" : "The reason why the instrument has been blocked:\n  - USER: The root, or an authorised user, of the identity owning the instrument has temporarily blocked the instrument.\n  - SYSTEM: The platform or an administrator of the platform has temporarily blocked the instrument.\n  - LOST: The instrument has been blocked because it was marked as lost.\n",
      "type" : "string"
    },
    "ManagedCardRequest" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ManagedCardRequest",
      "type" : "object",
      "required" : [ "billingAddress", "friendlyName", "mode", "nameOnCard", "profileId" ],
      "properties" : {
        "digitalWallets" : {
          "$ref" : "#/definitions/DigitalWallets"
        },
        "renewalType" : {
          "$ref" : "#/definitions/CardRenewalType"
        },
        "externalData" : {
          "$ref" : "#/definitions/ExternalData"
        },
        "threeDSecureAuthConfig" : {
          "$ref" : "#/definitions/ThreeDSecureAuthConfig"
        },
        "cardholderMobileNumber" : {
          "minLength" : 5,
          "pattern" : "^\\\\+[0-9]+$",
          "description" : "The mobile number including country code of the card holder.\n\nFor transactions that require a 3DS challenge, an SMS with a code will be sent on this number, to be entered during an online purchase.\n",
          "type" : "string",
          "maxLength" : 20
        },
        "mode" : {
          "description" : "The card can be created in prepaid mode or debit mode.\n\n- A prepaid mode card has its own balance and can have funds transferred to or from it.\n- A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit.\n",
          "type" : "string"
        },
        "authForwardingDefaultTimeoutDecision" : {
          "description" : "Default decision for auth forwarding on timeout",
          "type" : "string",
          "enum" : [ "APPROVE", "DECLINE" ]
        },
        "nameOnCard" : {
          "minLength" : 1,
          "pattern" : "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÒÓÔÕÖØŠÙÚÛÜŸÝĄĆČĎĘĹĽŁŃŇÑŐŔŚȘȚŤŰŹŻŽàáâãäåæçèéêëìíîïòóôõöøšùúûüÿýąćčďęĺľłńňñőŕśșțťűźżž\\\\-^. '-]*$",
          "description" : "The card holder's name for the card.\n\nThis may be verified by merchants when the card is used online. For Physical cards, this field will be printed on the card.\nThe maximum characters allowed will depend on the design chosen and will be provided to you by Weavr when setting up your plastic cards.\n",
          "type" : "string",
          "maxLength" : 27
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "billingAddress" : {
          "$ref" : "#/definitions/BillingAddress"
        },
        "nameOnCardLine2" : {
          "pattern" : "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÒÓÔÕÖØŠÙÚÛÜŸÝĄĆČĎĘĹĽŁŃŇÑŐŔŚȘȚŤŰŹŻŽàáâãäåæçèéêëìíîïòóôõöøšùúûüÿýąćčďęĺľłńňñőŕśșțťűźżž\\\\-^. '-]*$",
          "description" : "Line 2 of the 'name on card' field. For Physical cards, this field will be printed on the card. The maximum characters allowed will depend on the design chosen and will be provided to you by Weavr when setting up your plastic cards.",
          "type" : "string",
          "maxLength" : 27
        },
        "friendlyName" : {
          "minLength" : 1,
          "description" : "The friendly name for the card.",
          "type" : "string",
          "maxLength" : 50
        }
      }
    },
    "Statement" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Statement",
      "description" : "The list of statement entries.",
      "type" : "object",
      "properties" : {
        "entry" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StatementEntry"
          }
        },
        "footer" : {
          "description" : "The footer description for the current statement",
          "type" : "string"
        },
        "endBalance" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "count" : {
          "format" : "int32",
          "description" : "The total number of records (excluding the paging limit).",
          "type" : "integer"
        },
        "responseCount" : {
          "format" : "int32",
          "description" : "The total number of records returned in this response.",
          "type" : "integer"
        },
        "startBalance" : {
          "$ref" : "#/definitions/CurrencyAmount"
        }
      }
    },
    "ConsumerRootUser" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ConsumerRootUser",
      "type" : "object",
      "required" : [ "active", "email", "emailVerified", "id", "mobile", "mobileNumberVerified", "name", "surname" ],
      "properties" : {
        "placeOfBirth" : {
          "description" : "The place of birth of the consumer root user.",
          "type" : "string"
        },
        "occupation" : {
          "$ref" : "#/definitions/Occupation"
        },
        "address" : {
          "$ref" : "#/definitions/AddressWithNoRequiredFields"
        },
        "mobile" : {
          "$ref" : "#/definitions/Mobile"
        },
        "active" : {
          "description" : "The state of the root user. If false, then the user will not be able to log in.",
          "type" : "boolean"
        },
        "mobileNumberVerified" : {
          "description" : "Indicates if the root user's mobile number has been verified.",
          "type" : "boolean"
        },
        "dateOfBirth" : {
          "$ref" : "#/definitions/Date"
        },
        "emailVerified" : {
          "description" : "Indicates if the root user's email has been verified.",
          "type" : "boolean"
        },
        "nationality" : {
          "$ref" : "#/definitions/Nationality"
        },
        "surname" : {
          "description" : "Last name of the root user.",
          "type" : "string",
          "maxLength" : 100
        },
        "name" : {
          "description" : "First name of the root user.",
          "type" : "string",
          "maxLength" : 100
        },
        "id" : {
          "$ref" : "#/definitions/IdentityId"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "email" : {
          "$ref" : "#/definitions/Email"
        }
      }
    },
    "Fee" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Fee",
      "type" : "object",
      "required" : [ "feeType", "source" ],
      "properties" : {
        "source" : {
          "$ref" : "#/definitions/InstrumentId"
        },
        "feeType" : {
          "description" : "The fee type as defined in the Multi Portal.",
          "type" : "string"
        }
      }
    },
    "StatementEntry" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.StatementEntry",
      "type" : "object",
      "required" : [ "entryState", "processedTimestamp", "transactionAmount", "transactionId" ],
      "properties" : {
        "availableBalanceAfter" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "actualBalanceAfter" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "additionalFields" : {
          "description" : "A Map of additional fields. Possible values include fee information. The possible entries are `merchantName`, `merchantCategoryCode`, `merchantTerminalCountry`, `sourceInstrumentType`, `sourceInstrumentId`, `destinationInstrumentType`, `destinationInstrumentId`, `forexPaddingCurrency`, `forexPaddingAmount`, `note`, `sourceInstrumentFriendlyName`, `destinationInstrumentFriendlyName`, `sourceIdentityType`, `sourceIdentityId`, `sourceIdentityName`, `destinationIdentityType`, `destinationIdentityId`, `destinationIdentityName`, `exchangeRate`, `authorisationState`, `authorisationRelatedId`, `settlementRelatedId`, `chargeFeeType`, `relatedTransactionId`, `relatedTransactionIdType`, `beneficiaryName`, `beneficiaryAccount`, `beneficiaryBankCode`, `merchantId`, `merchantTransactionType`, `systemTransactionType`, `authorisationCode`, `relatedCardId`, `sender`, `forexFeeCurrency`, `forexFeeAmount`, `senderIban`, `senderReference`, `mandateId`, `merchantReference`, `description`, `declineReason` and `spendRuleFailedReason`.",
          "additionalProperties" : {
            "type" : "string"
          },
          "type" : "object"
        },
        "processedTimestamp" : {
          "format" : "int64",
          "description" : "The timestamp when the transaction was processed by the system, expressed in Epoch timestamp using millisecond precision.",
          "type" : "integer"
        },
        "actualBalanceAdjustment" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "entryState" : {
          "$ref" : "#/definitions/StatementEntryState"
        },
        "transactionId" : {
          "$ref" : "#/definitions/TransactionId"
        },
        "transactionFee" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "originalAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "forexRate" : {
          "$ref" : "#/definitions/ScaledAmount"
        },
        "cardholderFee" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "transactionAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "balanceAfter" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "sourceAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "availableBalanceAdjustment" : {
          "$ref" : "#/definitions/CurrencyAmount"
        }
      }
    },
    "Mobile" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Mobile",
      "type" : "object",
      "required" : [ "countryCode", "number" ],
      "properties" : {
        "number" : {
          "minLength" : 1,
          "pattern" : "^[0-9]+$",
          "description" : "The mobile number of the user - excluding country code.",
          "type" : "string",
          "maxLength" : 15
        },
        "countryCode" : {
          "minLength" : 1,
          "pattern" : "^\\\\+[0-9]+$",
          "description" : "The country code of the user mobile number (e.g. +44).",
          "type" : "string",
          "maxLength" : 6
        }
      }
    },
    "Nationality" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Nationality",
      "description" : "Nationality of the user - using ISO 3166 alpha-2.",
      "type" : "string"
    },
    "Occupation" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Occupation",
      "description" : "The industry of the identity.",
      "type" : "string"
    },
    "ThreeDSecureAuthConfig" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ThreeDSecureAuthConfig",
      "type" : "object",
      "required" : [ "linkedUserId", "primaryChannel" ],
      "properties" : {
        "linkedUserId" : {
          "pattern" : "^[0-9]+$",
          "description" : "The Authorised user whose authentication / billing details will be reflected on the card for verification purposes such as 3ds.",
          "type" : "string",
          "maxLength" : 19
        },
        "fallbackChannel" : {
          "description" : "Fallback Authentication Method",
          "type" : "string",
          "enum" : [ "OTP_SMS" ]
        },
        "primaryChannel" : {
          "description" : "Primary Authentication Method",
          "type" : "string",
          "enum" : [ "OTP_SMS", "BIOMETRICS", "TWILIO_AUTHY" ]
        }
      }
    },
    "MerchantData" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.MerchantData",
      "type" : "object",
      "required" : [ "merchantCategoryCode", "merchantName" ],
      "properties" : {
        "merchantCity" : {
          "description" : "The merchant city (if available)",
          "type" : "string"
        },
        "merchantDescription" : {
          "description" : "The merchant description",
          "type" : "string"
        },
        "merchantContact" : {
          "description" : "The merchant's contact (if available)",
          "type" : "string"
        },
        "merchantState" : {
          "description" : "The merchant state address (if available)",
          "type" : "string"
        },
        "merchantTelephone" : {
          "description" : "The merchant telephone number",
          "type" : "string"
        },
        "merchantName" : {
          "description" : "The name of the merchant where the authorisation has been made.",
          "type" : "string"
        },
        "merchantNameOther" : {
          "description" : "The alternative merchant name",
          "type" : "string"
        },
        "merchantStreet" : {
          "description" : "The merchant street address (if available)",
          "type" : "string"
        },
        "merchantId" : {
          "description" : "The merchant ID.",
          "type" : "string"
        },
        "merchantCategoryCode" : {
          "description" : "The merchant category code.",
          "type" : "string"
        },
        "merchantPostalCode" : {
          "description" : "The merchant postal code (if available)",
          "type" : "string"
        },
        "merchantNetworkId" : {
          "description" : "The merchant's network id",
          "type" : "string"
        },
        "merchantCountry" : {
          "description" : "The merchant country address",
          "type" : "string"
        },
        "merchantURL" : {
          "description" : "The merchant URL",
          "type" : "string"
        }
      }
    },
    "SendCreateRequest" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SendCreateRequest",
      "type" : "object",
      "required" : [ "destination", "destinationAmount", "profileId", "source" ],
      "properties" : {
        "scheduledTimestamp" : {
          "$ref" : "#/definitions/ScheduledTimestamp"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "destination" : {
          "type" : "object"
        },
        "description" : {
          "pattern" : "^[a-zA-Z0-9\\\\/\\\\-?:().$_,'+\\\\s#=!\\\"%&*<>;\\\\{@\\\\r\\\\n]*$",
          "description" : "The description details that are passed to the beneficiary.",
          "type" : "string",
          "maxLength" : 255
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "source" : {
          "$ref" : "#/definitions/InstrumentId"
        },
        "destinationAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        }
      }
    },
    "BeneficiaryBatchState" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BeneficiaryBatchState",
      "type" : "string"
    },
    "CardLevelSpendRules" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseCardLevelSpendRules"
      }, {
        "type" : "object",
        "properties" : {
          "minTransactionAmount" : {
            "format" : "int64",
            "description" : "The minimum transaction amount, in card currency, that is allowed. If the transaction amount is less than this value, then the transaction will be declined.",
            "type" : "integer"
          },
          "maxTransactionAmount" : {
            "format" : "int64",
            "description" : "The maximum transaction amount, in card currency, that is allowed. If the transaction amount is greater than this value, then the transaction will be declined.",
            "type" : "integer"
          }
        }
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.CardLevelSpendRules"
    },
    "KyiStatus" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.KyiStatus",
      "type" : "string"
    },
    "PhoneNumber" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.PhoneNumber",
      "type" : "string"
    },
    "ManufacturingState" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ManufacturingState",
      "description" : "Information on the manufacturing of the physical card, as follows:\n  - REQUESTED: The upgrade of the card to physical has been requested.\n  - SENT_FOR_FULFILLMENT - The card has been sent for printing.\n  - DISPATCHED: The card has been manufactured and dispatched.\n  - DELIVERED: The card has been received and activated by the recipient.\n",
      "type" : "string"
    },
    "Tag" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Tag",
      "description" : "The tag field is a custom field that can be used to search and filter.",
      "type" : "string"
    },
    "BasicBeneficiary" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BasicBeneficiary",
      "type" : "object",
      "required" : [ "beneficiaryDetails", "beneficiaryInformation", "trustLevel" ],
      "properties" : {
        "externalRefs" : {
          "description" : "The id of the entity as it is represented on the caller system.",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "beneficiaryDetails" : {
          "description" : "The object representing the beneficiary instrument details.",
          "type" : "object"
        },
        "trustLevel" : {
          "$ref" : "#/definitions/BeneficiaryTrustLevel"
        },
        "beneficiaryInformation" : {
          "description" : "The object representing the beneficiary details.",
          "type" : "object"
        },
        "group" : {
          "description" : "A custom field that can be used to categorise a beneficiary for easier searching and filtering.",
          "type" : "string",
          "maxLength" : 150
        }
      }
    },
    "FasterPaymentsBankDetails" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.FasterPaymentsBankDetails",
      "description" : "Bank details used in case the wire transfer is executed over Faster Payments.",
      "type" : "object",
      "required" : [ "accountNumber", "sortCode" ],
      "properties" : {
        "accountNumber" : {
          "minLength" : 8,
          "pattern" : "^[0-9]{8}$",
          "description" : "Account number, required for wire transfer over Faster Payments.",
          "type" : "string",
          "maxLength" : 8
        },
        "sortCode" : {
          "minLength" : 6,
          "pattern" : "^[0-9]{6}$",
          "description" : "Sort code, required for wire transfer over Faster Payments.",
          "type" : "string",
          "maxLength" : 6
        }
      }
    },
    "Beneficiary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BasicBeneficiary"
      }, {
        "type" : "object",
        "required" : [ "id", "relatedOperationBatches", "state" ],
        "properties" : {
          "relatedOperationBatches" : {
            "description" : "The object representing the list of batch IDs and the operations that occurred for each batch.",
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/BeneficiaryOperationBatchId"
            }
          },
          "id" : {
            "pattern" : "^[0-9]+$",
            "description" : "The unique identifier of a Beneficiary.",
            "type" : "string"
          },
          "state" : {
            "$ref" : "#/definitions/BeneficiaryState"
          },
          "validationFailure" : {
            "$ref" : "#/definitions/BeneficiaryValidationFailure"
          }
        }
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Beneficiary"
    },
    "Email" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Email",
      "description" : "E-mail Address of the user",
      "type" : "string"
    },
    "OutgoingWireTransferState" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.OutgoingWireTransferState",
      "description" : "The state of the Outgoing wire transfer transaction, as follows:\n  - INVALID: The wire transfer has failed initial validation checks.\n  - PENDING_CHALLENGE: The wire transfer requires the completion of a transaction confirmation challenge before it can be submitted.\n  - SUBMITTED: The wire transfer has been submitted to the sending financial institution for processing.\n  - REJECTED: The wire transfer that was submitted was rejected.\n  - APPROVED: The wire transfer that was submitted has been approved and is being processed by the sending financial institution.\n  - FAILED: There was an issue with the wire transfer, and the transaction has failed.\n  - COMPLETED: The requested funds have been sent from the source instrument.\n  - RETURNED: The wire transfer has been returned to the sender.\n  - SCHEDULED: The wire transfer will be executed at the scheduled time.\n  - CANCELLED: The scheduled wire transfer has been cancelled.\n",
      "type" : "string"
    },
    "InstrumentState" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.InstrumentState",
      "description" : "The state of the instrument indicating what it can and cannot do as follows:\n  - ACTIVE: The instrument is in an active state and can be used in transactions.\n  - BLOCKED: The instrument is temporarily blocked and cannot be used. Any funds on the instrument are also frozen. The `blockedReason` provides more information as to why it was blocked.\n  - DESTROYED: The instrument has been permanently destroyed. The `destroyReason` provides more information as to why it was destroyed.\n",
      "type" : "string"
    },
    "DigitalWallets" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.DigitalWallets",
      "type" : "object",
      "properties" : {
        "walletsEnabled" : {
          "description" : "Indicates whether the card is enabled for tokenisation in a digital wallet.",
          "type" : "boolean"
        },
        "artworkReference" : {
          "description" : "The artwork reference that will be used if the card is enabled for tokenisation in a digital wallet.",
          "type" : "string"
        },
        "pushProvisioningEnabled" : {
          "description" : "Indicates whether the card is enabled for push provisioning in a digital wallet.",
          "type" : "boolean"
        }
      }
    },
    "CreatedCorporate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Corporate"
      }, {
        "type" : "object",
        "required" : [ "rootUser" ],
        "properties" : {
          "rootUser" : {
            "$ref" : "#/definitions/CreatedCorporateRootUser"
          }
        }
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.CreatedCorporate"
    },
    "DeliveryTrackingMethod" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.DeliveryTrackingMethod",
      "description" : "The delivery tracking method for tracking the physical card's delivery status.",
      "type" : "string"
    },
    "Send" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Send",
      "type" : "object",
      "required" : [ "creationTimestamp", "destinationAmount", "id", "profileId", "source", "state", "transactionAmount" ],
      "properties" : {
        "scheduledTimestamp" : {
          "$ref" : "#/definitions/ScheduledTimestamp"
        },
        "cancellationReason" : {
          "$ref" : "#/definitions/TransactionCancellationReason"
        },
        "sourceFee" : {
          "type" : "object"
        },
        "destination" : {
          "description" : "The destination managed account or card to where the funds were sent.",
          "type" : "object"
        },
        "description" : {
          "pattern" : "^[a-zA-Z0-9\\\\/\\\\-?:().$_,'+\\\\s#=!\\\"%&*<>;\\\\{@\\\\r\\\\n]*$",
          "description" : "The description details that are passed to the beneficiary.",
          "type" : "string",
          "maxLength" : 255
        },
        "source" : {
          "$ref" : "#/definitions/InstrumentId"
        },
        "destinationFee" : {
          "type" : "object"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "transactionAmount" : {
          "type" : "object"
        },
        "creationTimestamp" : {
          "format" : "int64",
          "description" : "The time when the transaction was created, expressed in Epoch timestamp using millisecond precision.",
          "type" : "integer"
        },
        "id" : {
          "pattern" : "^[0-9]+$",
          "description" : "The unique identifier of a send transaction.",
          "type" : "string"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "state" : {
          "$ref" : "#/definitions/SendState"
        },
        "challengeExemptionReason" : {
          "$ref" : "#/definitions/ChallengeExemptionReason"
        },
        "destinationAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "executionTimestamp" : {
          "$ref" : "#/definitions/ExecutionTimestamp"
        }
      }
    },
    "Industry" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Industry",
      "description" : "The industry of the identity.",
      "type" : "string"
    },
    "SendBulkCreateResponse" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SendBulkCreateResponse",
      "type" : "object",
      "required" : [ "response" ],
      "properties" : {
        "response" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "BulkProcess" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BulkProcess",
      "type" : "object",
      "properties" : {
        "bulkId" : {
          "description" : "The bulk id of the bulk process",
          "type" : "string"
        },
        "submittedItemsCount" : {
          "format" : "int32",
          "description" : "The number of bulk operations in the bulk process",
          "type" : "integer"
        },
        "status" : {
          "description" : "\"SUBMITTED\": the data for the bulk process operations has been persisted and bulk process is ready for execution. A bulk process in this status can be executed or submitted. This is the initial state for a bulk process\n\n\"RUNNING\" :  the bulk process is currently being executed by the system\n\n\"COMPLETED\"  : the execution of the bulk process is complete and all bulk operations of the bulk process were executed successfully. This is a final state for the bulk process \n\n\"PARTIALLY_COMPLETED\"  the execution of the bulk process is complete and some of the bulk operations of the bulk process failed. This is a final state for the bulk process\n\n\"FAILED\" : none of the operations of the bulk process have executed. This is a final state for the bulk process\n\n\"PAUSED\"  : the execution of bulk process has been paused through the Pause bulk process operation  Execution can be resumed through Resume bulk operation\n\n\"CANCELLED\" : the execution of bulk process has been cancelled through Cancel bulk operation. This is a final state for the bulk process\n",
          "type" : "string"
        }
      }
    },
    "SpendLimit" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SpendLimit",
      "type" : "object",
      "required" : [ "interval", "value" ],
      "properties" : {
        "interval" : {
          "$ref" : "#/definitions/SpendLimitInterval"
        },
        "value" : {
          "$ref" : "#/definitions/CurrencyAmount"
        }
      }
    },
    "ProfileLevelSpendRules" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CommonLevelSpendRules"
      }, {
        "type" : "object",
        "properties" : {
          "authForwardingEnabled" : {
            "description" : "Indicates if auth forwarding is enabled on profile level",
            "type" : "boolean"
          }
        }
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ProfileLevelSpendRules"
    },
    "SyntaxError" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SyntaxError",
      "description" : "Is returned as part of an HTTP error response whenever a syntax error is detected. A list of the fields together with their syntax error will be provided.",
      "type" : "object",
      "properties" : {
        "invalidFields" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "fieldName" : {
                "type" : "string"
              },
              "params" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "error" : {
                "type" : "string",
                "enum" : [ "REQUIRED", "HAS_TEXT", "REQUIRES", "SIZE", "RANGE", "IN", "NOT_IN", "REGEX", "EXACTLY", "AT_LEAST", "AT_MOST", "ALL_OR_NONE" ]
              }
            }
          }
        }
      }
    },
    "SensitivePin" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SensitivePin",
      "description" : "The PIN used for in-person transactions done with physical cards.\n\nUnless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card's PIN will be tokenised.\n\nTo show the PIN to your user, you need to embed the Display Card PIN UI Component in your application. This accepts the tokenised PIN and shows the plain text PIN to the user on screen.\n",
      "type" : "object",
      "required" : [ "value" ],
      "properties" : {
        "value" : {
          "minLength" : 4,
          "type" : "string",
          "maxLength" : 24
        }
      }
    },
    "StatementEntryState" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.StatementEntryState",
      "description" : "The transaction entry state, as follows:\n  - PENDING: The transaction has started and some of the fund movements have completed, however additional fund movements are still pending to finalise the transaction.\n  - COMPLETED: All fund movements for a transaction have completed.\n",
      "type" : "string"
    },
    "PasswordInfo" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.PasswordInfo",
      "description" : "Additional information related to the user's password.",
      "type" : "object",
      "required" : [ "identityId" ],
      "properties" : {
        "expiryDate" : {
          "format" : "int64",
          "description" : "The millisecond timestamp indicating when the password will expire. If 0, then this password will not expire.",
          "type" : "integer"
        },
        "identityId" : {
          "$ref" : "#/definitions/IdentityId"
        }
      }
    },
    "ExecutionTimestamp" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ExecutionTimestamp",
      "description" : "The epoch timestamp at which the transaction was executed, transitioning to a final state such as COMPLETED, REJECTED, or FAILED.",
      "type" : "string"
    },
    "ConsumerSourceOfFunds" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ConsumerSourceOfFunds",
      "description" : "The consumer's source of funds.",
      "type" : "string"
    },
    "BeneficiaryState" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BeneficiaryState",
      "type" : "string"
    },
    "BulkProcessConflict" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BulkProcessConflict",
      "type" : "object",
      "properties" : {
        "errorCode" : {
          "$ref" : "#/definitions/BulkProcessConflictErrorCode"
        }
      }
    },
    "CreatedCorporateRootUser" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CorporateRootUser"
      }, {
        "type" : "object",
        "required" : [ "passwordAlreadySet" ],
        "properties" : {
          "passwordAlreadySet" : {
            "description" : "When the corporate root user is a single email multiple identities user, this field returns true, indicating that there is no need to call the `passwordCreate` operation for this user.",
            "type" : "boolean"
          }
        }
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.CreatedCorporateRootUser"
    },
    "PrepaidModeCardRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManagedCardRequest"
      }, {
        "type" : "object",
        "required" : [ "currency" ],
        "properties" : {
          "currency" : {
            "$ref" : "#/definitions/Currency"
          }
        }
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.PrepaidModeCardRequest"
    },
    "AvailableToSpend" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.AvailableToSpend",
      "type" : "object",
      "properties" : {
        "interval" : {
          "$ref" : "#/definitions/SpendLimitInterval"
        },
        "value" : {
          "$ref" : "#/definitions/CurrencyAmount"
        }
      }
    },
    "OutgoingWireTransfer" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.OutgoingWireTransfer",
      "type" : "object",
      "required" : [ "creationTimestamp", "id", "profileId", "sourceInstrument", "state", "transferAmount" ],
      "properties" : {
        "scheduledTimestamp" : {
          "$ref" : "#/definitions/ScheduledTimestamp"
        },
        "cancellationReason" : {
          "$ref" : "#/definitions/TransactionCancellationReason"
        },
        "transferAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "destination" : {
          "type" : "object"
        },
        "description" : {
          "description" : " Transaction description.",
          "type" : "string",
          "maxLength" : 50
        },
        "type" : {
          "$ref" : "#/definitions/OutgoingWireTransferType"
        },
        "sourceInstrument" : {
          "description" : "The source managed account from where the funds were taken.",
          "type" : "object",
          "properties" : {
            "id" : {
              "pattern" : "^[0-9]+$",
              "type" : "string"
            },
            "type" : {
              "type" : "string",
              "enum" : [ "managed_accounts" ]
            }
          }
        },
        "rejectedInfo" : {
          "$ref" : "#/definitions/OutgoingWireTransferRejectedInfo"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "creationTimestamp" : {
          "format" : "int64",
          "description" : "The time when the transaction was created, expressed in Epoch timestamp using millisecond precision.",
          "type" : "integer"
        },
        "id" : {
          "pattern" : "^[0-9]+$",
          "description" : "The unique identifier of an Outgoing Wire Transfer transaction.",
          "type" : "string"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "state" : {
          "$ref" : "#/definitions/OutgoingWireTransferState"
        },
        "challengeExemptionReason" : {
          "$ref" : "#/definitions/ChallengeExemptionReason"
        },
        "executionTimestamp" : {
          "$ref" : "#/definitions/ExecutionTimestamp"
        }
      }
    },
    "SensitiveCvv" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SensitiveCvv",
      "description" : "The CVV of the card.\n\nUnless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card's CVV will be tokenised.\n\nTo show the card's CVV to your user, you need to embed the CVV UI Component in your application. This accepts the tokenised CVV and shows the plain text CVV number to the user on screen.\n",
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string",
          "maxLength" : 3
        }
      }
    },
    "AllLevelSpendRules" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.AllLevelSpendRules",
      "type" : "object",
      "properties" : {
        "allowAtm" : {
          "description" : "Indicates if an ATM Withdrawal transaction is allowed on the card. This field is deprecated - use \"cardLevelSpendRules\".\"allowAtm\" instead.",
          "type" : "boolean"
        },
        "profileLevelSpendRules" : {
          "$ref" : "#/definitions/ProfileLevelSpendRules"
        },
        "allowECommerce" : {
          "description" : "Indicates if an online transaction is allowed on the card. This field is deprecated - use \"cardLevelSpendRules\".\"allowECommerce\" instead.",
          "type" : "boolean"
        },
        "cardLevelSpendRules" : {
          "$ref" : "#/definitions/CardLevelSpendRules"
        },
        "blockedMerchantCategories" : {
          "description" : "Blacklist MCC: A list of disallowed merchant category codes (MCCs). If the MCC matches, then the transaction will be declined. If an MCC is also in the allowed list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"blockedMerchantCategories\" instead.",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "allowedMerchantIds" : {
          "description" : "Whitelist Merchant Id: A list of allowed merchant IDs. If the Merchant Id does not match, then the transaction will be declined. If a Merchant Id is also provided in the blocked list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"allowedMerchantIds\" instead.",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "blockedMerchantCountries" : {
          "description" : "Blacklist Merchant Country: A list of disallowed merchant countries, in ISO 3166-1 alpha-2 format. If the Merchant country matches, then the transaction will be declined. If a Merchant Country is also in the allowed list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"blockedMerchantCountries\" instead.",
          "type" : "array",
          "items" : {
            "minLength" : 2,
            "pattern" : "^[A-Z]{2}$",
            "type" : "string",
            "maxLength" : 2
          }
        },
        "allowCashback" : {
          "description" : "Indicates if a cashback transaction at a physical terminal is allowed on the card. This field is deprecated - use \"cardLevelSpendRules\".\"allowCashback\" instead.",
          "type" : "boolean"
        },
        "spendLimit" : {
          "description" : "The total amount of funds that can be spent using this card, in a given time interval. This field is deprecated - use \"cardLevelSpendRules\".\"spendLimit\" instead.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SpendLimit"
          }
        },
        "blockedMerchantIds" : {
          "description" : "Blacklist Merchant Id: A list of disallowed merchant IDs. If the Merchant Id matches, then the transaction will be declined. If a Merchant Id is also in the allowed list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"blockedMerchantIds\" instead.",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "maxTransactionAmount" : {
          "format" : "int64",
          "description" : "The maximum transaction amount, in card currency, that is allowed. If the transaction amount is greater than this value, then the transaction will be declined. Omit this, or set to 0 if no maximum transaction amount is to be set. This field is deprecated - use \"cardLevelSpendRules\".\"maxTransactionAmount\" instead.",
          "type" : "integer"
        },
        "allowedMerchantCategories" : {
          "description" : "Whitelist MCC: A list of allowed merchant category codes (MCCs). If the MCC does not match, then the transaction will be declined. If an MCC is also in the blocked list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"allowedMerchantCategories\" instead.",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "allowedMerchantCountries" : {
          "description" : "Whitelist Merchant Country: A list of allowed merchant countries, in ISO 3166-1 alpha-2 format. If the Merchant country does not match, then the transaction will be declined. If a Merchant Country is also provided in the blocked list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"allowedMerchantCountries\" instead.",
          "type" : "array",
          "items" : {
            "minLength" : 2,
            "pattern" : "^[A-Z]{2}$",
            "type" : "string",
            "maxLength" : 2
          }
        },
        "identityLevelSpendRules" : {
          "$ref" : "#/definitions/IdentityLevelSpendRules"
        },
        "minTransactionAmount" : {
          "format" : "int64",
          "description" : "The minimum transaction amount, in card currency, that is allowed. If the transaction amount is less than this value, then the transaction will be declined. Omit this, or set to 0 if no maximum transaction amount is to be set. This field is deprecated - use \"cardLevelSpendRules\".\"minTransactionAmount\" instead.",
          "type" : "integer"
        },
        "allowCreditAuthorisations" : {
          "description" : "Indicates if a the card can receive a credit transaction. This field is deprecated - use \"cardLevelSpendRules\".\"allowCashback\" instead.",
          "type" : "boolean"
        },
        "allowContactless" : {
          "description" : "Indicates if a contactless transaction is allowed on the card. This field is deprecated - use \"cardLevelSpendRules\".\"allowContactless\" instead.",
          "type" : "boolean"
        }
      }
    },
    "IdentityLevelSpendRules" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CommonLevelSpendRules"
      }, {
        "type" : "object",
        "properties" : {
          "minTransactionAmount" : {
            "format" : "int64",
            "description" : "The minimum transaction amount, in card currency, that is allowed. If the transaction amount is less than this value, then the transaction will be declined. Omit this, or set to 0 if no maximum transaction amount is to be set.",
            "type" : "integer"
          },
          "maxTransactionAmount" : {
            "format" : "int64",
            "description" : "The maximum transaction amount, in card currency, that is allowed. If the transaction amount is greater than this value, then the transaction will be declined.",
            "type" : "integer"
          }
        }
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.IdentityLevelSpendRules"
    },
    "SendState" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SendState",
      "description" : "The state of the send transaction, as follows:\n - INVALID: The send transaction has failed initial validation checks. \n - INITIALISED: The initial state of a send transaction when SCA is not required.\n - PENDING_CHALLENGE: The send transaction requires the completion of a transaction confirmation challenge before it can be submitted.\n - PENDING: The send transaction has exceeded the destination limit and is pending treasury approval.\n - APPROVED: The send transaction that was submitted has been approved.\n - COMPLETED: The requested funds have been sent from the source instrument.\n - REJECTED: The send transaction that was submitted was rejected.\n - FAILED: There was an issue with the send transaction, and the transaction has failed.\n - RETURNED: The send transaction has been returned to the sender.\n - SCHEDULED: The send transaction will be executed at the scheduled time.\n - CANCELLED: The scheduled send transaction has been cancelled.\n",
      "type" : "string"
    },
    "BulkProcessOperation" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BulkProcessOperation",
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "string"
        },
        "sequence" : {
          "format" : "int32",
          "type" : "integer"
        },
        "path" : {
          "type" : "string"
        },
        "method" : {
          "type" : "string"
        },
        "payload" : {
          "type" : "string"
        },
        "errorMessage" : {
          "type" : "string"
        },
        "operationId" : {
          "description" : "Id of a specific bulk operation",
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        }
      }
    },
    "InstrumentId" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.InstrumentId",
      "type" : "object",
      "required" : [ "id", "type" ],
      "properties" : {
        "id" : {
          "$ref" : "#/definitions/Id"
        },
        "type" : {
          "$ref" : "#/definitions/InstrumentType"
        }
      }
    },
    "CurrencyAmount" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.CurrencyAmount",
      "description" : "The object representing a monetary amount in a particular currency.",
      "type" : "object",
      "required" : [ "amount", "currency" ],
      "properties" : {
        "amount" : {
          "format" : "int64",
          "description" : "The monetary amount, scaled to the lowest denomination of the currency.\n\nExample, an amount of 1000 for a EUR currency is actually 1000 Euro cents or EUR 10.00.\n",
          "type" : "integer"
        },
        "currency" : {
          "$ref" : "#/definitions/Currency"
        }
      }
    },
    "BulkId" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BulkId",
      "type" : "string"
    },
    "Nonce" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Nonce",
      "description" : "A randomly generated one-time use code.",
      "type" : "string"
    },
    "BulkProcessConflictErrorCode" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BulkProcessConflictErrorCode",
      "type" : "string"
    },
    "BeneficiaryOperationBatchId" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BeneficiaryOperationBatchId",
      "type" : "object",
      "required" : [ "batchId", "operation" ],
      "properties" : {
        "batchId" : {
          "pattern" : "^[0-9]+$",
          "description" : "The unique identifier of a Beneficiary.",
          "type" : "string"
        },
        "operation" : {
          "$ref" : "#/definitions/BeneficiaryBatchOperation"
        }
      }
    },
    "CompanyPosition" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.CompanyPosition",
      "description" : "The company position of the Corporate Root User.",
      "type" : "string"
    },
    "OutgoingWireTransferRejectedInfo" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.OutgoingWireTransferRejectedInfo",
      "description" : "Additional info when the outgoing wire transfer has been rejected, as follows:\n  - SYSTEM: The wire transfer was rejected by the system.\n  - USER: The wire transfer was rejected by the user.\n",
      "type" : "string"
    },
    "TokenResponse" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.TokenResponse",
      "type" : "object",
      "properties" : {
        "token" : {
          "description" : "An authorisation token to be used in the Authorization header for secured operations.",
          "type" : "string"
        }
      }
    },
    "InstrumentDetailsBeneficiary" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.InstrumentDetailsBeneficiary",
      "description" : "Represents a Weavr beneficiary instrument typically used in Send transactions.",
      "type" : "object",
      "required" : [ "instrument" ],
      "properties" : {
        "instrument" : {
          "$ref" : "#/definitions/InstrumentId"
        }
      }
    },
    "ManagedInstrumentBalance" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ManagedInstrumentBalance",
      "description" : "Instruments with funds have 2 balances, the `availableBalance` indicating the funds that are available for transactions such as purchases, and the `actualBalance` indicating the funds that are actually on the instrument.",
      "type" : "object",
      "properties" : {
        "actualBalance" : {
          "format" : "int64",
          "description" : "The funds that are actually on the instrument. Funds that are blocked or pending, due to for example, a purchase authorisation or a pending deposit, are included in the actual balance.",
          "type" : "integer"
        },
        "availableBalance" : {
          "format" : "int64",
          "description" : "The funds available for transactions on the instrument. Funds that are blocked or pending are not included in the available balance.",
          "type" : "integer"
        }
      }
    },
    "DebitModeCardRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManagedCardRequest"
      }, {
        "type" : "object",
        "required" : [ "parentManagedAccountId" ],
        "properties" : {
          "parentManagedAccountId" : {
            "pattern" : "^[0-9]+$",
            "description" : "Id of the managed account holding funds which the managed card will access, up to a configurable spend limit.",
            "type" : "string"
          }
        }
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.DebitModeCardRequest"
    },
    "BankAccountDetailsBeneficiary" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BankAccountDetailsBeneficiary",
      "description" : "Represent the beneficiary bank account typically used in Outgoing Wire Transfer transactions.",
      "type" : "object",
      "required" : [ "bankAccountDetails" ],
      "properties" : {
        "address" : {
          "minLength" : 1,
          "description" : "The beneficiary's address.",
          "type" : "string",
          "maxLength" : 150
        },
        "bankAccountDetails" : {
          "description" : "Details of the beneficiary bank account, depending on the type of transfer chosen.",
          "type" : "object"
        },
        "bankName" : {
          "description" : "The beneficiary's bank name.",
          "type" : "string"
        },
        "bankAddress" : {
          "minLength" : 1,
          "description" : "The beneficiary's bank address.",
          "type" : "string",
          "maxLength" : 150
        },
        "bankCountry" : {
          "minLength" : 2,
          "pattern" : "^[A-Z]{2}$",
          "description" : "The beneficiary's bank country in ISO 3166 alpha-2 format.",
          "type" : "string",
          "maxLength" : 2
        }
      }
    },
    "BulkProcessOperationStatus" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BulkProcessOperationStatus",
      "type" : "string"
    },
    "CardHolderPresent" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.CardHolderPresent",
      "type" : "string"
    },
    "PhysicalCardActivationCode" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.PhysicalCardActivationCode",
      "type" : "string"
    },
    "ConsumerBeneficiaryType" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ConsumerBeneficiaryType",
      "type" : "object",
      "required" : [ "fullName" ],
      "properties" : {
        "fullName" : {
          "description" : "The person beneficiary name. The allowed length and pattern is dependent on the beneficiary details type:\n\n`InstrumentDetailsBeneficiary` or `BankAccountDetailsBeneficiary` with `SepaBankDetails`: >= `1` character and <= `150` characters\n\n`BankAccountDetailsBeneficiary` with `FasterPaymentsBankDetails`: >= `1` character and <= `140` characters with a pattern of `^[a-zA-Z0-9\\/\\-?:().,’+\\s#=!\"%&*<>;\\{@\\r\\n]*$`\n(please note that the `’` symbol is the unicode value U+2019 (right single quotation mark) and not the unicode value U+0027 (apostrophe))\n",
          "type" : "string"
        }
      }
    },
    "BeneficiaryId" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BeneficiaryId",
      "type" : "object",
      "required" : [ "beneficiaryId" ],
      "properties" : {
        "beneficiaryId" : {
          "$ref" : "#/definitions/Id"
        }
      }
    },
    "TokenError" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.TokenError",
      "description" : "The used token is expired or not found",
      "type" : "object",
      "properties" : {
        "errorCode" : {
          "type" : "string",
          "enum" : [ "TOKEN_EXPIRED", "TOKEN_NOT_FOUND" ]
        }
      }
    },
    "SCAFactorStatus" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SCAFactorStatus",
      "description" : "The state of the factor type.\n- `PENDING_VERIFICATION` : The user has started the enrolment process but still hasn't completed enrolment. Challenges cannot be used before they are verified.\n- `ACTIVE` : The user has successfully completed enrolment and the challenge can be used to verify transactions.\n- `INACTIVE` : The user has rejected the enrolment.\n",
      "type" : "string"
    },
    "VerificationCode" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.VerificationCode",
      "description" : "A randomly generated one-time use code used to verify the user's email address or mobile number.",
      "type" : "string"
    },
    "User" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.User",
      "type" : "object",
      "required" : [ "active", "email", "id", "identity", "name", "surname" ],
      "properties" : {
        "identity" : {
          "$ref" : "#/definitions/IdentityId"
        },
        "surname" : {
          "description" : "The last name of the user.",
          "type" : "string",
          "maxLength" : 100
        },
        "name" : {
          "description" : "The first name of the user.",
          "type" : "string",
          "maxLength" : 100
        },
        "mobile" : {
          "$ref" : "#/definitions/Mobile"
        },
        "active" : {
          "description" : "The state of the user. If the `active` attribute is false, then the user will not be able to log in.",
          "type" : "boolean"
        },
        "dateOfBirth" : {
          "$ref" : "#/definitions/Date"
        },
        "id" : {
          "pattern" : "^[0-9]+$",
          "description" : "The unique identifier of the user.",
          "type" : "string"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "email" : {
          "$ref" : "#/definitions/Email"
        }
      }
    },
    "BeneficiaryTrustLevel" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BeneficiaryTrustLevel",
      "description" : "The value that determines whether a Beneficiary is trusted or not.",
      "type" : "string"
    },
    "Corporate" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Corporate",
      "type" : "object",
      "required" : [ "acceptedTerms", "baseCurrency", "company", "creationTimestamp", "id", "ipAddress", "profileId", "rootUser" ],
      "properties" : {
        "rootUser" : {
          "$ref" : "#/definitions/CorporateRootUser"
        },
        "sourceOfFundsOther" : {
          "description" : "Description of source of funds in case `OTHER` was chosen.",
          "type" : "string"
        },
        "acceptedTerms" : {
          "description" : "Must be set to *true* to indicate that the root user has accepted the terms and conditions.",
          "type" : "boolean"
        },
        "ipAddress" : {
          "minLength" : 5,
          "description" : "The IP address of the user doing the registration.",
          "type" : "string",
          "maxLength" : 45
        },
        "industry" : {
          "$ref" : "#/definitions/Industry"
        },
        "sourceOfFunds" : {
          "$ref" : "#/definitions/CorporateSourceOfFunds"
        },
        "baseCurrency" : {
          "$ref" : "#/definitions/Currency"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "creationTimestamp" : {
          "format" : "int64",
          "description" : "The time when the Corporate was created, expressed in Epoch timestamp using millisecond precision.",
          "type" : "integer"
        },
        "company" : {
          "type" : "object",
          "properties" : {
            "registeredAddress" : {
              "$ref" : "#/definitions/LegalAddress"
            },
            "incorporatedOn" : {
              "$ref" : "#/definitions/Date"
            },
            "registrationNumber" : {
              "minLength" : 1,
              "description" : "The company registration number.",
              "type" : "string",
              "maxLength" : 20
            },
            "name" : {
              "description" : "The registered name of the company.",
              "type" : "string",
              "maxLength" : 100
            },
            "type" : {
              "$ref" : "#/definitions/CompanyType"
            },
            "businessAddress" : {
              "$ref" : "#/definitions/Address"
            },
            "countryOfRegistration" : {
              "minLength" : 2,
              "pattern" : "^[A-Z]+$",
              "description" : "The country of company registration in ISO 3166 alpha-2.",
              "type" : "string",
              "maxLength" : 2
            }
          }
        },
        "id" : {
          "$ref" : "#/definitions/IdentityId"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "feeGroup" : {
          "description" : "Fee groups allow the possibility to charge different fees to users under the same profile. If fee groups are not required, ignore this field.",
          "type" : "string"
        }
      }
    },
    "BulkCardDelivery" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BulkCardDelivery",
      "description" : "Bulk delivery is available for deliveryMethods REGISTERED_MAIL or COURIER.\nAll cards marked as bulk and ordered within the fulfilment centre’s dispatch window will be sent in bulk. Delivery address must be identical for all orders. contactNumber in the deliveryAddress object is mandatory when bulk is selected. Maximum number of cards delivered in a single box/packet is REGISTERED_MAIL = 90, COURIER = 200.\n",
      "type" : "boolean"
    },
    "OutgoingWireTransferBeneficiary" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.OutgoingWireTransferBeneficiary",
      "description" : "Details of the beneficiary of the outgoing wire transfer.",
      "type" : "object",
      "required" : [ "bankAccountDetails", "name" ],
      "properties" : {
        "address" : {
          "minLength" : 1,
          "description" : "The beneficiary’s address. For `SEPA`, an extended character set is accepted to cater for all European languages. If `SEPA` does not support a particular character, it is automatically converted to an acceptable alternative, in line with `SEPA` scheme guidance.\n",
          "type" : "string",
          "maxLength" : 150
        },
        "bankAccountDetails" : {
          "description" : "Details of the beneficiary bank account, depending on the type of transfer chosen.",
          "type" : "object"
        },
        "name" : {
          "description" : "The beneficiary's full name. The allowed length and pattern is dependent on the bank account details type:\n\n`SepaBankDetails`: >= `1` character and <= `150` characters. An extended character set is accepted to cater for all European languages. If `SEPA` does not support a particular character, it is automatically converted to an acceptable alternative, in line with `SEPA` scheme guidance.\n\n`FasterPaymentsBankDetails`: >= `1` character and <= `140` characters with a pattern of `^[a-zA-Z0-9\\/\\-?:().,’+\\s#=!\"%&*<>;\\{@\\r\\n]*$`\n(please note that the `’` symbol is the unicode value U+2019 (right single quotation mark) and not the unicode value U+0027 (apostrophe))\n",
          "type" : "string"
        },
        "bankName" : {
          "description" : "The beneficiary's bank name.",
          "type" : "string"
        },
        "bankAddress" : {
          "minLength" : 1,
          "description" : "The beneficiary's bank address.",
          "type" : "string",
          "maxLength" : 150
        },
        "bankCountry" : {
          "minLength" : 2,
          "pattern" : "^[A-Z]{2}$",
          "description" : "The beneficiary's bank country in ISO 3166 alpha-2 format.",
          "type" : "string",
          "maxLength" : 2
        }
      }
    },
    "BulkProcessMode" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BulkProcessMode",
      "description" : "ON_FAILURE_STOP : the execution of the bulk process stops after the first bulk operation that fails (operation returns a 4xx or 5xx response code).\nON_FAILURE_CONTINUE: the execution of the bulk process resumes as normal even when any of the bulk operations fail.\n",
      "type" : "string"
    },
    "SpendLimitUpdateMethod" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SpendLimitUpdateMethod",
      "description" : "The spend limit update method to apply. Currently supported:\n  - OVERWRITE: (default option if nothing selected). Overwrites the previous values for the spendLimit object i.e. sets new limits\n  - INCREMENT : This will increase the existing value of the spend limit by the amount input the value field. If used in conjunction with an ALWAYS interval, this can be used to increment a spend limit on a periodic basis (controlled by you, e.g. monthly), and means that any 'unused' balance from the previous period will still available to spend. See examples in our documentation\n",
      "type" : "string"
    },
    "CardRenewalType" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.CardRenewalType",
      "description" : "Indicates how the card will be handled once it is close to expiring.\n  - RENEW: The card will be automatically renewed, keeping the same card number but with a new expiry date and CVV.\n  - NO_RENEW: Once the expiry date is reached, the card is destroyed.\n",
      "type" : "string"
    },
    "ManagedAccountIBAN" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ManagedAccountIBAN",
      "type" : "object",
      "required" : [ "bankAccountDetails", "state" ],
      "properties" : {
        "bankAccountDetails" : {
          "description" : "A list of bank account details associated with the IBAN.\nMultiple details can be provided if multiple IBAN providers are supported by your payment model.",
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "beneficiaryBank" : {
                "description" : "The beneficiary bank name to be used when initiating a deposit onto the IBAN.",
                "type" : "string"
              },
              "beneficiaryNameAndSurname" : {
                "description" : "The beneficiary name and surname details to be used when initiating a deposit onto the IBAN.",
                "type" : "string"
              },
              "paymentReference" : {
                "description" : "A reference required by the partner bank to execute a deposit on the managed account.\n\n\nIf provided, make sure that this is included as part of the wire transfer details when initiating a deposit.\n",
                "type" : "string"
              },
              "beneficiaryBankAddress" : {
                "description" : "The beneficiary bank address to be used when initiating a deposit onto the IBAN.",
                "type" : "string"
              },
              "details" : {
                "description" : "The bank details required to initiate a deposit on the managed account.\n\nThe details required to deposit on the IBAN vary depending on the wire transfer channel that will be used.\n",
                "type" : "object"
              }
            }
          }
        },
        "state" : {
          "description" : "The state of the Managed Account's IBAN as follows:\n  - UNALLOCATED: The Managed Account has never been assigned an IBAN. Use the _managedAccountsIBANUpgrade_ operation to assign an IBAN to a Managed Account.\n  - PENDING_ALLOCATION: The IBAN is being allocated to the Managed Account.\n  - ALLOCATED: An IBAN is allocated to the Managed Account.\n",
          "type" : "string",
          "enum" : [ "UNALLOCATED", "PENDING_ALLOCATION", "ALLOCATED" ]
        }
      }
    },
    "OutgoingWireTransferBulkCreateRequest" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.OutgoingWireTransferBulkCreateRequest",
      "type" : "object",
      "required" : [ "outgoingWireTransfers" ],
      "properties" : {
        "outgoingWireTransfers" : {
          "description" : "The object representing the outgoing wire transfers' details.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OutgoingWireTransferCreateRequest"
          }
        }
      }
    },
    "ScaledAmount" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ScaledAmount",
      "description" : "A floating point number, represented as a value and its scale. Its actual value can be obtained using the equation: value * pow(10, -scale).",
      "type" : "object",
      "properties" : {
        "scale" : {
          "format" : "int32",
          "type" : "integer"
        },
        "value" : {
          "format" : "int64",
          "type" : "integer"
        }
      }
    },
    "BulkProcessExecute" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BulkProcessExecute",
      "type" : "object",
      "properties" : {
        "mode" : {
          "$ref" : "#/definitions/BulkProcessMode"
        }
      }
    },
    "ManagedCard" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ManagedCard",
      "type" : "object",
      "required" : [ "cardBrand", "cardLevelClassification", "creationTimestamp", "currency", "expiryPeriodMonths", "externalHandle", "friendlyName", "id", "mode", "nameOnCard", "profileId", "renewalType", "state", "type" ],
      "properties" : {
        "expiryMmyy" : {
          "minLength" : 4,
          "description" : "The end date of this card, in MMYY format.",
          "type" : "string",
          "maxLength" : 4
        },
        "externalHandle" : {
          "description" : "A uniquely generated code used to identify a card.\n\nThis code is to be used instead of the sensitive card number in order to refer to a card when opening a support ticket.\n",
          "type" : "string"
        },
        "renewalTimestamp" : {
          "format" : "int64",
          "description" : "The timestamp when the card will be renewed, expressed in Epoch timestamp using millisecond precision.",
          "type" : "integer"
        },
        "externalData" : {
          "$ref" : "#/definitions/ExternalData"
        },
        "threeDSecureAuthConfig" : {
          "$ref" : "#/definitions/ThreeDSecureAuthConfig"
        },
        "type" : {
          "description" : "The type of card:\n  - VIRTUAL: Not a printed or embedded card. The card can be used online or added to digital wallets.\n  - PHYSICAL: A physical card that can be printed and shipped to your customers or embedded in a Wearable device. It can be used at physical terminals.\n",
          "type" : "string",
          "enum" : [ "VIRTUAL", "PHYSICAL" ]
        },
        "cardholderMobileNumber" : {
          "minLength" : 5,
          "pattern" : "^\\\\+[0-9]+$",
          "description" : "The mobile number including country code of the card holder, needed for 3DS challenge.",
          "type" : "string",
          "maxLength" : 20
        },
        "startMmyy" : {
          "minLength" : 4,
          "pattern" : "^[0-9]*$",
          "description" : "The start date of this card, in MMYY format.",
          "type" : "string",
          "maxLength" : 4
        },
        "mode" : {
          "description" : "The mode with which this card was created:\n\n- A prepaid mode card has its own balance and can have funds transferred to or from it.\n- A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit.\n",
          "type" : "string"
        },
        "physicalCardDetails" : {
          "$ref" : "#/definitions/PhysicalCardDetails"
        },
        "authForwardingDefaultTimeoutDecision" : {
          "description" : "Default decision for auth forwarding on timeout",
          "type" : "string",
          "enum" : [ "APPROVE", "DECLINE" ]
        },
        "cardNumberLastFour" : {
          "minLength" : 4,
          "pattern" : "^[0-9]*$",
          "description" : "The last four digits of the card number.",
          "type" : "string",
          "maxLength" : 4
        },
        "nameOnCard" : {
          "pattern" : "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÒÓÔÕÖØŠÙÚÛÜŸÝĄĆČĎĘĹĽŁŃŇÑŐŔŚȘȚŤŰŹŻŽàáâãäåæçèéêëìíîïòóôõöøšùúûüÿýąćčďęĺľłńňñőŕśșțťűźżž\\\\-^. '-]*$",
          "description" : "The card holder’s name for the card. This may be verified by merchants when the card is used online. For Physical cards, this field will be printed on the card. The maximum characters allowed will depend on the design chosen and will be provided to you by Weavr when setting up your plastic cards.",
          "type" : "string",
          "maxLength" : 27
        },
        "cardLevelClassification" : {
          "description" : "The card classification determines whether the card is from Consumer or Corporate BINs.",
          "type" : "string",
          "enum" : [ "CONSUMER", "CORPORATE" ]
        },
        "creationTimestamp" : {
          "format" : "int64",
          "description" : "The timestamp when the card was created, expressed in Epoch timestamp using millisecond precision.",
          "type" : "integer"
        },
        "currency" : {
          "$ref" : "#/definitions/Currency"
        },
        "id" : {
          "pattern" : "^[0-9]+$",
          "description" : "The unique identifier of the card.",
          "type" : "string"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "state" : {
          "$ref" : "#/definitions/ManagedInstrumentState"
        },
        "cardBrand" : {
          "description" : "The card scheme, or brand of the card.",
          "type" : "string",
          "enum" : [ "MASTERCARD", "VISA" ]
        },
        "expiryPeriodMonths" : {
          "format" : "int32",
          "description" : "The validity timeframe of the card, in months.",
          "type" : "integer"
        },
        "friendlyName" : {
          "minLength" : 1,
          "description" : "The friendly name given to the card.",
          "type" : "string",
          "maxLength" : 50
        },
        "cvv" : {
          "$ref" : "#/definitions/SensitiveCvv"
        },
        "digitalWallets" : {
          "$ref" : "#/definitions/DigitalWallets"
        },
        "renewalType" : {
          "$ref" : "#/definitions/CardRenewalType"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "cardNumberFirstSix" : {
          "minLength" : 6,
          "pattern" : "^[0-9]*$",
          "description" : "The first six digits of the card number.",
          "type" : "string",
          "maxLength" : 6
        },
        "billingAddress" : {
          "$ref" : "#/definitions/BillingAddress"
        },
        "nameOnCardLine2" : {
          "pattern" : "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÒÓÔÕÖØŠÙÚÛÜŸÝĄĆČĎĘĹĽŁŃŇÑŐŔŚȘȚŤŰŹŻŽàáâãäåæçèéêëìíîïòóôõöøšùúûüÿýąćčďęĺľłńňñőŕśșțťűźżž\\\\-^. '-]*$",
          "description" : "Line 2 of the 'name on card' field. For Physical cards, this field will be printed on the card. The maximum characters allowed will depend on the design chosen and will be provided to you by Weavr when setting up your plastic cards.",
          "type" : "string",
          "maxLength" : 27
        },
        "cardNumber" : {
          "$ref" : "#/definitions/SensitiveCardNumber"
        }
      }
    },
    "TransactionCancelResponse" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.TransactionCancelResponse",
      "type" : "object",
      "required" : [ "id", "state" ],
      "properties" : {
        "errorCode" : {
          "description" : "Indicates the reason why the cancel operation could not be executed.\nMay be included in the response if the state is \"ERROR\".\n\n- \"GENERIC\": A generic error has occurred.\n- \"TRANSACTION_NOT_SCHEDULED\": The transaction is not in state SCHEDULED.\n- \"FORBIDDEN\": The current user is not allowed to access this transaction.\n- \"NOT_FOUND\": The transaction does not exist.\n",
          "type" : "string",
          "enum" : [ "GENERIC", "TRANSACTION_NOT_SCHEDULED", "FORBIDDEN", "NOT_FOUND" ]
        },
        "id" : {
          "pattern" : "^[0-9]+$",
          "description" : "The id of the transaction.",
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "ERROR" ]
        }
      }
    },
    "SensitivePassword" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SensitivePassword",
      "description" : "The user's password or passcode used to log in a user.\nPasswords must be:\n  - between 8 and 30 characters\n  - include a lowercase character\n  - include an uppercase character\n  - include a digit and a special character\n  - different from any of the 5 last such passwords used.\n\nFor non-PCI compliant integrations, the password submitted must be **tokenised**.\n",
      "type" : "object",
      "required" : [ "value" ],
      "properties" : {
        "value" : {
          "format" : "password",
          "type" : "string"
        }
      }
    },
    "ScheduledTimestamp" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.ScheduledTimestamp",
      "description" : "The epoch timestamp at which the transaction is scheduled to be executed.",
      "type" : "string"
    },
    "Error" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Error",
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "UpdateCardLevelSpendRules" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CardLevelSpendRules"
      }, {
        "type" : "object",
        "properties" : {
          "updateSpendLimitMethod" : {
            "$ref" : "#/definitions/SpendLimitUpdateMethod"
          }
        }
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.UpdateCardLevelSpendRules"
    },
    "CorporateSourceOfFunds" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.CorporateSourceOfFunds",
      "description" : "The corporate's source of funds.",
      "type" : "string"
    },
    "Date" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Date",
      "type" : "object",
      "required" : [ "day", "month", "year" ],
      "properties" : {
        "month" : {
          "format" : "int32",
          "type" : "integer"
        },
        "year" : {
          "format" : "int32",
          "type" : "integer"
        },
        "day" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "MultipleSCAResourceType" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.MultipleSCAResourceType",
      "description" : "The operation type upon which an SCA Challenge is being contested.\n",
      "type" : "string"
    },
    "AddressWithCountryRequired" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.AddressWithCountryRequired",
      "description" : "The address, with none of the separate fields being set as required.",
      "type" : "object",
      "required" : [ "country" ],
      "properties" : {
        "country" : {
          "minLength" : 2,
          "pattern" : "^[A-Z]+$",
          "description" : "The country of the address expressed in ISO 3166 alpha-2 format.",
          "type" : "string",
          "maxLength" : 2
        },
        "city" : {
          "description" : "The city of the address.",
          "type" : "string"
        },
        "addressLine1" : {
          "description" : "The first line of the address.",
          "type" : "string"
        },
        "addressLine2" : {
          "description" : "The second line of the address.",
          "type" : "string"
        },
        "postCode" : {
          "pattern" : "^[A-Za-z0-9 -]*$",
          "description" : "The post code associated with the address.",
          "type" : "string",
          "maxLength" : 10
        },
        "state" : {
          "description" : "The state of the address.",
          "type" : "string",
          "maxLength" : 50
        }
      }
    },
    "SCAChallengeType" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SCAChallengeType",
      "description" : "- \"OTP\": The OTP is sent as a text message\n- \"PUSH\": The authorisation request is sent as a push notification\n- \"BIOMETRIC\": The push notification is sent via Firebase to a mobile application\n",
      "type" : "string"
    },
    "PrepaidModeCardAuthorisationEvent" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CardAuthorisationEvent"
      }, {
        "type" : "object",
        "properties" : {
          "availableBalance" : {
            "$ref" : "#/definitions/CurrencyAmount"
          }
        }
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.PrepaidModeCardAuthorisationEvent"
    },
    "UserId" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.UserId",
      "type" : "string"
    },
    "KycLevel" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.KycLevel",
      "description" : "The KYC level, which determines what KYC information will be requested from the consumer:\n  - KYC_LEVEL_1: The most basic level of KYC required. \n  - KYC_LEVEL_2: Full due diligence level 2\n",
      "type" : "string"
    },
    "IdentityId" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.IdentityId",
      "type" : "object",
      "required" : [ "id", "type" ],
      "properties" : {
        "id" : {
          "pattern" : "^[0-9]+$",
          "description" : "The identifier for the identity.",
          "type" : "string"
        },
        "type" : {
          "description" : "Indicates the identity type.",
          "type" : "string",
          "enum" : [ "CONSUMER", "CORPORATE" ]
        }
      }
    },
    "SCAChannel" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.SCAChannel",
      "description" : "- \"SMS\": The one-time-password is sent as a text message\n- \"AUTHY\": The push notification is sent to an Authy application\n- \"BIOMETRIC\": The push notification is sent to an innovator application\n",
      "type" : "string"
    },
    "OutgoingWireTransferType" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.OutgoingWireTransferType",
      "description" : "The wire transfer rails used, from SEPA, Faster Payments or SWIFT.",
      "type" : "string"
    },
    "BaseCardLevelSpendRules" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CommonLevelSpendRules"
      }, {
        "type" : "object",
        "properties" : {
          "spendLimit" : {
            "description" : "The total amount of funds that can be spent using this card, in a given time interval.",
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SpendLimit"
            }
          }
        }
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.BaseCardLevelSpendRules"
    },
    "CardAuthorisationEvent" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.CardAuthorisationEvent",
      "type" : "object",
      "required" : [ "authorisationType", "cardId", "merchantData", "owner", "sourceAmount", "totalTransactionCost", "transactionAmount", "transactionId", "transactionTimestamp" ],
      "properties" : {
        "owner" : {
          "$ref" : "#/definitions/IdentityId"
        },
        "authCode" : {
          "minLength" : 1,
          "description" : "The authorisation code associated with this authorisation.",
          "type" : "string",
          "maxLength" : 6
        },
        "merchantData" : {
          "$ref" : "#/definitions/MerchantData"
        },
        "transactionId" : {
          "pattern" : "^[0-9]+$",
          "description" : "The id of this transaction, for reference.",
          "type" : "string"
        },
        "totalTransactionCost" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "transactionTimestamp" : {
          "format" : "int64",
          "description" : "The timestamp of the transaction, using epoch timestamp with millisecond precision.",
          "type" : "integer"
        },
        "forexPadding" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "forexFee" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "mode" : {
          "description" : "The card can be created in prepaid mode or debit mode.\n\n- A prepaid mode card has its own balance and can have funds transferred to or from it.\n- A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit.\n",
          "type" : "string"
        },
        "authorisationType" : {
          "$ref" : "#/definitions/CardAuthorisationDetailsAuthorisationType"
        },
        "cardId" : {
          "pattern" : "^[0-9]+$",
          "description" : "The unique identifier of the card on which an authorisation is being performed",
          "type" : "string"
        },
        "transactionAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "sourceAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "cardholderPresent" : {
          "$ref" : "#/definitions/CardHolderPresent"
        },
        "cardPresent" : {
          "description" : "Optional detail indicating if the card was present when the authorisation occurred.",
          "type" : "boolean"
        }
      }
    },
    "CommonLevelSpendRules" : {
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.CommonLevelSpendRules",
      "type" : "object",
      "properties" : {
        "allowAtm" : {
          "description" : "Indicates if an ATM Withdrawal transaction is allowed on the card.",
          "type" : "boolean"
        },
        "allowedMerchantCountries" : {
          "description" : "Whitelist Merchant Country: A list of allowed merchant countries, in ISO 3166-1 alpha-2 format. If the Merchant country does not match, then the transaction will be declined. If a Merchant Country is also provided in the blocked list, the blocked list will take precedence.",
          "type" : "array",
          "items" : {
            "minLength" : 2,
            "pattern" : "^[A-Z]{2}$",
            "type" : "string",
            "maxLength" : 2
          }
        },
        "allowECommerce" : {
          "description" : "Indicates if an online transaction is allowed on the card.",
          "type" : "boolean"
        },
        "blockedMerchantCategories" : {
          "description" : "Blacklist MCC: A list of disallowed merchant category codes (MCCs). If the MCC matches, then the transaction will be declined. If an MCC is also in the allowed list, the blocked list will take precedence.",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "allowedMerchantIds" : {
          "description" : "Whitelist Merchant Id: A list of allowed merchant IDs. If the Merchant Id does not match, then the transaction will be declined. If a Merchant Id is also provided in the blocked list, the blocked list will take precedence.",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "blockedMerchantCountries" : {
          "description" : "Blacklist Merchant Country: A list of disallowed merchant countries, in ISO 3166-1 alpha-2 format. If the Merchant country matches, then the transaction will be declined. If a Merchant Country is also in the allowed list, the blocked list will take precedence.",
          "type" : "array",
          "items" : {
            "minLength" : 2,
            "pattern" : "^[A-Z]{2}$",
            "type" : "string",
            "maxLength" : 2
          }
        },
        "allowCashback" : {
          "description" : "Indicates if a cashback transaction at a physical terminal is allowed on the card.",
          "type" : "boolean"
        },
        "blockedMerchantIds" : {
          "description" : "Blacklist Merchant Id: A list of disallowed merchant IDs. If the Merchant Id matches, then the transaction will be declined. If a Merchant Id is also in the allowed list, the blocked list will take precedence.",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "allowCreditAuthorisations" : {
          "description" : "Indicates if a the card can receive a credit transaction.",
          "type" : "boolean"
        },
        "allowedMerchantCategories" : {
          "description" : "Whitelist MCC: A list of allowed merchant category codes (MCCs). If the MCC does not match, then the transaction will be declined. If an MCC is also in the blocked list, the blocked list will take precedence.",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "allowContactless" : {
          "description" : "Indicates if a contactless transaction is allowed on the card.",
          "type" : "boolean"
        }
      }
    }
  },
  "parameters" : {
    "sourceId" : {
      "in" : "query",
      "name" : "source.id",
      "description" : "Filter by the source instrument id. Must be specified when `source.type` is provided.",
      "required" : false
    },
    "owtState" : {
      "in" : "query",
      "name" : "state",
      "description" : "Filter by the outgoing wire transfer state. Leave out to fetch all states.",
      "type" : "array",
      "required" : false
    },
    "instrumentId" : {
      "in" : "query",
      "name" : "instrumentId",
      "description" : "Filter by the source instrument id.",
      "required" : false
    },
    "sendState" : {
      "in" : "query",
      "name" : "state",
      "description" : "Filter by the Send transaction state. Leave out to fetch all states.",
      "type" : "array",
      "required" : false
    },
    "channel" : {
      "in" : "path",
      "name" : "channel",
      "description" : "The unique identifier for the channel.",
      "required" : true
    },
    "state_blockedReason" : {
      "in" : "query",
      "name" : "state.blockedReason",
      "type" : "array",
      "required" : false
    },
    "transferProfileId" : {
      "in" : "query",
      "name" : "profileId",
      "description" : "Filter by the transfer profile. Leave out to fetch all transfer transactions.",
      "required" : false
    },
    "sendProfileId" : {
      "in" : "query",
      "name" : "profileId",
      "description" : "Filter by the Send profile. Leave out to fetch all entries.",
      "required" : false
    },
    "owtInstrument" : {
      "in" : "query",
      "name" : "instrument",
      "description" : "Filter by the source instrument id (which must be a managed account).",
      "type" : "object",
      "required" : false
    },
    "singleEntryPerTransaction" : {
      "in" : "query",
      "name" : "singleEntryPerTransaction",
      "description" : "Returns transactions that span multiple movements as a single entry.\nOnly includes transactions that have been completed.\nDefaults to true for PDF statements, false otherwise.\nNote: due to the fact that only completed transactions are included, some\ntransactions that are in progress and have modified the balance of the instrument\nwill not be shown, which could lead to seemingly inconsistent balance being displayed.\n",
      "type" : "boolean",
      "required" : false
    },
    "bulkId" : {
      "in" : "path",
      "name" : "bulk_id",
      "description" : "The bulk id of the bulk process.",
      "required" : true
    },
    "bulkProcessStatus" : {
      "in" : "query",
      "name" : "status",
      "required" : false
    },
    "sourceInstrument_type" : {
      "in" : "query",
      "name" : "sourceInstrument.type",
      "description" : "Filter by the source instrument type. Must be specified when `source.id` is provided.",
      "required" : false
    },
    "limit" : {
      "in" : "query",
      "name" : "limit",
      "format" : "int32",
      "description" : "The limit of the results for paging, starting at the offset. Limit is always capped at 100.",
      "type" : "integer",
      "required" : false
    },
    "scaPushChannel" : {
      "in" : "path",
      "name" : "channel",
      "required" : true
    },
    "tag" : {
      "in" : "query",
      "name" : "tag",
      "description" : "Filter by the managed account/card tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all managed accounts/card.",
      "type" : "string",
      "required" : false
    },
    "state" : {
      "in" : "query",
      "name" : "state",
      "type" : "array",
      "required" : false
    },
    "identity_type" : {
      "in" : "query",
      "name" : "identity.type",
      "description" : "Filter by the source instrument type. Must be specified when `source.id` is provided.",
      "type" : "string",
      "required" : false
    },
    "orderByTimestamp" : {
      "in" : "query",
      "name" : "orderByTimestamp",
      "description" : "Orders the result in ascending or descending order.\n  - ASC: Ascending order, oldest transactions first.\n  - DESC: Descending order, most recent transactions first.\n\nIf not specified, the transactions will be returned in descending order.\n",
      "type" : "string",
      "required" : false
    },
    "authFactorsPushChannel" : {
      "in" : "path",
      "name" : "channel",
      "required" : true
    },
    "offset" : {
      "in" : "query",
      "name" : "offset",
      "format" : "int32",
      "description" : "The offset value for paging, indicating the initial item number to be returned from the data set satisfying the given criteria. Leave out to fetch the first page of results.",
      "type" : "integer",
      "required" : false
    },
    "active" : {
      "in" : "query",
      "name" : "active",
      "description" : "Filter for active or deactivated users. Leave out to fetch all users.",
      "type" : "boolean",
      "required" : false
    },
    "createdTo" : {
      "in" : "query",
      "name" : "createdTo",
      "format" : "int64",
      "description" : "Filter for managed accounts/cards created before `createdTo` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts/cards.",
      "type" : "integer",
      "required" : false
    },
    "bulkProcessOperationStatus" : {
      "in" : "query",
      "name" : "status",
      "required" : false
    },
    "request-ref" : {
      "in" : "header",
      "name" : "request-ref",
      "description" : "A unique call reference included in every call, that enables the receiver to avoid duplicate handling of a webhook request (e.g. webhook was resent).",
      "type" : "string",
      "required" : false
    },
    "accept" : {
      "in" : "header",
      "name" : "accept",
      "description" : "A request parameter specifying the type of response the client would like. Must be one of `application/json`, `application/pdf` or `text/csv`.\n\nThe default response type (`application/json`) will be returned if specified incorrectly or not specified.\n",
      "type" : "string",
      "required" : false
    },
    "sequence" : {
      "in" : "query",
      "name" : "sequence",
      "format" : "int64",
      "type" : "integer",
      "required" : false
    },
    "sourceType" : {
      "in" : "query",
      "name" : "source.type",
      "description" : "Filter by the source instrument type. Must be specified when `source.id` is provided.",
      "required" : false
    },
    "profileId" : {
      "in" : "query",
      "name" : "profileId",
      "description" : "Filter by the managed account/card profile. Leave out to fetch all managed accounts/card.",
      "required" : false
    },
    "published-timestamp" : {
      "in" : "header",
      "name" : "published-timestamp",
      "format" : "int64",
      "description" : "The timestamp, expressed in Epoch timestamp using millisecond precision, when this event was published.",
      "type" : "integer",
      "required" : true
    },
    "transferExecutedTo" : {
      "in" : "query",
      "name" : "executedTo",
      "format" : "int64",
      "description" : "Filter for transfer transactions executed before `executedTo` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all transfers.",
      "type" : "integer",
      "required" : false
    },
    "idempotency-ref" : {
      "in" : "header",
      "name" : "idempotency-ref",
      "description" : "A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours.",
      "type" : "string",
      "required" : false
    },
    "signature" : {
      "in" : "header",
      "name" : "signature",
      "description" : "The signature to verify the authenticity of this request.  This is the base64 hash (HmacSHA256) of the `published-timestamp` using your API key.",
      "type" : "string",
      "required" : true
    },
    "sendExecutedFrom" : {
      "in" : "query",
      "name" : "executedFrom",
      "format" : "int64",
      "description" : "Filter for send transactions executed after `executedFrom` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all Send transactions.",
      "type" : "integer",
      "required" : false
    },
    "transferCreatedTo" : {
      "in" : "query",
      "name" : "createdTo",
      "format" : "int64",
      "description" : "Filter for transfer transactions created before `createdTo` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all transfers.",
      "type" : "integer",
      "required" : false
    },
    "sendCreatedTo" : {
      "in" : "query",
      "name" : "createdTo",
      "format" : "int64",
      "description" : "Filter for send transactions created before `createdTo` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all Send transactions.",
      "type" : "integer",
      "required" : false
    },
    "currency" : {
      "in" : "query",
      "name" : "currency",
      "description" : "Filter by the managed account/card currency.\n\nCurrencies are expressed as an ISO 4217 code. Leave out to fetch all managed accounts/card.\n",
      "required" : false
    },
    "email" : {
      "in" : "query",
      "name" : "email",
      "description" : "Filter by the email address of the user.",
      "required" : false
    },
    "friendlyName" : {
      "in" : "query",
      "name" : "friendlyName",
      "description" : "Filter by the managed account/card friendly name. Leave out to fetch all managed accounts/card.\n\nThe exact name must be provided, as wildcards are not supported.\n",
      "type" : "string",
      "required" : false
    },
    "sourceInstrument_id" : {
      "in" : "query",
      "name" : "sourceInstrument.id",
      "description" : "Filter by the source instrument id. Must be specified when `source.type` is provided.",
      "required" : false
    },
    "sendExecutedTo" : {
      "in" : "query",
      "name" : "executedTo",
      "format" : "int64",
      "description" : "Filter for send transactions executed before `executedTo` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all Send transactions.",
      "type" : "integer",
      "required" : false
    },
    "identity_id" : {
      "in" : "query",
      "name" : "identity.id",
      "description" : "Filter by the source instrument id. Must be specified when `source.type` is provided.",
      "required" : false
    },
    "transferCreatedFrom" : {
      "in" : "query",
      "name" : "createdFrom",
      "format" : "int64",
      "description" : "Filter for transfer transactions created after `createdFrom` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all transfers.",
      "type" : "integer",
      "required" : false
    },
    "transferExecutedFrom" : {
      "in" : "query",
      "name" : "executedFrom",
      "format" : "int64",
      "description" : "Filter for transfer transactions executed after `executedFrom` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all transfers.",
      "type" : "integer",
      "required" : false
    },
    "state_destroyedReason" : {
      "in" : "query",
      "name" : "state.destroyedReason",
      "type" : "array",
      "required" : false
    },
    "transferTag" : {
      "in" : "query",
      "name" : "tag",
      "description" : "Filter by the transfer tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries.",
      "type" : "string",
      "required" : false
    },
    "card_type" : {
      "in" : "query",
      "name" : "type",
      "description" : "Filter by the type of the card.",
      "type" : "string",
      "required" : false
    },
    "userId" : {
      "in" : "path",
      "name" : "user_id",
      "description" : "The user id for which this password is created.",
      "required" : true
    },
    "toTimestamp" : {
      "in" : "query",
      "name" : "toTimestamp",
      "format" : "int64",
      "description" : "Filter for transactions having transaction timestamp before `toTimestamp`. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts. Must be higher than fromTimestamp if both parameters are provided.",
      "type" : "integer",
      "required" : false
    },
    "sendTag" : {
      "in" : "query",
      "name" : "tag",
      "description" : "Filter by the send tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries.",
      "type" : "string",
      "required" : false
    },
    "createdFrom" : {
      "in" : "query",
      "name" : "createdFrom",
      "format" : "int64",
      "description" : "Filter for managed accounts/cards created after `createdFrom` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts/cards.",
      "type" : "integer",
      "required" : false
    },
    "fromTimestamp" : {
      "in" : "query",
      "name" : "fromTimestamp",
      "format" : "int64",
      "description" : "Filter for transactions having transaction timestamp after `fromTimestamp`. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts.",
      "type" : "integer",
      "required" : false
    },
    "sendCreatedFrom" : {
      "in" : "query",
      "name" : "createdFrom",
      "format" : "int64",
      "description" : "Filter for send transactions created after `createdFrom` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all Send transactions.",
      "type" : "integer",
      "required" : false
    },
    "showFundMovementsOnly" : {
      "in" : "query",
      "name" : "showFundMovementsOnly",
      "description" : "Deprecated. Use singleEntryPerTransaction instead.\n\nReturns only the entries which contain fund movements.\n",
      "type" : "boolean",
      "required" : false
    },
    "userIdExplode" : {
      "in" : "path",
      "name" : "user_id",
      "description" : "The unique identifier for the user.",
      "required" : true
    },
    "transactionState" : {
      "in" : "query",
      "name" : "state",
      "description" : "Filter by the transfer transaction state. Leave out to fetch all states.",
      "type" : "array",
      "required" : false
    }
  },
  "swagger" : "2.0",
  "info" : {
    "x-WM-USE_PROXY_FOR_WEB" : true,
    "x-WM-USE_PROXY_FOR_MOBILE" : true,
    "contact" : {
      "name" : "Weavr",
      "url" : "https://weavr.io"
    },
    "description" : "Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.\n\nBy integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.\n\n# Authentication\nEach request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).\n\nAlmost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed.\n",
    "x-WM-SERVICE_ID" : "weavrfundstransfer",
    "title" : "Weavr Multi Product API",
    "version" : "3.53.0",
    "x-WM-SERVICE_TYPE" : "OpenAPIService",
    "x-WM-USE_WITH_CREDENTIALS" : false
  },
  "tags" : [ {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Access",
    "name" : "Access",
    "description" : "Manage authentication for your users."
  }, {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Additional Factors",
    "name" : "Additional Factors",
    "description" : "Manage additional strong customer authentication factors for your users.  \n"
  }, {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Authorised Users",
    "name" : "Authorised Users",
    "description" : "Corporate and Consumer identities can invite authorised users to access their account. Once on-boarded, authorised users can create and manage instruments and transactions on behalf of the identity they are on-boarded with.\n\nIn case of **Corporate Identities**, authorised users are typically employees who have access to company's banking products such as cards and bank accounts.\n\nIn case of **Consumer Identities**, authorised users are typically children/teens whose parents want them to have access to banking products such as cards and bank accounts.\n\nNote that `/users` endpoints are to be used only for performing operations related to authorised users - getting or updating the details of _root_ users is to be done via the respective `/consumers` or `/corporates` endpoints.\n"
  }, {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Beneficiaries",
    "name" : "Beneficiaries"
  }, {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Beneficiary Management",
    "name" : "Beneficiary Management",
    "description" : "Manage a list of beneficiaries for Outgoing wire transfers and Sends. \n\nAside from convenience and a reduced chance of making errors when making transactions, \nthis allows for the introduction an SCA exemption, where the account holder can request \nthat transactions to `TRUSTED` beneficiaries to be exempted from the requirement to pass \nan SCA challenge every time.\n"
  }, {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Challenges",
    "name" : "Challenges"
  }, {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Consumers",
    "name" : "Consumers",
    "description" : "Consumers are identities representing individuals. Once on-boarded, Consumers can create and manage their own instruments via your application."
  }, {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Corporates",
    "name" : "Corporates",
    "description" : "Corporates are identities representing companies. Once on-boarded, Corporates can create and manage their own instruments via your application."
  }, {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Manage",
    "name" : "Manage"
  }, {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Managed Accounts",
    "name" : "Managed Accounts",
    "description" : "Managed Accounts are a type of financial instrument offered by Weavr.\n\nThey hold funds for their owner, and can be upgraded to IBANs so as to receive and send funds to instruments outside of the Weavr Platform, via Wire Transfers.\n\nManaged accounts can also be used as source and destination instruments in the `transfer` and `send` transactions.\n"
  }, {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Managed Cards",
    "name" : "Managed Cards",
    "description" : "Managed Cards are a type of financial instrument offered by Weavr.\n\nYou can create virtual or physical cards that are issued to the consumer or corporate identity.\n\nA card created in prepaid mode has its own balance, whereas a card created in debit mode does not have its own balance but taps into the balance of its parent managed account.\n"
  }, {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Operations",
    "name" : "Operations"
  }, {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Outgoing Wire Transfers",
    "name" : "Outgoing Wire Transfers",
    "description" : "The Outgoing Wire Transfer transaction is used to transfer funds from managed accounts to an external bank account.\n"
  }, {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Passwords",
    "name" : "Passwords",
    "description" : "Manage your users' passwords."
  }, {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Sends",
    "name" : "Sends",
    "description" : "The Send transaction is used to send funds between managed accounts and managed cards belonging to different identities. \n"
  }, {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Step-up",
    "name" : "Step-up"
  }, {
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavrfundstransfer.Transfers",
    "name" : "Transfers",
    "description" : "The Transfer transaction is used to transfer funds between managed accounts and managed cards belonging to same identity.\n"
  } ]
}
