{
  "swagger" : "2.0",
  "info" : {
    "description" : "Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.\n\nBy integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.\n\n# Authentication\nEach request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).\n\nAlmost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed.\n",
    "version" : "3.38.0",
    "title" : "Weavr Multi Product API",
    "contact" : {
      "name" : "Weavr",
      "url" : "https://weavr.io"
    },
    "x-WM-USE_PROXY_FOR_WEB" : true,
    "x-WM-USE_PROXY_FOR_MOBILE" : true,
    "x-WM-SERVICE_ID" : "weavr",
    "x-WM-SERVICE_TYPE" : "OpenAPIService",
    "x-WM-USE_WITH_CREDENTIALS" : false
  },
  "host" : "mockingbird.wavemakeronline.com",
  "basePath" : "//serv-gmd-m42-y0f/weavr",
  "tags" : [ {
    "name" : "Access",
    "description" : "Manage authentication for your users.",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Access"
  }, {
    "name" : "Additional Factors",
    "description" : "Manage additional strong customer authentication factors for your users.  \n",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Additional Factors"
  }, {
    "name" : "Authorised Users",
    "description" : "Corporate and Consumer identities can invite authorised users to access their account. Once on-boarded, authorised users can create and manage instruments and transactions on behalf of the identity they are on-boarded with.\n\nIn case of **Corporate Identities**, authorised users are typically employees who have access to company's banking products such as cards and bank accounts.\n\nIn case of **Consumer Identities**, authorised users are typically children/teens whose parents want them to have access to banking products such as cards and bank accounts.\n\nNote that `/users` endpoints are to be used only for performing operations related to authorised users - getting or updating the details of _root_ users is to be done via the respective `/consumers` or `/corporates` endpoints.\n",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Authorised Users"
  }, {
    "name" : "Beneficiary Management",
    "description" : "Manage a list of beneficiaries for Outgoing wire transfers and Sends. \n\nAside from convenience and a reduced chance of making errors when making transactions, \nthis allows for the introduction an SCA exemption, where the account holder can request \nthat transactions to `TRUSTED` beneficiaries to be exempted from the requirement to pass \nan SCA challenge every time.\n",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Beneficiary Management"
  }, {
    "name" : "Consumers",
    "description" : "Consumers are identities representing individuals. Once on-boarded, Consumers can create and manage their own instruments via your application.",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Consumers"
  }, {
    "name" : "Corporates",
    "description" : "Corporates are identities representing companies. Once on-boarded, Corporates can create and manage their own instruments via your application.",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Corporates"
  }, {
    "name" : "Managed Accounts",
    "description" : "Managed Accounts are a type of financial instrument offered by Weavr.\n\nThey hold funds for their owner, and can be upgraded to IBANs so as to receive and send funds to instruments outside of the Weavr Platform, via Wire Transfers.\n\nManaged accounts can also be used as source and destination instruments in the `transfer` and `send` transactions.\n",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Managed Accounts"
  }, {
    "name" : "Managed Cards",
    "description" : "Managed Cards are a type of financial instrument offered by Weavr.\n\nYou can create virtual or physical cards that are issued to the consumer or corporate identity.\n\nA card created in prepaid mode has its own balance, whereas a card created in debit mode does not have its own balance but taps into the balance of its parent managed account.\n",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Managed Cards"
  }, {
    "name" : "Outgoing Wire Transfers",
    "description" : "The Outgoing Wire Transfer transaction is used to transfer funds from managed accounts to an external bank account.\n",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Outgoing Wire Transfers"
  }, {
    "name" : "Passwords",
    "description" : "Manage your users' passwords.",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Passwords"
  }, {
    "name" : "Sends",
    "description" : "The Send transaction is used to send funds between managed accounts and managed cards belonging to different identities. \n",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Sends"
  }, {
    "name" : "Transfers",
    "description" : "The Transfer transaction is used to transfer funds between managed accounts and managed cards belonging to same identity.\n",
    "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Transfers"
  } ],
  "schemes" : [ "https" ],
  "security" : [ ],
  "paths" : {
    "/login_with_password" : {
      "post" : {
        "tags" : [ "Access" ],
        "summary" : "Login with password",
        "description" : "Authenticate a user with the `email` and `password` that they provided when registering.\n\nGiven that the user credentials are correct, this returns a `token` that can then be used to authorise\nother secured operations. In case the password is expired, a temporary `token` is returned, which can be used\nsolely for updating the password.\n\nThe token returned is valid for 5 minutes from last activity.\n",
        "operationId" : "weavr_loginWithPassword",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Pet object that needs to be added to the store",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LoginWithPasswordRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LoginWithPasswordResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : {
            "description" : "The authentication credentials are not found or are incorrect."
          },
          "404" : { },
          "409" : { },
          "410" : { },
          "423" : { },
          "429" : { },
          "500" : { },
          "503" : { },
          "default" : { }
        },
        "x-WM-METHOD_NAME" : "weavr_loginWithPassword",
        "x-WM-CRUD_OPERATION_ID" : "weavr.Access",
        "x-WM-OPERATION_TYPE" : "create"
      },
      "parameters" : [ ],
      "x-WM-COMPLETE_PATH" : "${rest.weavr.scheme}://${rest.weavr.host}${rest.weavr.basepath}/login_with_password"
    },
    "/managed_accounts" : {
      "get" : {
        "tags" : [ "Managed Accounts" ],
        "summary" : "Get all managed accounts",
        "description" : "Retrieves all managed accounts belonging to the logged-in identity.",
        "operationId" : "weavr_managedAccountsGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "$ref" : "#/parameters/offset"
        }, {
          "$ref" : "#/parameters/limit"
        }, {
          "$ref" : "#/parameters/profileId"
        }, {
          "$ref" : "#/parameters/friendlyName"
        }, {
          "$ref" : "#/parameters/state"
        }, {
          "$ref" : "#/parameters/state_blockedReason"
        }, {
          "$ref" : "#/parameters/state_destroyedReason"
        }, {
          "$ref" : "#/parameters/currency"
        }, {
          "$ref" : "#/parameters/createdFrom"
        }, {
          "$ref" : "#/parameters/createdTo"
        }, {
          "$ref" : "#/parameters/tag"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ManagedAccountsGetResponse"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "429" : { },
          "500" : { },
          "503" : { },
          "default" : { }
        },
        "x-WM-METHOD_NAME" : "weavr_managedAccountsGet",
        "x-WM-CRUD_OPERATION_ID" : "weavr.Managed Accounts"
      },
      "post" : {
        "tags" : [ "Managed Accounts" ],
        "summary" : "Create a managed account",
        "description" : "Creates a managed account for the consumer or corporate identity.\nThe Managed Account Profile (configured in the Multi Portal) specified determines the behavior and restrictions that the managed account will have.\"\n",
        "operationId" : "weavr_managedAccountCreate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Pet object that needs to be added to the store",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ManagedAccountCreateRequest"
          }
        } ],
        "responses" : {
          "200" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "409" : { },
          "429" : { },
          "500" : { },
          "503" : { },
          "default" : { }
        },
        "x-WM-METHOD_NAME" : "weavr_managedAccountCreate",
        "x-WM-CRUD_OPERATION_ID" : "weavr.Managed Accounts",
        "x-WM-OPERATION_TYPE" : "create"
      },
      "parameters" : [ ],
      "x-WM-COMPLETE_PATH" : "${rest.weavr.scheme}://${rest.weavr.host}${rest.weavr.basepath}/managed_accounts"
    },
    "/managed_accounts/{id}" : {
      "get" : {
        "tags" : [ "Managed Accounts" ],
        "summary" : "Get a managed account",
        "description" : "Fetch the managed account identified by the `id` in path.",
        "operationId" : "weavr_managedAccountGet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the Managed Account.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ManagedAccount"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "429" : { },
          "500" : { },
          "503" : { },
          "default" : { }
        },
        "x-WM-METHOD_NAME" : "weavr_managedAccountGet",
        "x-WM-CRUD_OPERATION_ID" : "weavr.Managed Accounts"
      },
      "patch" : {
        "tags" : [ "Managed Accounts" ],
        "summary" : "Update a managed account",
        "description" : "Update the details for the managed account identified by the `id` in the path.",
        "operationId" : "weavr_managedAccountUpdate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the managed account.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ManagedAccountUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : { },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "429" : { },
          "500" : { },
          "503" : { },
          "default" : { }
        },
        "x-WM-METHOD_NAME" : "weavr_managedAccountUpdate",
        "x-WM-CRUD_OPERATION_ID" : "weavr.Managed Accounts"
      },
      "parameters" : [ ],
      "x-WM-COMPLETE_PATH" : "${rest.weavr.scheme}://${rest.weavr.host}${rest.weavr.basepath}/managed_accounts/{id}"
    },
    "/managed_accounts/{id}/statement" : {
      "get" : {
        "tags" : [ "Managed Accounts" ],
        "summary" : "Get a managed account statement",
        "description" : "Returns a list of transactions against the managed account identified by the `id` path parameter, matching the criteria provided in the request.",
        "operationId" : "weavr_managedAccountStatement",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "text/csv" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the managed account.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/accept"
        }, {
          "$ref" : "#/parameters/offset"
        }, {
          "$ref" : "#/parameters/limit"
        }, {
          "$ref" : "#/parameters/orderByTimestamp"
        }, {
          "$ref" : "#/parameters/fromTimestamp"
        }, {
          "$ref" : "#/parameters/toTimestamp"
        }, {
          "$ref" : "#/parameters/showFundMovementsOnly"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Statement"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "429" : { },
          "500" : { },
          "503" : { },
          "default" : { }
        },
        "x-WM-METHOD_NAME" : "weavr_managedAccountStatement",
        "x-WM-CRUD_OPERATION_ID" : "weavr.Managed Accounts"
      },
      "parameters" : [ ],
      "x-WM-COMPLETE_PATH" : "${rest.weavr.scheme}://${rest.weavr.host}${rest.weavr.basepath}/managed_accounts/{id}/statement"
    },
    "/managed_cards/{id}/statements" : {
      "get" : {
        "tags" : [ "Managed Cards" ],
        "summary" : "Get a managed card statement",
        "description" : "Returns a list of transactions against the managed card identified by the `id` path parameter, matching the criteria provided in the request.",
        "operationId" : "weavr_managedCardStatements",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "text/csv" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of a managed card.",
          "required" : true,
          "type" : "string"
        }, {
          "$ref" : "#/parameters/accept"
        }, {
          "$ref" : "#/parameters/offset"
        }, {
          "$ref" : "#/parameters/limit"
        }, {
          "name" : "orderByTimestamp",
          "in" : "query",
          "description" : "Orders the result in ascending or descending order.\n  - ASC: Ascending order, oldest transactions first.\n  - DESC: Descending order, most recent transactions first.\n\nIf not specified, the transactions will be returned in descending order.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fromTimestamp",
          "in" : "query",
          "description" : "Filter for transactions having transaction timestamp after `fromTimestamp`. Timestamp is expressed in Epoch timestamp using millisecond precision.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "toTimestamp",
          "in" : "query",
          "description" : "Filter for transactions having transaction timestamp before the `toTimestamp`. Timestamp is expressed in Epoch timestamp using millisecond precision.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Statement"
            }
          },
          "400" : { },
          "401" : { },
          "403" : { },
          "404" : { },
          "429" : { },
          "500" : { },
          "503" : { },
          "default" : { }
        },
        "x-WM-METHOD_NAME" : "weavr_managedCardStatements",
        "x-WM-CRUD_OPERATION_ID" : "weavr.Managed Cards"
      },
      "parameters" : [ ],
      "x-WM-COMPLETE_PATH" : "${rest.weavr.scheme}://${rest.weavr.host}${rest.weavr.basepath}/managed_cards/{id}/statements"
    }
  },
  "securityDefinitions" : {
    "api_key" : {
      "type" : "apiKey",
      "name" : "api-key",
      "in" : "header",
      "x-testValue" : null,
      "x-value" : null
    },
    "webhooks_key" : {
      "type" : "apiKey",
      "name" : "webhooks-key",
      "in" : "header",
      "x-testValue" : null,
      "x-value" : null
    },
    "auth_token" : {
      "type" : "apiKey",
      "name" : "auth_token",
      "in" : "header",
      "x-testValue" : null,
      "x-value" : null
    }
  },
  "definitions" : {
    "ProfileId" : {
      "type" : "string",
      "description" : "The profile Id which a specific identity, instrument or transaction type is linked to.\n\nProfiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.\n\nYou can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.\n\nProfile Ids can be found in the Multi Portal, in the API Credentials page.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ProfileId"
    },
    "DestroyedReason" : {
      "type" : "string",
      "description" : "The reason why the instrument has been destroyed:\n  - SYSTEM: The platform or an administrator of the platform has destroyed the instrument.\n  - USER: The root, or an authorised user, of the identity owning the instrument has destroyed the instrument.\n  - LOST: The instrument was automatically destroyed as it was marked as lost.\n  - STOLEN: The instrument was automatically destroyed as it was marked as stolen.\n  - EXPIRED: The instrument was automatically destroyed as it expired.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.DestroyedReason"
    },
    "TransactionState" : {
      "type" : "string",
      "description" : "Status of the transaction.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.TransactionState"
    },
    "Address" : {
      "required" : [ "addressLine1", "city", "country", "postCode" ],
      "properties" : {
        "country" : {
          "type" : "string",
          "description" : "The country of the address expressed in ISO 3166 alpha-2 format.",
          "minLength" : 2,
          "maxLength" : 2,
          "pattern" : "^[A-Z]+$"
        },
        "city" : {
          "type" : "string",
          "description" : "The city of the address.",
          "maxLength" : 50
        },
        "addressLine1" : {
          "type" : "string",
          "description" : "The first line of the address.",
          "maxLength" : 150
        },
        "addressLine2" : {
          "type" : "string",
          "description" : "The second line of the address.",
          "maxLength" : 150
        },
        "postCode" : {
          "type" : "string",
          "description" : "The post cost associated with the address.",
          "maxLength" : 10,
          "pattern" : "^[A-Za-z0-9 -]*$"
        },
        "state" : {
          "type" : "string",
          "description" : "The state of the address.",
          "maxLength" : 50
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Address"
    },
    "CorporateRootUser" : {
      "required" : [ "active", "companyPosition", "email", "emailVerified", "id", "mobile", "mobileNumberVerified", "name", "surname" ],
      "properties" : {
        "emailVerified" : {
          "type" : "boolean",
          "description" : "Indicates if the root user's email has been verified."
        },
        "companyPosition" : {
          "$ref" : "#/definitions/CompanyPosition"
        },
        "surname" : {
          "type" : "string",
          "description" : "Last name of the root user.",
          "maxLength" : 100
        },
        "name" : {
          "type" : "string",
          "description" : "First name of the root user.",
          "maxLength" : 100
        },
        "mobile" : {
          "$ref" : "#/definitions/Mobile"
        },
        "active" : {
          "type" : "boolean",
          "description" : "The state of the root user. If false, then the user will not be able to log in."
        },
        "mobileNumberVerified" : {
          "type" : "boolean",
          "description" : "Indicates if the root user's mobile number has been verified."
        },
        "dateOfBirth" : {
          "$ref" : "#/definitions/Date"
        },
        "id" : {
          "$ref" : "#/definitions/IdentityId"
        },
        "email" : {
          "$ref" : "#/definitions/Email"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.CorporateRootUser"
    },
    "InstrumentType" : {
      "type" : "string",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.InstrumentType"
    },
    "SCAPushChannel" : {
      "type" : "string",
      "description" : "- \"AUTHY\": The push notification is sent on the user's device using [Twilio Authy](https://www.twilio.com/authy)\n- \"BIOMETRIC\": The push notification is sent to the user's device\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SCAPushChannel"
    },
    "CardAuthorisationDetailsAuthorisationType" : {
      "type" : "string",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.CardAuthorisationDetailsAuthorisationType"
    },
    "SendBulkCreateRequest" : {
      "required" : [ "sends" ],
      "properties" : {
        "sends" : {
          "type" : "array",
          "description" : "The object representing the sends' details.",
          "items" : {
            "$ref" : "#/definitions/SendCreateRequest"
          }
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SendBulkCreateRequest"
    },
    "BusinessBeneficiaryType" : {
      "required" : [ "businessName" ],
      "properties" : {
        "businessName" : {
          "type" : "string",
          "description" : "The business beneficiary name. The allowed length and pattern is dependent on the beneficiary details type:\n\n`InstrumentDetailsBeneficiary` or `BankAccountDetailsBeneficiary` with `SepaBankDetails`: >= `1` character and <= `150` characters\n\n`BankAccountDetailsBeneficiary` with `FasterPaymentsBankDetails`: >= `1` character and <= `140` characters with a pattern of `^[a-zA-Z0-9\\/\\-?:().,’+\\s#=!\"%&*<>;{@\\r\\n]*$`\n(please note that the `’` symbol is the unicode value U+2019 (right single quotation mark) and not the unicode value U+0027 (apostrophe))\n"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.BusinessBeneficiaryType"
    },
    "ChargeFee" : {
      "required" : [ "feeType", "profileId", "source", "transactionId" ],
      "properties" : {
        "profileId" : {
          "type" : "string",
          "description" : "The profile Id which a specific identity, instrument or transaction type is linked to."
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "source" : {
          "$ref" : "#/definitions/InstrumentId"
        },
        "state" : {
          "$ref" : "#/definitions/TransactionState"
        },
        "feeType" : {
          "type" : "string",
          "description" : "The fee type as defined in the Multi Portal, and as sent in the request."
        },
        "availableBalanceAdjustment" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "transactionId" : {
          "$ref" : "#/definitions/TransactionId"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ChargeFee"
    },
    "Consumer" : {
      "required" : [ "acceptedTerms", "creationTimestamp", "id", "ipAddress", "profileId", "rootUser" ],
      "properties" : {
        "rootUser" : {
          "$ref" : "#/definitions/ConsumerRootUser"
        },
        "sourceOfFundsOther" : {
          "type" : "string",
          "description" : "Description of source of funds in case `OTHER` was chosen."
        },
        "acceptedTerms" : {
          "type" : "boolean",
          "description" : "Must be set to *true* to indicate that the consumer root user has accepted the terms and conditions."
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time when this consumer was created, expressed in Epoch timestamp using millisecond precision."
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "The IP address of the consumer user doing the registration.",
          "minLength" : 5,
          "maxLength" : 45
        },
        "sourceOfFunds" : {
          "$ref" : "#/definitions/ConsumerSourceOfFunds"
        },
        "id" : {
          "$ref" : "#/definitions/IdentityId"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "feeGroup" : {
          "type" : "string",
          "description" : "The fee group which the consumer is bound to."
        },
        "baseCurrency" : {
          "$ref" : "#/definitions/Currency"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Consumer"
    },
    "Currency" : {
      "type" : "string",
      "description" : "The currency expressed in ISO-4217 code. Example: GBP, EUR, USD.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Currency"
    },
    "TransactionBulkCancelResponse" : {
      "required" : [ "cancellations" ],
      "properties" : {
        "cancellations" : {
          "type" : "array",
          "description" : "Contains the cancellation details for each of the transactions.",
          "items" : {
            "$ref" : "#/definitions/TransactionCancelResponse"
          }
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.TransactionBulkCancelResponse"
    },
    "AuthSCAPushChannel" : {
      "type" : "string",
      "description" : "- \"AUTHY\": The push notification is sent on the user's device using [Twilio Authy](https://www.twilio.com/authy)\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.AuthSCAPushChannel"
    },
    "DeliveryTrackingCode" : {
      "type" : "string",
      "description" : "The delivery tracking code for tracking the physical card's delivery status.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.DeliveryTrackingCode"
    },
    "TransactionCancellationReason" : {
      "type" : "string",
      "description" : "The reason the scheduled transaction was cancelled.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.TransactionCancellationReason"
    },
    "OutgoingWireTransferCreateRequest" : {
      "required" : [ "destinationBeneficiary", "profileId", "sourceInstrument", "transferAmount" ],
      "properties" : {
        "scheduledTimestamp" : {
          "$ref" : "#/definitions/ScheduledTimestamp"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "transferAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "description" : {
          "type" : "string",
          "description" : "These details are passed to the beneficiary as the `reference` and the allowed length is dependent on the payment type:\n\n`SEPA` and `SWIFT` <= `35` characters\n\n`Faster Payments` <= `18` characters\n"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "sourceInstrument" : {
          "type" : "object",
          "description" : "The managed account from which funds will be collected.",
          "properties" : {
            "id" : {
              "type" : "string",
              "pattern" : "^[0-9]+$"
            },
            "type" : {
              "type" : "string",
              "enum" : [ "managed_accounts" ]
            }
          }
        },
        "destinationBeneficiary" : {
          "type" : "object"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.OutgoingWireTransferCreateRequest"
    },
    "TransactionCancelRequest" : {
      "required" : [ "id" ],
      "properties" : {
        "cancellationReason" : {
          "$ref" : "#/definitions/TransactionCancellationReason"
        },
        "id" : {
          "type" : "string",
          "description" : "The id of the transaction.",
          "pattern" : "^[0-9]+$"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.TransactionCancelRequest"
    },
    "SepaBankDetails" : {
      "required" : [ "bankIdentifierCode", "iban" ],
      "properties" : {
        "iban" : {
          "type" : "string",
          "description" : "International Bank Account Number, required for wire transfer over SEPA.",
          "minLength" : 15,
          "maxLength" : 34,
          "pattern" : "^[A-Z]{2}[0-9]{2}[A-Z0-9]{11,30}$"
        },
        "bankIdentifierCode" : {
          "type" : "string",
          "description" : "BIC, required for wire transfer over SEPA.",
          "minLength" : 8,
          "maxLength" : 11,
          "pattern" : "^[a-zA-Z0-9]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}[a-zA-Z0-9]{0,3}$"
        }
      },
      "type" : "object",
      "description" : "Bank details used in case the wire transfer is executed over SEPA.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SepaBankDetails"
    },
    "SwiftBankDetails" : {
      "required" : [ "code", "iban" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "SWIFT code, identifying a particular bank or branch, required for wire transfer over SWIFT.",
          "minLength" : 8,
          "maxLength" : 11,
          "pattern" : "^[a-zA-Z0-9]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}[a-zA-Z0-9]{0,3}$"
        },
        "iban" : {
          "type" : "string",
          "description" : "International Bank Account Number, required for wire transfer over SWIFT.",
          "minLength" : 15,
          "maxLength" : 34,
          "pattern" : "^[A-Z]{2}[0-9]{2}[A-Z0-9]{11,30}$"
        }
      },
      "type" : "object",
      "description" : "Bank details used in case the wire transfer is executed over SWIFT.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SwiftBankDetails"
    },
    "UserIdentity" : {
      "required" : [ "id", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the company."
        },
        "id" : {
          "$ref" : "#/definitions/IdentityId"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.UserIdentity"
    },
    "ManagedAccountsGetResponse" : {
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "responseCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "accounts" : {
          "type" : "array",
          "xml" : {
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/ManagedAccount"
          }
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ManagedAccountsGetResponse"
    },
    "CompanyType" : {
      "type" : "string",
      "description" : "Supported company types - if company type is not listed, please contact our support team to check if the company type can be supported.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.CompanyType"
    },
    "SCAFactor" : {
      "properties" : {
        "channel" : {
          "$ref" : "#/definitions/SCAChannel"
        },
        "type" : {
          "$ref" : "#/definitions/SCAChallengeType"
        },
        "status" : {
          "$ref" : "#/definitions/SCAFactorStatus"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SCAFactor"
    },
    "BeneficiaryBatchOperation" : {
      "type" : "string",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.BeneficiaryBatchOperation"
    },
    "BeneficiaryBatch" : {
      "required" : [ "operationBatchId", "state" ],
      "properties" : {
        "operationBatchId" : {
          "$ref" : "#/definitions/BeneficiaryOperationBatchId"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "state" : {
          "$ref" : "#/definitions/BeneficiaryBatchState"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.BeneficiaryBatch"
    },
    "DebitModeCardAuthorisationEvent" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CardAuthorisationEvent"
      }, {
        "required" : [ "parentManagedAccountId" ],
        "properties" : {
          "availableToSpend" : {
            "type" : "array",
            "description" : "The amount of funds from the parent managed account that are available to be spent through the card, in a given time interval, _before_ this transaction is performed.",
            "items" : {
              "$ref" : "#/definitions/AvailableToSpend"
            }
          },
          "parentManagedAccountId" : {
            "type" : "string",
            "description" : "Id of the managed account holding funds which the managed card can access, up to a configurable spend limit."
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.DebitModeCardAuthorisationEvent"
    },
    "TransactionId" : {
      "required" : [ "number", "type" ],
      "properties" : {
        "number" : {
          "type" : "string",
          "pattern" : "^[0-9]+$"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "INSTRUMENT_CREATE", "INSTRUMENT_BLOCK", "INSTRUMENT_UNBLOCK", "INSTRUMENT_DELETE", "AUTHORISATION", "SETTLEMENT", "MANUAL_TRANSACTION", "TRANSFER", "SEND", "DEPOSIT", "AUTHORISATION_REVERSAL", "AUTHORISATION_EXPIRY", "AUTHORISATION_DECLINE", "AUTHORISATION_MANUAL_CLOSE", "MERCHANT_REFUND", "MERCHANT_REFUND_REVERSAL", "ORIGINAL_CREDIT_TRANSACTION", "SETTLEMENT_REVERSAL", "ADJUSTMENT", "CHARGE_FEE", "WITHDRAWAL_RESERVE", "WITHDRAWAL_RELEASE", "FEE_REVERSAL", "CARD_UPGRADE_TO_PHYSICAL", "ACTIVATE_PHYSICAL_CARD", "INSTRUMENT_REPLACE", "OUTGOING_WIRE_TRANSFER", "AUTHORISATION_CANCELLATION", "SYSTEM_TRANSACTION", "OUTGOING_DIRECT_DEBIT_COLLECTION", "OUTGOING_DIRECT_DEBIT_REFUND" ]
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.TransactionId"
    },
    "SpendLimitInterval" : {
      "type" : "string",
      "description" : "The time period for which the `spendLimit` is valid.\n - DAILY: starting from 00:00:00 UTC of current day to 23:59:59 UTC of current day\n - WEEKLY: 00:00:00 UTC Monday of current week to following Sunday 23:59:59 UTC\n - MONTHLY: 1st of current calendar month to end of current calendar month\n - QUARTERLY: starting from beginning of current quarter where quarters are defined as follows:\n  - 1 January 00:00:00 UTC to 31 March 23:59:59 UTC\n  - 1 April 00:00:00 UTC to 30 Jun 23:59:59 UTC\n  - 1 July 00:00:00 UTC to 30 September 23:59:59 UTC\n  - 1 October 00:00:00 UTC to 31 December 23:59:59 UTC\n\n- YEARLY: 1 January 00:00:00 UTC of current calendar year to 31 December 23:59:59 UTC of current calendar year.\n- ALWAYS: This indicates that the `spendLimit` is the total amount that can be spent through the card throughout the whole lifetime of the card.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SpendLimitInterval"
    },
    "ManagedAccountCreateRequest" : {
      "required" : [ "currency", "friendlyName", "profileId", "purpose" ],
      "properties" : {
        "purpose" : {
          "type" : "string",
          "description" : "The friendly name to be given to the managed account.",
          "minLength" : 1,
          "maxLength" : 50
        },
        "profileId" : {
          "type" : "string"
        },
        "currency" : {
          "type" : "string"
        },
        "tag" : {
          "type" : "string"
        },
        "friendlyName" : {
          "type" : "string",
          "description" : "The friendly name to be given to the managed account.",
          "minLength" : 1,
          "maxLength" : 50
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ManagedAccountCreateRequest"
    },
    "Transfer" : {
      "required" : [ "creationTimestamp", "destination", "destinationAmount", "id", "profileId", "source", "state" ],
      "properties" : {
        "scheduledTimestamp" : {
          "$ref" : "#/definitions/ScheduledTimestamp"
        },
        "cancellationReason" : {
          "$ref" : "#/definitions/TransactionCancellationReason"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "destination" : {
          "$ref" : "#/definitions/InstrumentId"
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time when the transaction was created, expressed in Epoch timestamp using millisecond precision."
        },
        "description" : {
          "type" : "string",
          "description" : "The description details that are included in the transaction as reference.",
          "maxLength" : 255,
          "pattern" : "^[^0-9~!@#$%^*()_+={}\\\\|:;,<>/?]*$"
        },
        "id" : {
          "type" : "string",
          "description" : "The unique identifier of a Transfer transaction.",
          "pattern" : "^[0-9]+$"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "source" : {
          "$ref" : "#/definitions/InstrumentId"
        },
        "state" : {
          "$ref" : "#/definitions/TransactionState"
        },
        "destinationAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "executionTimestamp" : {
          "$ref" : "#/definitions/ExecutionTimestamp"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Transfer"
    },
    "Id" : {
      "type" : "string",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Id"
    },
    "CredentialId" : {
      "required" : [ "id", "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The identifier of the user.",
          "pattern" : "^[0-9]+$"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of user.",
          "maxLength" : 50,
          "pattern" : "^[a-zA-Z0-9_-]+$",
          "enum" : [ "ROOT", "USER" ]
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.CredentialId"
    },
    "PhysicalCardDetails" : {
      "required" : [ "pendingActivation" ],
      "properties" : {
        "deliveryTrackingMethod" : {
          "$ref" : "#/definitions/DeliveryTrackingMethod"
        },
        "pinBlocked" : {
          "type" : "boolean",
          "description" : "Indicates if the physical card is blocked due to providing incorrect PINs."
        },
        "deliveryAddress" : {
          "$ref" : "#/definitions/DeliveryAddress"
        },
        "deliveryMethod" : {
          "$ref" : "#/definitions/DeliveryMethod"
        },
        "pendingActivation" : {
          "type" : "boolean",
          "description" : "Indicates if the physical card is activated for physical usage such as with physical terminals."
        },
        "manufacturingState" : {
          "$ref" : "#/definitions/ManufacturingState"
        },
        "carrierType" : {
          "type" : "string"
        },
        "deliveryTrackingCode" : {
          "$ref" : "#/definitions/DeliveryTrackingCode"
        },
        "productReference" : {
          "type" : "string",
          "description" : "The unique reference indicating the configuration of the physical card. Example the card design."
        },
        "replacement" : {
          "type" : "object",
          "description" : "Indicates if the physical card is replaced by another card.",
          "properties" : {
            "replacementReason" : {
              "type" : "string",
              "description" : "The reason why the physical card was replaced.\n  - DAMAGED: The physical card was damaged and cannot be used at a physical terminal.\n  - LOST_STOLEN: The physical card was either lost or stolen and cannot be used.\n  - EXPIRED: The physical card expired.\n",
              "enum" : [ "DAMAGED", "LOST_STOLEN", "EXPIRED" ]
            },
            "replacementId" : {
              "type" : "string",
              "description" : "The unique identifier of the new card that replaces this card.",
              "pattern" : "^[0-9]+$"
            }
          }
        },
        "nameOnCardLine2" : {
          "type" : "string",
          "description" : "Line 2 of the 'name on card' field. For Physical cards, this field will be printed on the card. The maximum characters allowed will depend on the design chosen and will be provided to you by Weavr when setting up your plastic cards. This field is deprecated",
          "maxLength" : 27,
          "pattern" : "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻäácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.PhysicalCardDetails"
    },
    "DeliveryAddress" : {
      "required" : [ "addressLine1", "city", "country", "name", "postCode", "surname" ],
      "properties" : {
        "country" : {
          "type" : "string",
          "description" : "Country of the identity in ISO 3166 alpha-2 format.",
          "minLength" : 2,
          "maxLength" : 2,
          "pattern" : "^[A-Z]+$"
        },
        "city" : {
          "type" : "string",
          "maxLength" : 20
        },
        "surname" : {
          "type" : "string",
          "maxLength" : 100
        },
        "name" : {
          "type" : "string",
          "maxLength" : 100
        },
        "addressLine1" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "addressLine2" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "postCode" : {
          "type" : "string",
          "maxLength" : 10,
          "pattern" : "^[A-Za-z0-9 -]*$"
        },
        "state" : {
          "type" : "string",
          "maxLength" : 50
        }
      },
      "type" : "object",
      "description" : "The delivery address where the physical card is delivered.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.DeliveryAddress"
    },
    "ManagedAccount" : {
      "required" : [ "balances", "creationTimestamp", "currency", "friendlyName", "id", "profileId", "state" ],
      "properties" : {
        "balances" : {
          "$ref" : "#/definitions/ManagedInstrumentBalance"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time when the managed account was created, expressed in Epoch timestamp using millisecond precision."
        },
        "currency" : {
          "$ref" : "#/definitions/Currency"
        },
        "id" : {
          "type" : "string",
          "description" : "The unique identifier of a Managed Account.",
          "pattern" : "^[0-9]+$"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "state" : {
          "$ref" : "#/definitions/ManagedInstrumentState"
        },
        "friendlyName" : {
          "type" : "string",
          "description" : "The friendly name given to the managed account.",
          "minLength" : 1,
          "maxLength" : 50
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ManagedAccount"
    },
    "DebitModeCard" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManagedCard"
      }, {
        "required" : [ "parentManagedAccountId" ],
        "properties" : {
          "availableToSpend" : {
            "type" : "array",
            "description" : "The amount of funds from the parent managed account that are available to be spent through the card, in a given time interval.",
            "items" : {
              "$ref" : "#/definitions/AvailableToSpend"
            }
          },
          "parentManagedAccountId" : {
            "type" : "string",
            "description" : "Id of the managed account holding funds which the managed card will access, up to a configurable spend limit.",
            "pattern" : "^[0-9]+$"
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.DebitModeCard"
    },
    "OutgoingWireTransferBulkCreateResponse" : {
      "required" : [ "response" ],
      "properties" : {
        "response" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.OutgoingWireTransferBulkCreateResponse"
    },
    "SensitiveCardNumber" : {
      "properties" : {
        "value" : {
          "type" : "string",
          "maxLength" : 16
        }
      },
      "type" : "object",
      "description" : "The full card number of the card.\n\nUnless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card number will be tokenised.\n\nTo show the full unredacted card number to your user, you need to embed the Card number UI Component in your application. This accepts the tokenised card number and shows the unredacted card number to the user on screen.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SensitiveCardNumber"
    },
    "ChallengeExemptionReason" : {
      "type" : "string",
      "description" : "The Reason the transaction was exempted from SCA verification",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ChallengeExemptionReason"
    },
    "ManagedInstrumentState" : {
      "required" : [ "state" ],
      "properties" : {
        "destroyedReason" : {
          "$ref" : "#/definitions/DestroyedReason"
        },
        "blockedReason" : {
          "$ref" : "#/definitions/BlockedReason"
        },
        "state" : {
          "$ref" : "#/definitions/InstrumentState"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ManagedInstrumentState"
    },
    "SourceInstrumentType" : {
      "type" : "string",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SourceInstrumentType"
    },
    "TokenType" : {
      "type" : "string",
      "description" : "The auth token received can only be used to access the following endpoints:\n  - `/identities`\n  - `/access_token`\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.TokenType"
    },
    "BeneficiaryValidationFailure" : {
      "type" : "string",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.BeneficiaryValidationFailure"
    },
    "SCAOtpChannel" : {
      "type" : "string",
      "description" : "- \"SMS\": The one-time-password is sent as a text message\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SCAOtpChannel"
    },
    "LegalAddress" : {
      "required" : [ "addressLine1", "city", "country" ],
      "properties" : {
        "country" : {
          "type" : "string",
          "description" : "Country of the identity in ISO 3166 alpha-2 format.",
          "minLength" : 2,
          "maxLength" : 2,
          "pattern" : "^[A-Z]+$"
        },
        "city" : {
          "type" : "string"
        },
        "addressLine1" : {
          "type" : "string"
        },
        "addressLine2" : {
          "type" : "string"
        },
        "postCode" : {
          "type" : "string",
          "maxLength" : 10,
          "pattern" : "^[A-Za-z0-9 -]*$"
        },
        "state" : {
          "type" : "string",
          "maxLength" : 50
        }
      },
      "type" : "object",
      "description" : "The legal address of the company. This information is captured via the Due Diligence (KYB) process.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.LegalAddress"
    },
    "AddressWithNoRequiredFields" : {
      "properties" : {
        "country" : {
          "type" : "string",
          "description" : "The country of the address expressed in ISO 3166 alpha-2 format.",
          "minLength" : 2,
          "maxLength" : 2,
          "pattern" : "^[A-Z]+$"
        },
        "city" : {
          "type" : "string",
          "description" : "The city of the address."
        },
        "addressLine1" : {
          "type" : "string",
          "description" : "The first line of the address."
        },
        "addressLine2" : {
          "type" : "string",
          "description" : "The second line of the address."
        },
        "postCode" : {
          "type" : "string",
          "description" : "The post cost associated with the address.",
          "maxLength" : 10,
          "pattern" : "^[A-Za-z0-9 -]*$"
        },
        "state" : {
          "type" : "string",
          "description" : "The state of the address.",
          "maxLength" : 50
        }
      },
      "type" : "object",
      "description" : "The address, with none of the separate fields being set as required.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.AddressWithNoRequiredFields"
    },
    "TransactionBulkCancelRequest" : {
      "required" : [ "cancellations" ],
      "properties" : {
        "cancellations" : {
          "type" : "array",
          "description" : "Contains the details of the transactions to be cancelled.",
          "items" : {
            "$ref" : "#/definitions/TransactionCancelRequest"
          }
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.TransactionBulkCancelRequest"
    },
    "PrepaidModeCard" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManagedCard"
      }, {
        "properties" : {
          "balances" : {
            "$ref" : "#/definitions/ManagedInstrumentBalance"
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.PrepaidModeCard"
    },
    "DeliveryMethod" : {
      "type" : "string",
      "description" : "The delivery methods supported for delivering printed physical cards. If not specified, the STANDARD_DELIVERY method will be used.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.DeliveryMethod"
    },
    "BlockedReason" : {
      "type" : "string",
      "description" : "The reason why the instrument has been blocked:\n  - USER: The root, or an authorised user, of the identity owning the instrument has temporarily blocked the instrument.\n  - SYSTEM: The platform or an administrator of the platform has temporarily blocked the instrument.\n  - LOST: The instrument has been blocked because it was marked as lost.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.BlockedReason"
    },
    "ManagedCardRequest" : {
      "required" : [ "billingAddress", "friendlyName", "mode", "nameOnCard", "profileId" ],
      "properties" : {
        "mode" : {
          "type" : "string",
          "description" : "The card can be created in prepaid mode or debit mode.\n\n- A prepaid mode card has its own balance and can have funds transferred to or from it.\n- A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit.\n"
        },
        "authForwardingDefaultTimeoutDecision" : {
          "type" : "string",
          "description" : "Default decision for auth forwarding on timeout",
          "enum" : [ "APPROVE", "DECLINE" ]
        },
        "nameOnCard" : {
          "type" : "string",
          "description" : "The card holder's name for the card.\n\nThis may be verified by merchants when the card is used online. For Physical cards, this field will be printed on the card.\nThe maximum characters allowed will depend on the design chosen and will be provided to you by Weavr when setting up your plastic cards.\n",
          "minLength" : 1,
          "maxLength" : 27,
          "pattern" : "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻäácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "digitalWallets" : {
          "$ref" : "#/definitions/DigitalWallets"
        },
        "threeDSecureAuthConfig" : {
          "$ref" : "#/definitions/ThreeDSecureAuthConfig"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "billingAddress" : {
          "$ref" : "#/definitions/Address"
        },
        "nameOnCardLine2" : {
          "type" : "string",
          "description" : "Line 2 of the 'name on card' field. For Physical cards, this field will be printed on the card. The maximum characters allowed will depend on the design chosen and will be provided to you by Weavr when setting up your plastic cards.",
          "maxLength" : 27,
          "pattern" : "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻäácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$"
        },
        "friendlyName" : {
          "type" : "string",
          "description" : "The friendly name for the card.",
          "minLength" : 1,
          "maxLength" : 50
        },
        "cardholderMobileNumber" : {
          "type" : "string",
          "description" : "The mobile number including country code of the card holder.\n\nFor transactions that require a 3DS challenge, an SMS with a code will be sent on this number, to be entered during an online purchase.\n",
          "minLength" : 5,
          "maxLength" : 20,
          "pattern" : "^\\\\+[0-9]+$"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ManagedCardRequest"
    },
    "Statement" : {
      "properties" : {
        "entry" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StatementEntry"
          }
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The total number of records (excluding the paging limit)."
        },
        "responseCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The total number of records returned in this response."
        }
      },
      "type" : "object",
      "description" : "The list of statement entries.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Statement"
    },
    "ConsumerRootUser" : {
      "required" : [ "active", "email", "emailVerified", "id", "mobile", "mobileNumberVerified", "name", "surname" ],
      "properties" : {
        "placeOfBirth" : {
          "type" : "string",
          "description" : "The place of birth of the consumer root user."
        },
        "occupation" : {
          "$ref" : "#/definitions/Occupation"
        },
        "address" : {
          "$ref" : "#/definitions/AddressWithNoRequiredFields"
        },
        "mobile" : {
          "$ref" : "#/definitions/Mobile"
        },
        "active" : {
          "type" : "boolean",
          "description" : "The state of the root user. If false, then the user will not be able to log in."
        },
        "mobileNumberVerified" : {
          "type" : "boolean",
          "description" : "Indicates if the root user's mobile number has been verified."
        },
        "dateOfBirth" : {
          "$ref" : "#/definitions/Date"
        },
        "emailVerified" : {
          "type" : "boolean",
          "description" : "Indicates if the root user's email has been verified."
        },
        "nationality" : {
          "$ref" : "#/definitions/Nationality"
        },
        "surname" : {
          "type" : "string",
          "description" : "Last name of the root user.",
          "maxLength" : 100
        },
        "name" : {
          "type" : "string",
          "description" : "First name of the root user.",
          "maxLength" : 100
        },
        "id" : {
          "$ref" : "#/definitions/IdentityId"
        },
        "email" : {
          "$ref" : "#/definitions/Email"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ConsumerRootUser"
    },
    "Fee" : {
      "required" : [ "feeType", "source" ],
      "properties" : {
        "source" : {
          "$ref" : "#/definitions/InstrumentId"
        },
        "feeType" : {
          "type" : "string",
          "description" : "The fee type as defined in the Multi Portal."
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Fee"
    },
    "StatementEntry" : {
      "required" : [ "entryState", "processedTimestamp", "transactionAmount", "transactionId" ],
      "properties" : {
        "availableBalanceAfter" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "actualBalanceAfter" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "additionalFields" : {
          "type" : "object",
          "description" : "A Map of additional fields. Possible values include fee information. The possible entries are `merchantName`, `merchantCategoryCode`, `merchantTerminalCountry`, `sourceInstrumentType`, `sourceInstrumentId`, `destinationInstrumentType`, `destinationInstrumentId`, `forexPaddingCurrency`, `forexPaddingAmount`, `note`, `sourceInstrumentFriendlyName`, `destinationInstrumentFriendlyName`, `sourceIdentityType`, `sourceIdentityId`, `sourceIdentityName`, `destinationIdentityType`, `destinationIdentityId`, `destinationIdentityName`, `exchangeRate`, `authorisationState`, `authorisationRelatedId`, `settlementRelatedId`, `chargeFeeType`, `relatedTransactionId`, `relatedTransactionIdType`, `beneficiaryName`, `beneficiaryAccount`, `beneficiaryBankCode`, `merchantId`, `merchantTransactionType`, `systemTransactionType`, `authorisationCode`, `relatedCardId`, `sender`, `forexFeeCurrency`, `forexFeeAmount`, `senderIban`, `senderReference`, `mandateId`, `merchantReference`, `description`, `declineReason` and `spendRuleFailedReason`.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "processedTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp when the transaction was processed by the system, expressed in Epoch timestamp using millisecond precision."
        },
        "actualBalanceAdjustment" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "entryState" : {
          "$ref" : "#/definitions/StatementEntryState"
        },
        "transactionId" : {
          "$ref" : "#/definitions/TransactionId"
        },
        "firstName" : {
          "type" : "string"
        },
        "transactionFee" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "originalAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "forexRate" : {
          "$ref" : "#/definitions/ScaledAmount"
        },
        "cardholderFee" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "transactionAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "balanceAfter" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "sourceAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "availableBalanceAdjustment" : {
          "$ref" : "#/definitions/CurrencyAmount"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.StatementEntry"
    },
    "Mobile" : {
      "required" : [ "countryCode", "number" ],
      "properties" : {
        "number" : {
          "type" : "string",
          "description" : "The mobile number of the user - excluding country code.",
          "minLength" : 1,
          "maxLength" : 15,
          "pattern" : "^[0-9]+$"
        },
        "countryCode" : {
          "type" : "string",
          "description" : "The country code of the user mobile number (e.g. +44).",
          "minLength" : 1,
          "maxLength" : 6
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Mobile"
    },
    "Nationality" : {
      "type" : "string",
      "description" : "Nationality of the user - using ISO 3166 alpha-2.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Nationality"
    },
    "Occupation" : {
      "type" : "string",
      "description" : "The industry of the identity.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Occupation"
    },
    "ThreeDSecureAuthConfig" : {
      "required" : [ "linkedUserId", "primaryChannel" ],
      "properties" : {
        "linkedUserId" : {
          "type" : "string",
          "description" : "The Authorised user whose authentication / billing details will be reflected on the card for verification purposes such as 3ds.",
          "maxLength" : 19,
          "pattern" : "^[0-9]+$"
        },
        "fallbackChannel" : {
          "type" : "string",
          "description" : "Fallback Authentication Method",
          "enum" : [ "OTP_SMS" ]
        },
        "primaryChannel" : {
          "type" : "string",
          "description" : "Primary Authentication Method",
          "enum" : [ "OTP_SMS", "BIOMETRICS", "TWILIO_AUTHY" ]
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ThreeDSecureAuthConfig"
    },
    "MerchantData" : {
      "required" : [ "merchantCategoryCode", "merchantName" ],
      "properties" : {
        "merchantCity" : {
          "type" : "string",
          "description" : "The merchant city (if available)"
        },
        "merchantDescription" : {
          "type" : "string",
          "description" : "The merchant description"
        },
        "merchantContact" : {
          "type" : "string",
          "description" : "The merchant's contact (if available)"
        },
        "merchantState" : {
          "type" : "string",
          "description" : "The merchant state address (if available)"
        },
        "merchantTelephone" : {
          "type" : "string",
          "description" : "The merchant telephone number"
        },
        "merchantName" : {
          "type" : "string",
          "description" : "The name of the merchant where the authorisation has been made."
        },
        "merchantNameOther" : {
          "type" : "string",
          "description" : "The alternative merchant name"
        },
        "merchantStreet" : {
          "type" : "string",
          "description" : "The merchant street address (if available)"
        },
        "merchantId" : {
          "type" : "string",
          "description" : "The merchant ID."
        },
        "merchantCategoryCode" : {
          "type" : "string",
          "description" : "The merchant category code."
        },
        "merchantPostalCode" : {
          "type" : "string",
          "description" : "The merchant postal code (if available)"
        },
        "merchantNetworkId" : {
          "type" : "string",
          "description" : "The merchant's network id"
        },
        "merchantCountry" : {
          "type" : "string",
          "description" : "The merchant country address"
        },
        "merchantURL" : {
          "type" : "string",
          "description" : "The merchant URL"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.MerchantData"
    },
    "SendCreateRequest" : {
      "required" : [ "destination", "destinationAmount", "profileId", "source" ],
      "properties" : {
        "scheduledTimestamp" : {
          "$ref" : "#/definitions/ScheduledTimestamp"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "destination" : {
          "type" : "object"
        },
        "description" : {
          "type" : "string",
          "description" : "The description details that are passed to the beneficiary.",
          "maxLength" : 255,
          "pattern" : "^[^0-9~!@#$%^*()_+={}\\\\|:;,<>/?]*$"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "source" : {
          "$ref" : "#/definitions/InstrumentId"
        },
        "destinationAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SendCreateRequest"
    },
    "BeneficiaryBatchState" : {
      "type" : "string",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.BeneficiaryBatchState"
    },
    "CardLevelSpendRules" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseCardLevelSpendRules"
      }, {
        "properties" : {
          "minTransactionAmount" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The minimum transaction amount, in card currency, that is allowed. If the transaction amount is less than this value, then the transaction will be declined."
          },
          "maxTransactionAmount" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The maximum transaction amount, in card currency, that is allowed. If the transaction amount is greater than this value, then the transaction will be declined."
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.CardLevelSpendRules"
    },
    "KyiStatus" : {
      "type" : "string",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.KyiStatus"
    },
    "ManufacturingState" : {
      "type" : "string",
      "description" : "Information on the manufacturing of the physical card, as follows:\n  - REQUESTED: The upgrade of the card to physical has been requested.\n  - SENT_FOR_FULFILLMENT - The card has been sent for printing.\n  - DISPATCHED: The card has been manufactured and dispatched.\n  - DELIVERED: The card has been received and activated by the recipient.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ManufacturingState"
    },
    "Tag" : {
      "type" : "string",
      "description" : "The tag field is a custom field that can be used to search and filter.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Tag"
    },
    "BasicBeneficiary" : {
      "required" : [ "beneficiaryDetails", "beneficiaryInformation", "trustLevel" ],
      "properties" : {
        "beneficiaryDetails" : {
          "type" : "object",
          "description" : "The object representing the beneficiary instrument details."
        },
        "trustLevel" : {
          "$ref" : "#/definitions/BeneficiaryTrustLevel"
        },
        "beneficiaryInformation" : {
          "type" : "object",
          "description" : "The object representing the beneficiary details."
        },
        "group" : {
          "type" : "string",
          "description" : "A custom field that can be used to categorise a beneficiary for easier searching and filtering."
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.BasicBeneficiary"
    },
    "FasterPaymentsBankDetails" : {
      "required" : [ "accountNumber", "sortCode" ],
      "properties" : {
        "accountNumber" : {
          "type" : "string",
          "description" : "Account number, required for wire transfer over Faster Payments.",
          "minLength" : 8,
          "maxLength" : 8,
          "pattern" : "^[0-9]{8}$"
        },
        "sortCode" : {
          "type" : "string",
          "description" : "Sort code, required for wire transfer over Faster Payments.",
          "minLength" : 6,
          "maxLength" : 6,
          "pattern" : "^[0-9]{6}$"
        }
      },
      "type" : "object",
      "description" : "Bank details used in case the wire transfer is executed over Faster Payments.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.FasterPaymentsBankDetails"
    },
    "Beneficiary" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BasicBeneficiary"
      }, {
        "required" : [ "id", "relatedOperationBatches", "state" ],
        "properties" : {
          "relatedOperationBatches" : {
            "type" : "array",
            "description" : "The object representing the list of batch IDs and the operations that occurred for each batch.",
            "items" : {
              "$ref" : "#/definitions/BeneficiaryOperationBatchId"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of a Beneficiary.",
            "pattern" : "^[0-9]+$"
          },
          "state" : {
            "$ref" : "#/definitions/BeneficiaryState"
          },
          "validationFailure" : {
            "$ref" : "#/definitions/BeneficiaryValidationFailure"
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Beneficiary"
    },
    "Email" : {
      "type" : "string",
      "description" : "E-mail Address of the user",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Email"
    },
    "OutgoingWireTransferState" : {
      "type" : "string",
      "description" : "The state of the Outgoing wire transfer transaction, as follows:\n  - INVALID: The wire transfer has failed initial validation checks.\n  - PENDING_CHALLENGE: The wire transfer requires verification before it can be submitted. _Use the `/outgoing_wire_transfers/{id}/challenges/otp/{channel}` API endpoint to start the verification process._\n  - SUBMITTED: The wire transfer has been initiated over the selected route.\n  - REJECTED: The wire transfer submitted was rejected.\n  - APPROVED: The wire transfer submission was approved.\n  - FAILED: There was an issue with the wire transfer, and the transaction has failed.\n  - COMPLETED: The requested funds have been sent from the source instrument.\n  - RETURNED: The wire transfer has been returned to the sender\n  - SCHEDULED: The wire transfer will be executed at the scheduled time.\n  - CANCELLED: The scheduled wire transfer has been cancelled.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.OutgoingWireTransferState"
    },
    "InstrumentState" : {
      "type" : "string",
      "description" : "The state of the instrument indicating what it can and cannot do as follows:\n  - ACTIVE: The instrument is in an active state and can be used in transactions.\n  - BLOCKED: The instrument is temporarily blocked and cannot be used. Any funds on the instrument are also frozen. The `blockedReason` provides more information as to why it was blocked.\n  - DESTROYED: The instrument has been permanently destroyed. The `destroyReason` provides more information as to why it was destroyed.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.InstrumentState"
    },
    "DigitalWallets" : {
      "properties" : {
        "walletsEnabled" : {
          "type" : "boolean",
          "description" : "Indicates whether the card is enabled for tokenisation in a digital wallet."
        },
        "artworkReference" : {
          "type" : "string",
          "description" : "The artwork reference that will be used if the card is enabled for tokenisation in a digital wallet."
        },
        "pushProvisioningEnabled" : {
          "type" : "boolean",
          "description" : "Indicates whether the card is enabled for push provisioning in a digital wallet."
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.DigitalWallets"
    },
    "CreatedCorporate" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Corporate"
      }, {
        "required" : [ "rootUser" ],
        "properties" : {
          "rootUser" : {
            "$ref" : "#/definitions/CreatedCorporateRootUser"
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.CreatedCorporate"
    },
    "DeliveryTrackingMethod" : {
      "type" : "string",
      "description" : "The delivery tracking method for tracking the physical card's delivery status.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.DeliveryTrackingMethod"
    },
    "Send" : {
      "required" : [ "creationTimestamp", "destinationAmount", "id", "profileId", "source", "state" ],
      "properties" : {
        "scheduledTimestamp" : {
          "$ref" : "#/definitions/ScheduledTimestamp"
        },
        "cancellationReason" : {
          "$ref" : "#/definitions/TransactionCancellationReason"
        },
        "destination" : {
          "type" : "object",
          "description" : "The destination managed account or card to where the funds were sent."
        },
        "description" : {
          "type" : "string",
          "description" : "The description details that are passed to the beneficiary.",
          "maxLength" : 255,
          "pattern" : "^[^0-9~!@#$%^*()_+={}\\\\|:;,<>/?]*$"
        },
        "source" : {
          "$ref" : "#/definitions/InstrumentId"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time when the transaction was created, expressed in Epoch timestamp using millisecond precision."
        },
        "id" : {
          "type" : "string",
          "description" : "The unique identifier of a send transaction.",
          "pattern" : "^[0-9]+$"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "state" : {
          "$ref" : "#/definitions/SendState"
        },
        "challengeExemptionReason" : {
          "$ref" : "#/definitions/ChallengeExemptionReason"
        },
        "destinationAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "executionTimestamp" : {
          "$ref" : "#/definitions/ExecutionTimestamp"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Send"
    },
    "Industry" : {
      "type" : "string",
      "description" : "The industry of the identity.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Industry"
    },
    "SendBulkCreateResponse" : {
      "required" : [ "response" ],
      "properties" : {
        "response" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SendBulkCreateResponse"
    },
    "SpendLimit" : {
      "required" : [ "interval", "value" ],
      "properties" : {
        "interval" : {
          "$ref" : "#/definitions/SpendLimitInterval"
        },
        "value" : {
          "$ref" : "#/definitions/CurrencyAmount"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SpendLimit"
    },
    "ProfileLevelSpendRules" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CommonLevelSpendRules"
      }, {
        "properties" : {
          "authForwardingEnabled" : {
            "type" : "boolean",
            "description" : "Indicates if auth forwarding is enabled on profile level"
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ProfileLevelSpendRules"
    },
    "SyntaxError" : {
      "properties" : {
        "invalidFields" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "fieldName" : {
                "type" : "string"
              },
              "params" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "error" : {
                "type" : "string",
                "enum" : [ "REQUIRED", "HAS_TEXT", "REQUIRES", "SIZE", "RANGE", "IN", "NOT_IN", "REGEX", "EXACTLY", "AT_LEAST", "AT_MOST", "ALL_OR_NONE" ]
              }
            }
          }
        }
      },
      "type" : "object",
      "description" : "Is returned as part of an HTTP error response whenever a syntax error is detected. A list of the fields together with their syntax error will be provided.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SyntaxError"
    },
    "SensitivePin" : {
      "required" : [ "value" ],
      "properties" : {
        "value" : {
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 24
        }
      },
      "type" : "object",
      "description" : "The PIN used for in-person transactions done with physical cards.\n\nUnless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card's PIN will be tokenised.\n\nTo show the PIN to your user, you need to embed the Display Card PIN UI Component in your application. This accepts the tokenised PIN and shows the plain text PIN to the user on screen.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SensitivePin"
    },
    "StatementEntryState" : {
      "type" : "string",
      "description" : "The transaction entry state, as follows:\n  - PENDING: The transaction has started and some of the fund movements have completed, however additional fund movements are still pending to finalise the transaction.\n  - COMPLETED: All fund movements for a transaction have completed.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.StatementEntryState"
    },
    "PasswordInfo" : {
      "required" : [ "identityId" ],
      "properties" : {
        "expiryDate" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The millisecond timestamp indicating when the password will expire. If 0, then this password will not expire."
        },
        "identityId" : {
          "$ref" : "#/definitions/IdentityId"
        }
      },
      "type" : "object",
      "description" : "Additional information related to the user's password.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.PasswordInfo"
    },
    "ExecutionTimestamp" : {
      "type" : "string",
      "description" : "The epoch timestamp at which the transaction was executed, transitioning to a final state such as COMPLETED, REJECTED, or FAILED.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ExecutionTimestamp"
    },
    "ConsumerSourceOfFunds" : {
      "type" : "string",
      "description" : "The consumer's source of funds.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ConsumerSourceOfFunds"
    },
    "BeneficiaryState" : {
      "type" : "string",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.BeneficiaryState"
    },
    "CreatedCorporateRootUser" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CorporateRootUser"
      }, {
        "required" : [ "passwordAlreadySet" ],
        "properties" : {
          "passwordAlreadySet" : {
            "type" : "boolean",
            "description" : "When the corporate root user is a single email multiple identities user, this field returns true, indicating that there is no need to call the `passwordCreate` operation for this user."
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.CreatedCorporateRootUser"
    },
    "LoginWithPasswordRequest" : {
      "required" : [ "email", "password" ],
      "properties" : {
        "password" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.LoginWithPasswordRequest"
    },
    "PrepaidModeCardRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManagedCardRequest"
      }, {
        "required" : [ "currency" ],
        "properties" : {
          "currency" : {
            "$ref" : "#/definitions/Currency"
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.PrepaidModeCardRequest"
    },
    "AvailableToSpend" : {
      "properties" : {
        "interval" : {
          "$ref" : "#/definitions/SpendLimitInterval"
        },
        "value" : {
          "$ref" : "#/definitions/CurrencyAmount"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.AvailableToSpend"
    },
    "OutgoingWireTransfer" : {
      "required" : [ "creationTimestamp", "id", "profileId", "sourceInstrument", "state", "transferAmount" ],
      "properties" : {
        "scheduledTimestamp" : {
          "$ref" : "#/definitions/ScheduledTimestamp"
        },
        "cancellationReason" : {
          "$ref" : "#/definitions/TransactionCancellationReason"
        },
        "transferAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "destination" : {
          "type" : "object"
        },
        "description" : {
          "type" : "string",
          "description" : " Transaction description.",
          "maxLength" : 50
        },
        "type" : {
          "$ref" : "#/definitions/OutgoingWireTransferType"
        },
        "sourceInstrument" : {
          "type" : "object",
          "description" : "The source managed account from where the funds were taken.",
          "properties" : {
            "id" : {
              "type" : "string",
              "pattern" : "^[0-9]+$"
            },
            "type" : {
              "type" : "string",
              "enum" : [ "managed_accounts" ]
            }
          }
        },
        "rejectedInfo" : {
          "$ref" : "#/definitions/OutgoingWireTransferRejectedInfo"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time when the transaction was created, expressed in Epoch timestamp using millisecond precision."
        },
        "id" : {
          "type" : "string",
          "description" : "The unique identifier of an Outgoing Wire Transfer transaction.",
          "pattern" : "^[0-9]+$"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "state" : {
          "$ref" : "#/definitions/OutgoingWireTransferState"
        },
        "challengeExemptionReason" : {
          "$ref" : "#/definitions/ChallengeExemptionReason"
        },
        "executionTimestamp" : {
          "$ref" : "#/definitions/ExecutionTimestamp"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.OutgoingWireTransfer"
    },
    "SensitiveCvv" : {
      "properties" : {
        "value" : {
          "type" : "string",
          "maxLength" : 3
        }
      },
      "type" : "object",
      "description" : "The CVV of the card.\n\nUnless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card's CVV will be tokenised.\n\nTo show the card's CVV to your user, you need to embed the CVV UI Component in your application. This accepts the tokenised CVV and shows the plain text CVV number to the user on screen.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SensitiveCvv"
    },
    "AllLevelSpendRules" : {
      "properties" : {
        "allowAtm" : {
          "type" : "boolean",
          "description" : "Indicates if an ATM Withdrawal transaction is allowed on the card. This field is deprecated - use \"cardLevelSpendRules\".\"allowAtm\" instead."
        },
        "profileLevelSpendRules" : {
          "$ref" : "#/definitions/ProfileLevelSpendRules"
        },
        "allowECommerce" : {
          "type" : "boolean",
          "description" : "Indicates if an online transaction is allowed on the card. This field is deprecated - use \"cardLevelSpendRules\".\"allowECommerce\" instead."
        },
        "cardLevelSpendRules" : {
          "$ref" : "#/definitions/CardLevelSpendRules"
        },
        "blockedMerchantCategories" : {
          "type" : "array",
          "description" : "Blacklist MCC: A list of disallowed merchant category codes (MCCs). If the MCC matches, then the transaction will be declined. If an MCC is also in the allowed list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"blockedMerchantCategories\" instead.",
          "items" : {
            "type" : "string"
          }
        },
        "allowedMerchantIds" : {
          "type" : "array",
          "description" : "Whitelist Merchant Id: A list of allowed merchant IDs. If the Merchant Id does not match, then the transaction will be declined. If a Merchant Id is also provided in the blocked list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"allowedMerchantIds\" instead.",
          "items" : {
            "type" : "string"
          }
        },
        "blockedMerchantCountries" : {
          "type" : "array",
          "description" : "Blacklist Merchant Country: A list of disallowed merchant countries, in ISO 3166-1 alpha-2 format. If the Merchant country matches, then the transaction will be declined. If a Merchant Country is also in the allowed list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"blockedMerchantCountries\" instead.",
          "items" : {
            "type" : "string",
            "minLength" : 2,
            "maxLength" : 2,
            "pattern" : "^[A-Z]{2}$"
          }
        },
        "allowCashback" : {
          "type" : "boolean",
          "description" : "Indicates if a cashback transaction at a physical terminal is allowed on the card. This field is deprecated - use \"cardLevelSpendRules\".\"allowCashback\" instead."
        },
        "spendLimit" : {
          "type" : "array",
          "description" : "The total amount of funds that can be spent using this card, in a given time interval. This field is deprecated - use \"cardLevelSpendRules\".\"spendLimit\" instead.",
          "items" : {
            "$ref" : "#/definitions/SpendLimit"
          }
        },
        "blockedMerchantIds" : {
          "type" : "array",
          "description" : "Blacklist Merchant Id: A list of disallowed merchant IDs. If the Merchant Id matches, then the transaction will be declined. If a Merchant Id is also in the allowed list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"blockedMerchantIds\" instead.",
          "items" : {
            "type" : "string"
          }
        },
        "maxTransactionAmount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The maximum transaction amount, in card currency, that is allowed. If the transaction amount is greater than this value, then the transaction will be declined. Omit this, or set to 0 if no maximum transaction amount is to be set. This field is deprecated - use \"cardLevelSpendRules\".\"maxTransactionAmount\" instead."
        },
        "allowedMerchantCategories" : {
          "type" : "array",
          "description" : "Whitelist MCC: A list of allowed merchant category codes (MCCs). If the MCC does not match, then the transaction will be declined. If an MCC is also in the blocked list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"allowedMerchantCategories\" instead.",
          "items" : {
            "type" : "string"
          }
        },
        "allowedMerchantCountries" : {
          "type" : "array",
          "description" : "Whitelist Merchant Country: A list of allowed merchant countries, in ISO 3166-1 alpha-2 format. If the Merchant country does not match, then the transaction will be declined. If a Merchant Country is also provided in the blocked list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"allowedMerchantCountries\" instead.",
          "items" : {
            "type" : "string",
            "minLength" : 2,
            "maxLength" : 2,
            "pattern" : "^[A-Z]{2}$"
          }
        },
        "identityLevelSpendRules" : {
          "$ref" : "#/definitions/IdentityLevelSpendRules"
        },
        "minTransactionAmount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The minimum transaction amount, in card currency, that is allowed. If the transaction amount is less than this value, then the transaction will be declined. Omit this, or set to 0 if no maximum transaction amount is to be set. This field is deprecated - use \"cardLevelSpendRules\".\"minTransactionAmount\" instead."
        },
        "allowCreditAuthorisations" : {
          "type" : "boolean",
          "description" : "Indicates if a the card can receive a credit transaction. This field is deprecated - use \"cardLevelSpendRules\".\"allowCashback\" instead."
        },
        "allowContactless" : {
          "type" : "boolean",
          "description" : "Indicates if a contactless transaction is allowed on the card. This field is deprecated - use \"cardLevelSpendRules\".\"allowContactless\" instead."
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.AllLevelSpendRules"
    },
    "IdentityLevelSpendRules" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CommonLevelSpendRules"
      }, {
        "properties" : {
          "minTransactionAmount" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The minimum transaction amount, in card currency, that is allowed. If the transaction amount is less than this value, then the transaction will be declined. Omit this, or set to 0 if no maximum transaction amount is to be set."
          },
          "maxTransactionAmount" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The maximum transaction amount, in card currency, that is allowed. If the transaction amount is greater than this value, then the transaction will be declined."
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.IdentityLevelSpendRules"
    },
    "SendState" : {
      "type" : "string",
      "description" : "The state of the send transaction, as follows:\n - INVALID: The send transaction has failed initial validation checks. \n - INITIALISED: The initial state of a send transaction when SCA is not required.\n - PENDING_CHALLENGE: The send transaction requires verification before it can be initialised. Use the /sends/{id}/challenges/otp/{channel} API endpoint to start the verification process.\n - PENDING: The send transaction has exceeded the destination limit and is pending treasury approval.\n - APPROVED: The send transaction was approved.\n - COMPLETED: The send transaction has been completed.\n - REJECTED: The send transaction was rejected.\n - FAILED: There was an issue with the send transaction, and the transaction has failed.\n - SCHEDULED: The send transaction will be executed at the scheduled time.\n - CANCELLED: The scheduled send transaction has been cancelled.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SendState"
    },
    "InstrumentId" : {
      "required" : [ "id", "type" ],
      "properties" : {
        "id" : {
          "$ref" : "#/definitions/Id"
        },
        "type" : {
          "$ref" : "#/definitions/InstrumentType"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.InstrumentId"
    },
    "CurrencyAmount" : {
      "required" : [ "amount", "currency" ],
      "properties" : {
        "amount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The monetary amount, scaled to the lowest denomination of the currency.\n\nExample, an amount of 1000 for a EUR currency is actually 1000 Euro cents or EUR 10.00.\n"
        },
        "currency" : {
          "$ref" : "#/definitions/Currency"
        }
      },
      "type" : "object",
      "description" : "The object representing a monetary amount in a particular currency.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.CurrencyAmount"
    },
    "Nonce" : {
      "type" : "string",
      "description" : "A randomly generated one-time use code.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Nonce"
    },
    "BeneficiaryOperationBatchId" : {
      "required" : [ "batchId", "operation" ],
      "properties" : {
        "batchId" : {
          "type" : "string",
          "description" : "The unique identifier of a Beneficiary.",
          "pattern" : "^[0-9]+$"
        },
        "operation" : {
          "$ref" : "#/definitions/BeneficiaryBatchOperation"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.BeneficiaryOperationBatchId"
    },
    "CompanyPosition" : {
      "type" : "string",
      "description" : "The company position of the Corporate Root User.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.CompanyPosition"
    },
    "OutgoingWireTransferRejectedInfo" : {
      "type" : "string",
      "description" : "Additional info when the outgoing wire transfer has been rejected, as follows:\n  - SYSTEM: The wire transfer was rejected by the system.\n  - USER: The wire transfer was rejected by the user.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.OutgoingWireTransferRejectedInfo"
    },
    "TokenResponse" : {
      "properties" : {
        "token" : {
          "type" : "string",
          "description" : "An authorisation token to be used in the Authorization header for secured operations."
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.TokenResponse"
    },
    "InstrumentDetailsBeneficiary" : {
      "required" : [ "instrument" ],
      "properties" : {
        "instrument" : {
          "$ref" : "#/definitions/InstrumentId"
        }
      },
      "type" : "object",
      "description" : "Represents a Weavr beneficiary instrument typically used in Send transactions.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.InstrumentDetailsBeneficiary"
    },
    "ManagedInstrumentBalance" : {
      "properties" : {
        "actualBalance" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The funds that are actually on the instrument. Funds that are blocked or pending, due to for example, a purchase authorisation or a pending deposit, are included in the actual balance."
        },
        "availableBalance" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The funds available for transactions on the instrument. Funds that are blocked or pending are not included in the available balance."
        }
      },
      "type" : "object",
      "description" : "Instruments with funds have 2 balances, the `availableBalance` indicating the funds that are available for transactions such as purchases, and the `actualBalance` indicating the funds that are actually on the instrument.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ManagedInstrumentBalance"
    },
    "LoginWithPasswordResponse" : {
      "properties" : {
        "credentials" : {
          "$ref" : "#/definitions/CredentialId"
        },
        "identity" : {
          "$ref" : "#/definitions/IdentityId"
        },
        "tokenType" : {
          "$ref" : "#/definitions/TokenType"
        },
        "token" : {
          "type" : "string"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.LoginWithPasswordResponse"
    },
    "DebitModeCardRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManagedCardRequest"
      }, {
        "required" : [ "parentManagedAccountId" ],
        "properties" : {
          "parentManagedAccountId" : {
            "type" : "string",
            "description" : "Id of the managed account holding funds which the managed card will access, up to a configurable spend limit.",
            "pattern" : "^[0-9]+$"
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.DebitModeCardRequest"
    },
    "BankAccountDetailsBeneficiary" : {
      "required" : [ "bankAccountDetails" ],
      "properties" : {
        "address" : {
          "type" : "string",
          "description" : "The beneficiary's address.",
          "minLength" : 1,
          "maxLength" : 150
        },
        "bankAccountDetails" : {
          "type" : "object",
          "description" : "Details of the beneficiary bank account, depending on the type of transfer chosen."
        },
        "bankName" : {
          "type" : "string",
          "description" : "The beneficiary's bank name."
        },
        "bankAddress" : {
          "type" : "string",
          "description" : "The beneficiary's bank address.",
          "minLength" : 1,
          "maxLength" : 150
        },
        "bankCountry" : {
          "type" : "string",
          "description" : "The beneficiary's bank country in ISO 3166 alpha-2 format.",
          "minLength" : 2,
          "maxLength" : 2,
          "pattern" : "^[A-Z]{2}$"
        }
      },
      "type" : "object",
      "description" : "Represent the beneficiary bank account typically used in Outgoing Wire Transfer transactions.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.BankAccountDetailsBeneficiary"
    },
    "CardHolderPresent" : {
      "type" : "string",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.CardHolderPresent"
    },
    "ConsumerBeneficiaryType" : {
      "required" : [ "fullName" ],
      "properties" : {
        "fullName" : {
          "type" : "string",
          "description" : "The person beneficiary name. The allowed length and pattern is dependent on the beneficiary details type:\n\n`InstrumentDetailsBeneficiary` or `BankAccountDetailsBeneficiary` with `SepaBankDetails`: >= `1` character and <= `150` characters\n\n`BankAccountDetailsBeneficiary` with `FasterPaymentsBankDetails`: >= `1` character and <= `140` characters with a pattern of `^[a-zA-Z0-9\\/\\-?:().,’+\\s#=!\"%&*<>;{@\\r\\n]*$`\n(please note that the `’` symbol is the unicode value U+2019 (right single quotation mark) and not the unicode value U+0027 (apostrophe))\n"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ConsumerBeneficiaryType"
    },
    "BeneficiaryId" : {
      "required" : [ "beneficiaryId" ],
      "properties" : {
        "beneficiaryId" : {
          "$ref" : "#/definitions/Id"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.BeneficiaryId"
    },
    "TokenError" : {
      "properties" : {
        "errorCode" : {
          "type" : "string",
          "enum" : [ "TOKEN_EXPIRED", "TOKEN_NOT_FOUND" ]
        }
      },
      "type" : "object",
      "description" : "The used token is expired or not found",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.TokenError"
    },
    "SCAFactorStatus" : {
      "type" : "string",
      "description" : "The state of the factor type.\n- `PENDING_VERIFICATION` : The user has started the enrolment process but still hasn't completed enrolment. Challenges cannot be used before they are verified.\n- `ACTIVE` : The user has successfully completed enrolment and the challenge can be used to verify transactions.\n- `INACTIVE` : The user has rejected the enrolment.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SCAFactorStatus"
    },
    "VerificationCode" : {
      "type" : "string",
      "description" : "A randomly generated one-time use code used to verify the user's email address or mobile number.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.VerificationCode"
    },
    "User" : {
      "required" : [ "active", "email", "id", "identity", "name", "surname" ],
      "properties" : {
        "identity" : {
          "$ref" : "#/definitions/IdentityId"
        },
        "surname" : {
          "type" : "string",
          "description" : "The last name of the user.",
          "maxLength" : 100
        },
        "name" : {
          "type" : "string",
          "description" : "The first name of the user.",
          "maxLength" : 100
        },
        "mobile" : {
          "$ref" : "#/definitions/Mobile"
        },
        "active" : {
          "type" : "boolean",
          "description" : "The state of the user. If the `active` attribute is false, then the user will not be able to log in."
        },
        "dateOfBirth" : {
          "$ref" : "#/definitions/Date"
        },
        "id" : {
          "type" : "string",
          "description" : "The unique identifier of the user.",
          "pattern" : "^[0-9]+$"
        },
        "email" : {
          "$ref" : "#/definitions/Email"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.User"
    },
    "BeneficiaryTrustLevel" : {
      "type" : "string",
      "description" : "The value that determines whether a Beneficiary is trusted or not.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.BeneficiaryTrustLevel"
    },
    "Corporate" : {
      "required" : [ "acceptedTerms", "baseCurrency", "company", "creationTimestamp", "id", "ipAddress", "profileId", "rootUser" ],
      "properties" : {
        "rootUser" : {
          "$ref" : "#/definitions/CorporateRootUser"
        },
        "sourceOfFundsOther" : {
          "type" : "string",
          "description" : "Description of source of funds in case `OTHER` was chosen."
        },
        "acceptedTerms" : {
          "type" : "boolean",
          "description" : "Must be set to *true* to indicate that the root user has accepted the terms and conditions."
        },
        "ipAddress" : {
          "type" : "string",
          "description" : "The IP address of the user doing the registration.",
          "minLength" : 5,
          "maxLength" : 45
        },
        "industry" : {
          "$ref" : "#/definitions/Industry"
        },
        "sourceOfFunds" : {
          "$ref" : "#/definitions/CorporateSourceOfFunds"
        },
        "baseCurrency" : {
          "$ref" : "#/definitions/Currency"
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time when the Corporate was created, expressed in Epoch timestamp using millisecond precision."
        },
        "company" : {
          "type" : "object",
          "properties" : {
            "registeredAddress" : {
              "$ref" : "#/definitions/LegalAddress"
            },
            "incorporatedOn" : {
              "$ref" : "#/definitions/Date"
            },
            "registrationNumber" : {
              "type" : "string",
              "description" : "The company registration number.",
              "minLength" : 1,
              "maxLength" : 20
            },
            "name" : {
              "type" : "string",
              "description" : "The registered name of the company.",
              "maxLength" : 100
            },
            "type" : {
              "$ref" : "#/definitions/CompanyType"
            },
            "businessAddress" : {
              "$ref" : "#/definitions/Address"
            },
            "countryOfRegistration" : {
              "type" : "string",
              "description" : "The country of company registration in ISO 3166 alpha-2.",
              "minLength" : 2,
              "maxLength" : 2,
              "pattern" : "^[A-Z]+$"
            }
          }
        },
        "id" : {
          "$ref" : "#/definitions/IdentityId"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "feeGroup" : {
          "type" : "string",
          "description" : "Fee groups allow the possibility to charge different fees to users under the same profile. If fee groups are not required, ignore this field."
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Corporate"
    },
    "OutgoingWireTransferBeneficiary" : {
      "required" : [ "bankAccountDetails", "name" ],
      "properties" : {
        "address" : {
          "type" : "string",
          "description" : "The beneficiary's address.",
          "minLength" : 1,
          "maxLength" : 150
        },
        "bankAccountDetails" : {
          "type" : "object",
          "description" : "Details of the beneficiary bank account, depending on the type of transfer chosen."
        },
        "name" : {
          "type" : "string",
          "description" : "The beneficiary's full name. The allowed length and pattern is dependent on the bank account details type:\n\n`SepaBankDetails`: >= `1` character and <= `150` characters\n\n`FasterPaymentsBankDetails`: >= `1` character and <= `140` characters with a pattern of `^[a-zA-Z0-9\\/\\-?:().,’+\\s#=!\"%&*<>;{@\\r\\n]*$`\n(please note that the `’` symbol is the unicode value U+2019 (right single quotation mark) and not the unicode value U+0027 (apostrophe))\n"
        },
        "bankName" : {
          "type" : "string",
          "description" : "The beneficiary's bank name."
        },
        "bankAddress" : {
          "type" : "string",
          "description" : "The beneficiary's bank address.",
          "minLength" : 1,
          "maxLength" : 150
        },
        "bankCountry" : {
          "type" : "string",
          "description" : "The beneficiary's bank country in ISO 3166 alpha-2 format.",
          "minLength" : 2,
          "maxLength" : 2,
          "pattern" : "^[A-Z]{2}$"
        }
      },
      "type" : "object",
      "description" : "Details of the beneficiary of the outgoing wire transfer.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.OutgoingWireTransferBeneficiary"
    },
    "ManagedAccountIBAN" : {
      "required" : [ "bankAccountDetails", "state" ],
      "properties" : {
        "bankAccountDetails" : {
          "type" : "array",
          "description" : "A list of bank account details associated with the IBAN.\nMultiple details can be provided if multiple IBAN providers are supported by your payment model.",
          "items" : {
            "type" : "object",
            "properties" : {
              "beneficiaryBank" : {
                "type" : "string",
                "description" : "The beneficiary bank name to be used when initiating a deposit onto the IBAN."
              },
              "beneficiaryNameAndSurname" : {
                "type" : "string",
                "description" : "The beneficiary name and surname details to be used when initiating a deposit onto the IBAN."
              },
              "paymentReference" : {
                "type" : "string",
                "description" : "A reference required by the partner bank to execute a deposit on the managed account.\n\n\nIf provided, make sure that this is included as part of the wire transfer details when initiating a deposit.\n"
              },
              "beneficiaryBankAddress" : {
                "type" : "string",
                "description" : "The beneficiary bank address to be used when initiating a deposit onto the IBAN."
              },
              "details" : {
                "type" : "object",
                "description" : "The bank details required to initiate a deposit on the managed account.\n\nThe details required to deposit on the IBAN vary depending on the wire transfer channel that will be used.\n"
              }
            }
          }
        },
        "state" : {
          "type" : "string",
          "description" : "The state of the Managed Account's IBAN as follows:\n  - UNALLOCATED: The Managed Account has never been assigned an IBAN. Use the _managedAccountsIBANUpgrade_ operation to assign an IBAN to a Managed Account.\n  - PENDING_ALLOCATION: The IBAN is being allocated to the Managed Account.\n  - ALLOCATED: An IBAN is allocated to the Managed Account.\n",
          "enum" : [ "UNALLOCATED", "PENDING_ALLOCATION", "ALLOCATED" ]
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ManagedAccountIBAN"
    },
    "OutgoingWireTransferBulkCreateRequest" : {
      "required" : [ "outgoingWireTransfers" ],
      "properties" : {
        "outgoingWireTransfers" : {
          "type" : "array",
          "description" : "The object representing the outgoing wire transfers' details.",
          "items" : {
            "$ref" : "#/definitions/OutgoingWireTransferCreateRequest"
          }
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.OutgoingWireTransferBulkCreateRequest"
    },
    "ScaledAmount" : {
      "properties" : {
        "scale" : {
          "type" : "integer",
          "format" : "int32"
        },
        "value" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "type" : "object",
      "description" : "A floating point number, represented as a value and its scale. Its actual value can be obtained using the equation: value * pow(10, -scale).",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ScaledAmount"
    },
    "ManagedCard" : {
      "required" : [ "cardBrand", "cardLevelClassification", "creationTimestamp", "currency", "expiryPeriodMonths", "externalHandle", "friendlyName", "id", "mode", "nameOnCard", "profileId", "renewalType", "state", "type" ],
      "properties" : {
        "expiryMmyy" : {
          "type" : "string",
          "description" : "The end date of this card, in MMYY format.",
          "minLength" : 4,
          "maxLength" : 4
        },
        "externalHandle" : {
          "type" : "string",
          "description" : "A uniquely generated code used to identify a card.\n\nThis code is to be used instead of the sensitive card number in order to refer to a card when opening a support ticket.\n"
        },
        "threeDSecureAuthConfig" : {
          "$ref" : "#/definitions/ThreeDSecureAuthConfig"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of card:\n  - VIRTUAL: Not a printed or embedded card. The card can be used online or added to digital wallets.\n  - PHYSICAL: A physical card that can be printed and shipped to your customers or embedded in a Wearable device. It can be used at physical terminals.\n",
          "enum" : [ "VIRTUAL", "PHYSICAL" ]
        },
        "cardholderMobileNumber" : {
          "type" : "string",
          "description" : "The mobile number including country code of the card holder, needed for 3DS challenge.",
          "minLength" : 5,
          "maxLength" : 20,
          "pattern" : "^\\\\+[0-9]+$"
        },
        "startMmyy" : {
          "type" : "string",
          "description" : "The start date of this card, in MMYY format.",
          "minLength" : 4,
          "maxLength" : 4,
          "pattern" : "^[0-9]*$"
        },
        "mode" : {
          "type" : "string",
          "description" : "The mode with which this card was created:\n\n- A prepaid mode card has its own balance and can have funds transferred to or from it.\n- A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit.\n"
        },
        "physicalCardDetails" : {
          "$ref" : "#/definitions/PhysicalCardDetails"
        },
        "authForwardingDefaultTimeoutDecision" : {
          "type" : "string",
          "description" : "Default decision for auth forwarding on timeout",
          "enum" : [ "APPROVE", "DECLINE" ]
        },
        "cardNumberLastFour" : {
          "type" : "string",
          "description" : "The last four digits of the card number.",
          "minLength" : 4,
          "maxLength" : 4,
          "pattern" : "^[0-9]*$"
        },
        "nameOnCard" : {
          "type" : "string",
          "description" : "The card holder’s name for the card. This may be verified by merchants when the card is used online. For Physical cards, this field will be printed on the card. The maximum characters allowed will depend on the design chosen and will be provided to you by Weavr when setting up your plastic cards.",
          "maxLength" : 27,
          "pattern" : "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻäácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$"
        },
        "cardLevelClassification" : {
          "type" : "string",
          "description" : "The card classification determines whether the card is from Consumer or Corporate BINs.",
          "enum" : [ "CONSUMER", "CORPORATE" ]
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp when the card was created, expressed in Epoch timestamp using millisecond precision."
        },
        "currency" : {
          "$ref" : "#/definitions/Currency"
        },
        "id" : {
          "type" : "string",
          "description" : "The unique identifier of the card.",
          "pattern" : "^[0-9]+$"
        },
        "tag" : {
          "$ref" : "#/definitions/Tag"
        },
        "state" : {
          "$ref" : "#/definitions/ManagedInstrumentState"
        },
        "cardBrand" : {
          "type" : "string",
          "description" : "The card scheme, or brand of the card.",
          "enum" : [ "MASTERCARD", "VISA" ]
        },
        "expiryPeriodMonths" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The validity timeframe of the card, in months."
        },
        "friendlyName" : {
          "type" : "string",
          "description" : "The friendly name given to the card.",
          "minLength" : 1,
          "maxLength" : 50
        },
        "cvv" : {
          "$ref" : "#/definitions/SensitiveCvv"
        },
        "digitalWallets" : {
          "$ref" : "#/definitions/DigitalWallets"
        },
        "renewalType" : {
          "type" : "string",
          "description" : "Indicates how card will be handled once it is close to expiring.\n  - AUTO_RENEW: The card will be automatically renewed, keeping the same card number but with a new expiry date and CVV.\n  - NO_RENEW: Once the expiry date is reached, the card is destroyed.\n",
          "enum" : [ "AUTO_RENEW", "NO_RENEW" ]
        },
        "profileId" : {
          "$ref" : "#/definitions/ProfileId"
        },
        "cardNumberFirstSix" : {
          "type" : "string",
          "description" : "The first six digits of the card number.",
          "minLength" : 6,
          "maxLength" : 6,
          "pattern" : "^[0-9]*$"
        },
        "billingAddress" : {
          "$ref" : "#/definitions/Address"
        },
        "nameOnCardLine2" : {
          "type" : "string",
          "description" : "Line 2 of the 'name on card' field. For Physical cards, this field will be printed on the card. The maximum characters allowed will depend on the design chosen and will be provided to you by Weavr when setting up your plastic cards.",
          "maxLength" : 27,
          "pattern" : "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻäácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$"
        },
        "cardNumber" : {
          "$ref" : "#/definitions/SensitiveCardNumber"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ManagedCard"
    },
    "TransactionCancelResponse" : {
      "required" : [ "id", "state" ],
      "properties" : {
        "errorCode" : {
          "type" : "string",
          "description" : "Indicates the reason why the cancel operation could not be executed.\nMay be included in the response if the state is \"ERROR\".\n\n- \"GENERIC\": A generic error has occurred.\n- \"TRANSACTION_NOT_SCHEDULED\": The transaction is not in state SCHEDULED.\n- \"FORBIDDEN\": The current user is not allowed to access this transaction.\n- \"NOT_FOUND\": The transaction does not exist.\n",
          "enum" : [ "GENERIC", "TRANSACTION_NOT_SCHEDULED", "FORBIDDEN", "NOT_FOUND" ]
        },
        "id" : {
          "type" : "string",
          "description" : "The id of the transaction.",
          "pattern" : "^[0-9]+$"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "ERROR" ]
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.TransactionCancelResponse"
    },
    "SensitivePassword" : {
      "type" : "string",
      "description" : "A randomly generated one-time use code.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SensitivePassword"
    },
    "ScheduledTimestamp" : {
      "type" : "string",
      "description" : "The epoch timestamp at which the transaction is scheduled to be executed.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.ScheduledTimestamp"
    },
    "Error" : {
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Error"
    },
    "CorporateSourceOfFunds" : {
      "type" : "string",
      "description" : "The corporate's source of funds.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.CorporateSourceOfFunds"
    },
    "MultipleSCAResourceType" : {
      "type" : "string",
      "description" : "The operation type upon which an SCA Challenge is being contested.\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.MultipleSCAResourceType"
    },
    "Date" : {
      "required" : [ "day", "month", "year" ],
      "properties" : {
        "month" : {
          "type" : "integer",
          "format" : "int32"
        },
        "year" : {
          "type" : "integer",
          "format" : "int32"
        },
        "day" : {
          "type" : "integer",
          "format" : "int32"
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.Date"
    },
    "AddressWithCountryRequired" : {
      "required" : [ "country" ],
      "properties" : {
        "country" : {
          "type" : "string",
          "description" : "The country of the address expressed in ISO 3166 alpha-2 format.",
          "minLength" : 2,
          "maxLength" : 2,
          "pattern" : "^[A-Z]+$"
        },
        "city" : {
          "type" : "string",
          "description" : "The city of the address."
        },
        "addressLine1" : {
          "type" : "string",
          "description" : "The first line of the address."
        },
        "addressLine2" : {
          "type" : "string",
          "description" : "The second line of the address."
        },
        "postCode" : {
          "type" : "string",
          "description" : "The post cost associated with the address.",
          "maxLength" : 10,
          "pattern" : "^[A-Za-z0-9 -]*$"
        },
        "state" : {
          "type" : "string",
          "description" : "The state of the address.",
          "maxLength" : 50
        }
      },
      "type" : "object",
      "description" : "The address, with none of the separate fields being set as required.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.AddressWithCountryRequired"
    },
    "SCAChallengeType" : {
      "type" : "string",
      "description" : "- \"OTP\": The OTP is sent as a text message\n- \"PUSH\": The authorisation request is sent as a push notification\n- \"BIOMETRIC\": The push notification is sent via Firebase to a mobile application\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SCAChallengeType"
    },
    "PrepaidModeCardAuthorisationEvent" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CardAuthorisationEvent"
      }, {
        "properties" : {
          "availableBalance" : {
            "$ref" : "#/definitions/CurrencyAmount"
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.PrepaidModeCardAuthorisationEvent"
    },
    "UserId" : {
      "type" : "string",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.UserId"
    },
    "KycLevel" : {
      "type" : "string",
      "description" : "The KYC level, which determines what KYC information will be requested from the consumer:\n  - KYC_LEVEL_1: The most basic level of KYC required. \n  - KYC_LEVEL_2: Full due diligence level 2\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.KycLevel"
    },
    "IdentityId" : {
      "required" : [ "id", "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The identifier for the identity.",
          "pattern" : "^[0-9]+$"
        },
        "type" : {
          "type" : "string",
          "description" : "Indicates the identity type.",
          "enum" : [ "CONSUMER", "CORPORATE" ]
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.IdentityId"
    },
    "SCAChannel" : {
      "type" : "string",
      "description" : "- \"SMS\": The one-time-password is sent as a text message\n- \"AUTHY\": The push notification is sent to an Authy application\n- \"BIOMETRIC\": The push notification is sent to an innovator application\n",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.SCAChannel"
    },
    "OutgoingWireTransferType" : {
      "type" : "string",
      "description" : "The wire transfer rails used, from SEPA, Faster Payments or SWIFT.",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.OutgoingWireTransferType"
    },
    "BaseCardLevelSpendRules" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CommonLevelSpendRules"
      }, {
        "properties" : {
          "spendLimit" : {
            "type" : "array",
            "description" : "The total amount of funds that can be spent using this card, in a given time interval.",
            "items" : {
              "$ref" : "#/definitions/SpendLimit"
            }
          }
        },
        "type" : "object"
      } ],
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.BaseCardLevelSpendRules"
    },
    "CardAuthorisationEvent" : {
      "required" : [ "authorisationType", "cardId", "merchantData", "owner", "sourceAmount", "totalTransactionCost", "transactionAmount", "transactionId", "transactionTimestamp" ],
      "properties" : {
        "owner" : {
          "$ref" : "#/definitions/IdentityId"
        },
        "authCode" : {
          "type" : "string",
          "description" : "The authorisation code associated with this authorisation.",
          "minLength" : 1,
          "maxLength" : 6
        },
        "merchantData" : {
          "$ref" : "#/definitions/MerchantData"
        },
        "transactionId" : {
          "type" : "string",
          "description" : "The id of this transaction, for reference.",
          "pattern" : "^[0-9]+$"
        },
        "totalTransactionCost" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "transactionTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp of the transaction, using epoch timestamp with millisecond precision."
        },
        "forexPadding" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "forexFee" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "mode" : {
          "type" : "string",
          "description" : "The card can be created in prepaid mode or debit mode.\n\n- A prepaid mode card has its own balance and can have funds transferred to or from it.\n- A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit.\n"
        },
        "authorisationType" : {
          "$ref" : "#/definitions/CardAuthorisationDetailsAuthorisationType"
        },
        "cardId" : {
          "type" : "string",
          "description" : "The unique identifier of the card on which an authorisation is being performed",
          "pattern" : "^[0-9]+$"
        },
        "transactionAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "sourceAmount" : {
          "$ref" : "#/definitions/CurrencyAmount"
        },
        "cardholderPresent" : {
          "$ref" : "#/definitions/CardHolderPresent"
        },
        "cardPresent" : {
          "type" : "boolean",
          "description" : "Optional detail indicating if the card was present when the authorisation occurred."
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.CardAuthorisationEvent"
    },
    "CommonLevelSpendRules" : {
      "properties" : {
        "allowAtm" : {
          "type" : "boolean",
          "description" : "Indicates if an ATM Withdrawal transaction is allowed on the card."
        },
        "allowedMerchantCountries" : {
          "type" : "array",
          "description" : "Whitelist Merchant Country: A list of allowed merchant countries, in ISO 3166-1 alpha-2 format. If the Merchant country does not match, then the transaction will be declined. If a Merchant Country is also provided in the blocked list, the blocked list will take precedence.",
          "items" : {
            "type" : "string",
            "minLength" : 2,
            "maxLength" : 2,
            "pattern" : "^[A-Z]{2}$"
          }
        },
        "allowECommerce" : {
          "type" : "boolean",
          "description" : "Indicates if an online transaction is allowed on the card."
        },
        "blockedMerchantCategories" : {
          "type" : "array",
          "description" : "Blacklist MCC: A list of disallowed merchant category codes (MCCs). If the MCC matches, then the transaction will be declined. If an MCC is also in the allowed list, the blocked list will take precedence.",
          "items" : {
            "type" : "string"
          }
        },
        "allowedMerchantIds" : {
          "type" : "array",
          "description" : "Whitelist Merchant Id: A list of allowed merchant IDs. If the Merchant Id does not match, then the transaction will be declined. If a Merchant Id is also provided in the blocked list, the blocked list will take precedence.",
          "items" : {
            "type" : "string"
          }
        },
        "blockedMerchantCountries" : {
          "type" : "array",
          "description" : "Blacklist Merchant Country: A list of disallowed merchant countries, in ISO 3166-1 alpha-2 format. If the Merchant country matches, then the transaction will be declined. If a Merchant Country is also in the allowed list, the blocked list will take precedence.",
          "items" : {
            "type" : "string",
            "minLength" : 2,
            "maxLength" : 2,
            "pattern" : "^[A-Z]{2}$"
          }
        },
        "allowCashback" : {
          "type" : "boolean",
          "description" : "Indicates if a cashback transaction at a physical terminal is allowed on the card."
        },
        "blockedMerchantIds" : {
          "type" : "array",
          "description" : "Blacklist Merchant Id: A list of disallowed merchant IDs. If the Merchant Id matches, then the transaction will be declined. If a Merchant Id is also in the allowed list, the blocked list will take precedence.",
          "items" : {
            "type" : "string"
          }
        },
        "allowCreditAuthorisations" : {
          "type" : "boolean",
          "description" : "Indicates if a the card can receive a credit transaction."
        },
        "allowedMerchantCategories" : {
          "type" : "array",
          "description" : "Whitelist MCC: A list of allowed merchant category codes (MCCs). If the MCC does not match, then the transaction will be declined. If an MCC is also in the blocked list, the blocked list will take precedence.",
          "items" : {
            "type" : "string"
          }
        },
        "allowContactless" : {
          "type" : "boolean",
          "description" : "Indicates if a contactless transaction is allowed on the card."
        }
      },
      "type" : "object",
      "x-WM-FULLY_QUALIFIED_NAME" : "com.brightbankdemo.weavr.CommonLevelSpendRules"
    }
  },
  "parameters" : {
    "sourceId" : {
      "name" : "source.id",
      "in" : "query",
      "description" : "Filter by the source instrument id. Must be specified when `source.type` is provided.",
      "required" : false
    },
    "owtState" : {
      "name" : "state",
      "in" : "query",
      "description" : "Filter by the outgoing wire transfer state. Leave out to fetch all states.",
      "required" : false,
      "type" : "array"
    },
    "instrumentId" : {
      "name" : "instrumentId",
      "in" : "query",
      "description" : "Filter by the source instrument id.",
      "required" : false
    },
    "sendState" : {
      "name" : "state",
      "in" : "query",
      "description" : "Filter by the Send transaction state. Leave out to fetch all states.",
      "required" : false,
      "type" : "array"
    },
    "channel" : {
      "name" : "channel",
      "in" : "path",
      "description" : "The unique identifier for the channel.",
      "required" : true
    },
    "state_blockedReason" : {
      "name" : "state.blockedReason",
      "in" : "query",
      "required" : false,
      "type" : "array"
    },
    "transferProfileId" : {
      "name" : "profileId",
      "in" : "query",
      "description" : "Filter by the transfer profile. Leave out to fetch all transfer transactions.",
      "required" : false
    },
    "sendProfileId" : {
      "name" : "profileId",
      "in" : "query",
      "description" : "Filter by the Send profile. Leave out to fetch all entries.",
      "required" : false
    },
    "owtInstrument" : {
      "name" : "instrument",
      "in" : "query",
      "description" : "Filter by the source instrument id (which must be a managed account).",
      "required" : false,
      "type" : "object"
    },
    "sourceInstrument_type" : {
      "name" : "sourceInstrument.type",
      "in" : "query",
      "description" : "Filter by the source instrument type. Must be specified when `source.id` is provided.",
      "required" : false
    },
    "limit" : {
      "name" : "limit",
      "in" : "query",
      "description" : "The limit of the results for paging, starting at the offset. Limit is always capped at 100.",
      "required" : false,
      "type" : "integer",
      "format" : "int32"
    },
    "scaPushChannel" : {
      "name" : "channel",
      "in" : "path",
      "required" : true
    },
    "state" : {
      "name" : "state",
      "in" : "query",
      "required" : false,
      "type" : "array"
    },
    "tag" : {
      "name" : "tag",
      "in" : "query",
      "description" : "Filter by the managed account/card tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all managed accounts/card.",
      "required" : false,
      "type" : "string"
    },
    "identity_type" : {
      "name" : "identity.type",
      "in" : "query",
      "description" : "Filter by the source instrument type. Must be specified when `source.id` is provided.",
      "required" : false,
      "type" : "string"
    },
    "orderByTimestamp" : {
      "name" : "orderByTimestamp",
      "in" : "query",
      "description" : "Orders the result in ascending or descending order.\n  - ASC: Ascending order, oldest transactions first.\n  - DESC: Descending order, most recent transactions first.\n\nIf not specified, the transactions will be returned in descending order.\n",
      "required" : false,
      "type" : "string"
    },
    "authFactorsPushChannel" : {
      "name" : "channel",
      "in" : "path",
      "required" : true
    },
    "offset" : {
      "name" : "offset",
      "in" : "query",
      "description" : "The offset value for paging, indicating the initial item number to be returned from the data set satisfying the given criteria. Leave out to fetch the first page of results.",
      "required" : true,
      "type" : "integer",
      "format" : "int32"
    },
    "active" : {
      "name" : "active",
      "in" : "query",
      "description" : "Filter for active or deactivated users. Leave out to fetch all users.",
      "required" : false,
      "type" : "boolean"
    },
    "createdTo" : {
      "name" : "createdTo",
      "in" : "query",
      "description" : "Filter for managed accounts/cards created before `createdTo` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts/cards.",
      "required" : false,
      "type" : "integer",
      "format" : "int64"
    },
    "request-ref" : {
      "name" : "request-ref",
      "in" : "header",
      "description" : "A unique call reference included in every call, that enables the receiver to avoid duplicate handling of a webhook request (e.g. webhook was resent).",
      "required" : false,
      "type" : "string"
    },
    "accept" : {
      "name" : "accept",
      "in" : "header",
      "description" : "A request parameter specifying the type of response the client would like. Must be one of `application/json`, `application/pdf` or `text/csv`.\n\nThe default response type (`application/json`) will be returned if specified incorrectly or not specified.\n",
      "required" : false,
      "type" : "string"
    },
    "sourceType" : {
      "name" : "source.type",
      "in" : "query",
      "description" : "Filter by the source instrument type. Must be specified when `source.id` is provided.",
      "required" : false
    },
    "profileId" : {
      "name" : "profileId",
      "in" : "query",
      "description" : "Filter by the managed account/card profile. Leave out to fetch all managed accounts/card.",
      "required" : false
    },
    "published-timestamp" : {
      "name" : "published-timestamp",
      "in" : "header",
      "description" : "The timestamp, expressed in Epoch timestamp using millisecond precision, when this event was published.",
      "required" : true,
      "type" : "integer",
      "format" : "int64"
    },
    "transferExecutedTo" : {
      "name" : "executedTo",
      "in" : "query",
      "description" : "Filter for transfer transactions executed before `executedTo` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all transfers.",
      "required" : false,
      "type" : "integer",
      "format" : "int64"
    },
    "signature" : {
      "name" : "signature",
      "in" : "header",
      "description" : "The signature to verify the authenticity of this request.  This is the base64 hash (HmacSHA256) of the `published-timestamp` using your API key.",
      "required" : true,
      "type" : "string"
    },
    "idempotency-ref" : {
      "name" : "idempotency-ref",
      "in" : "header",
      "description" : "A unique call reference generated by the caller that, taking into consideration the payload as well as the operation itself, helps avoid duplicate operations. Idempotency reference uniqueness is maintained for at least 24 hours.",
      "required" : false,
      "type" : "string"
    },
    "sendExecutedFrom" : {
      "name" : "executedFrom",
      "in" : "query",
      "description" : "Filter for send transactions executed after `executedFrom` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all Send transactions.",
      "required" : false,
      "type" : "integer",
      "format" : "int64"
    },
    "transferCreatedTo" : {
      "name" : "createdTo",
      "in" : "query",
      "description" : "Filter for transfer transactions created before `createdTo` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all transfers.",
      "required" : false,
      "type" : "integer",
      "format" : "int64"
    },
    "sendCreatedTo" : {
      "name" : "createdTo",
      "in" : "query",
      "description" : "Filter for send transactions created before `createdTo` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all Send transactions.",
      "required" : false,
      "type" : "integer",
      "format" : "int64"
    },
    "currency" : {
      "name" : "currency",
      "in" : "query",
      "description" : "Filter by the managed account/card currency.\n\nCurrencies are expressed as an ISO 4217 code. Leave out to fetch all managed accounts/card.\n",
      "required" : false
    },
    "email" : {
      "name" : "email",
      "in" : "query",
      "description" : "Filter by the email address of the user.",
      "required" : false
    },
    "friendlyName" : {
      "name" : "friendlyName",
      "in" : "query",
      "description" : "Filter by the managed account/card friendly name. Leave out to fetch all managed accounts/card.\n\nThe exact name must be provided, as wildcards are not supported.\n",
      "required" : false,
      "type" : "string"
    },
    "sourceInstrument_id" : {
      "name" : "sourceInstrument.id",
      "in" : "query",
      "description" : "Filter by the source instrument id. Must be specified when `source.type` is provided.",
      "required" : false
    },
    "sendExecutedTo" : {
      "name" : "executedTo",
      "in" : "query",
      "description" : "Filter for send transactions executed before `executedTo` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all Send transactions.",
      "required" : false,
      "type" : "integer",
      "format" : "int64"
    },
    "identity_id" : {
      "name" : "identity.id",
      "in" : "query",
      "description" : "Filter by the source instrument id. Must be specified when `source.type` is provided.",
      "required" : false
    },
    "transferCreatedFrom" : {
      "name" : "createdFrom",
      "in" : "query",
      "description" : "Filter for transfer transactions created after `createdFrom` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all transfers.",
      "required" : false,
      "type" : "integer",
      "format" : "int64"
    },
    "transferExecutedFrom" : {
      "name" : "executedFrom",
      "in" : "query",
      "description" : "Filter for transfer transactions executed after `executedFrom` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all transfers.",
      "required" : false,
      "type" : "integer",
      "format" : "int64"
    },
    "state_destroyedReason" : {
      "name" : "state.destroyedReason",
      "in" : "query",
      "required" : false,
      "type" : "array"
    },
    "transferTag" : {
      "name" : "tag",
      "in" : "query",
      "description" : "Filter by the transfer tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries.",
      "required" : false,
      "type" : "string"
    },
    "card_type" : {
      "name" : "type",
      "in" : "query",
      "description" : "Filter by the type of the card.",
      "required" : false,
      "type" : "string"
    },
    "userId" : {
      "name" : "user_id",
      "in" : "path",
      "description" : "The user id for which this password is created.",
      "required" : true
    },
    "toTimestamp" : {
      "name" : "toTimestamp",
      "in" : "query",
      "description" : "Filter for transactions having transaction timestamp before `toTimestamp`. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts.",
      "required" : false,
      "type" : "integer",
      "format" : "int64"
    },
    "sendTag" : {
      "name" : "tag",
      "in" : "query",
      "description" : "Filter by the send tag. The exact tag must be provided, as wildcards are not supported. Leave out to fetch all entries.",
      "required" : false,
      "type" : "string"
    },
    "createdFrom" : {
      "name" : "createdFrom",
      "in" : "query",
      "description" : "Filter for managed accounts/cards created after `createdFrom` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts/cards.",
      "required" : false,
      "type" : "integer",
      "format" : "int64"
    },
    "fromTimestamp" : {
      "name" : "fromTimestamp",
      "in" : "query",
      "description" : "Filter for transactions having transaction timestamp after `fromTimestamp`. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all managed accounts.",
      "required" : false,
      "type" : "integer",
      "format" : "int64"
    },
    "sendCreatedFrom" : {
      "name" : "createdFrom",
      "in" : "query",
      "description" : "Filter for send transactions created after `createdFrom` timestamp. Timestamp is expressed in Epoch timestamp using millisecond precision. Leave out to fetch all Send transactions.",
      "required" : false,
      "type" : "integer",
      "format" : "int64"
    },
    "showFundMovementsOnly" : {
      "name" : "showFundMovementsOnly",
      "in" : "query",
      "description" : "Returns only the entries which contain fund movements.",
      "required" : false,
      "type" : "boolean"
    },
    "userIdExplode" : {
      "name" : "user_id",
      "in" : "path",
      "description" : "The unique identifier for the user.",
      "required" : true
    },
    "transactionState" : {
      "name" : "state",
      "in" : "query",
      "description" : "Filter by the transfer transaction state. Leave out to fetch all states.",
      "required" : false,
      "type" : "array"
    }
  },
  "responses" : {
    "EnrolDeviceUsingPushResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "linkingCode" : {
            "type" : "string",
            "description" : "The code to link the device."
          }
        }
      }
    },
    "StepUpSCAChallengePushConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "CHALLENGE_LIMIT_EXCEEDED" ]
          }
        }
      }
    },
    "MultipleSCAChallengeConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "description" : "Error codes:\n  * `STATE_INVALID` - The operation no longer requires additional verification, it was either cancelled or completed.\n  * `CHANNEL_NOT_SUPPORTED` - The channel selected cannot be used to verify this type of operation.\n  * `CHANNEL_NOT_REGISTERED` - The channel selected must be enrolled to receive one-time passwords before it can be used to verify this type of operation.\n",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED" ]
          }
        }
      }
    },
    "UserCreateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "EMAIL_NOT_UNIQUE", "MOBILE_NOT_UNIQUE", "MOBILE_OR_COUNTRY_CODE_INVALID", "EMAIL_DOMAIN_NOT_ALLOWED" ]
          }
        }
      }
    },
    "ManagedCardStatementResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/Statement"
      }
    },
    "ChargeFeeResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/ChargeFee"
      }
    },
    "NotFoundToken" : {
      "description" : "Not found - The requested token couldn't be found.",
      "schema" : {
        "$ref" : "#/definitions/TokenError"
      }
    },
    "UsersGetResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The total number of records (excluding the paging limit)."
          },
          "responseCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The total number of records returned in this response (always capped at 100)."
          },
          "users" : {
            "type" : "array",
            "description" : "The list of users matching the criteria specified.",
            "items" : {
              "$ref" : "#/definitions/User"
            }
          }
        }
      }
    },
    "BeneficiaryResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/Beneficiary"
      }
    },
    "TransactionBulkCancelResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/TransactionBulkCancelResponse"
      }
    },
    "ManagedCardUpdateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_DESTROYED", "INSTRUMENT_NOT_PHYSICAL", "COUNTRY_INVALID", "WALLETS_NOT_ENABLED", "WALLET_ARTWORK_NOT_SPECIFIED", "WALLET_ARTWORK_INVALID", "PUSHPROVISIONING_NOT_ENABLED", "AUTH_FORWARDING_NOT_ENABLED", "THREEDS_DETAILS_NOT_PROVIDED", "USER_NOT_ENROLLED_FOR_BIOMETRICS", "BIOMETRIC_AUTHENTICATION_NOT_SUPPORTED", "LINKED_USER_NOT_FOUND", "USER_INACTIVE", "INVALID_CHANNELS_SELECTED", "INVALID_PRIMARY_CHANNEL_SELECTED", "USER_MOBILE_NUMBER_NOT_VERIFIED", "USER_MOBILE_NUMBER_DOES_NOT_EXIST", "MORE_THAN_ONE_MOBILE_NUMBER_PROVIDED", "MOBILE_NUMBER_ALREADY_EXISTS", "TWILIO_AUTHY_AUTHENTICATION_NOT_SUPPORTED", "USER_NOT_ENROLLED_FOR_TWILIO_AUTHY" ]
          }
        }
      }
    },
    "TokenExpired" : {
      "description" : "Gone - The requested token is expired.",
      "schema" : {
        "$ref" : "#/definitions/TokenError"
      }
    },
    "ConsumerKycStartSumsubMobileConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "KYC_ALREADY_APPROVED", "KYC_PENDING_REVIEW", "KYC_ALREADY_REJECTED", "SOURCE_OF_FUNDS_MISSING", "KYC_LEVEL_NOT_ALLOWED" ]
          }
        }
      }
    },
    "ConsumerKycStartSumsubMobileResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "verificationFlow" : {
            "type" : "string",
            "description" : "Name of verification flow, to be provided to Sumsub Mobile SDK."
          },
          "kycLevel" : {
            "$ref" : "#/definitions/KycLevel"
          },
          "identityType" : {
            "type" : "string",
            "description" : "Type of identity, to be provided to Sumsub Mobile SDK."
          },
          "externalUserId" : {
            "type" : "string",
            "description" : "The application user identifier."
          },
          "kycProviderKey" : {
            "type" : "string",
            "description" : "Sumsub key."
          },
          "accessToken" : {
            "type" : "string",
            "description" : "The access token, to be provided to Sumsub Mobile SDK.",
            "pattern" : "^[0-9]+$"
          }
        }
      }
    },
    "ManagedCardPageResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "cards" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ManagedCard"
            }
          },
          "count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The total number of records (excluding the paging limit)."
          },
          "responseCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The total number of records returned in this response (always capped at 100)."
          }
        }
      }
    },
    "ManagedCardPhysicalReportStolenConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "PHYSICAL_CARD_NOT_ACTIVATED", "INSTRUMENT_ALREADY_MARKED_STOLEN", "INSTRUMENT_ALREADY_MARKED_LOST", "INSTRUMENT_DESTROYED" ]
          }
        }
      }
    },
    "OutgoingWireTransferSCAChallengePushConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "CHALLENGE_LIMIT_EXCEEDED", "SCA_EXEMPTION_APPLIED" ]
          }
        }
      }
    },
    "TransfersGetResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "transfer" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Transfer"
            }
          },
          "count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total number of records (excluding the paging limit)."
          },
          "responseCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total number of records returned in this response."
          }
        }
      }
    },
    "OutgoingWireTransferBulkCreateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "description" : "Error codes:\n  * `TRANSACTION_LIMIT_EXCEEDED` - The number of transactions exceeds the limit of 1000.\n",
            "enum" : [ "TRANSACTION_LIMIT_EXCEEDED" ]
          }
        }
      }
    },
    "UnlinkDeviceUsingPushConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "CHANNEL_NOT_REGISTERED", "CREDENTIALS_INACTIVE" ]
          }
        }
      }
    },
    "ManagedAccountUnblockConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_INACTIVE", "INSTRUMENT_NOT_BLOCKED", "INSTRUMENT_DESTROYED" ]
          }
        }
      }
    },
    "ManagedCardPhysicalReplaceLostOrStolenConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "INSTRUMENT_NOT_MARKED_LOST_OR_STOLEN", "INSTRUMENT_DESTROYED", "INSTRUMENT_ALREADY_REPLACED", "PARENT_MANAGED_ACCOUNT_NOT_ACTIVE", "MAX_PRINT_CHARACTERS_EXCEEDED" ]
          }
        }
      }
    },
    "ManagedAccountsGetResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The total number of records (excluding the paging limit)."
          },
          "responseCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The total number of records returned in this response (always capped at 100)."
          },
          "accounts" : {
            "type" : "array",
            "description" : "The filtered managed accounts list.",
            "items" : {
              "$ref" : "#/definitions/ManagedAccount"
            }
          }
        }
      }
    },
    "BeneficiaryPageResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The total number of records (excluding the paging limit)."
          },
          "responseCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The total number of records returned in this response (always capped at 100)."
          },
          "beneficiaries" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Beneficiary"
            }
          }
        }
      }
    },
    "ManagedCardGetResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/ManagedCard"
      }
    },
    "AuthFactorsGetResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "factors" : {
            "type" : "array",
            "description" : "The list of challenge types the logged-in user is enrolled on.",
            "items" : {
              "$ref" : "#/definitions/SCAFactor"
            }
          }
        }
      }
    },
    "CorporateUpdateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "FEE_GROUP_INVALID", "COUNTRY_INVALID", "EMAIL_NOT_UNIQUE", "MOBILE_NOT_UNIQUE", "ROOT_USER_ALREADY_VERIFIED", "COUNTRY_UNSUPPORTED", "MOBILE_OR_COUNTRY_CODE_INVALID", "MOBILE_NO_CHANGE_LIMIT_EXCEEDED", "TOO_FREQUENT_EMAIL_CHANGES", "EMAIL_DOMAIN_NOT_ALLOWED", "MOBILE_CHANGE_NOT_ALLOWED" ]
          }
        }
      }
    },
    "ChargeFeeConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "UNRESOLVED_FEE_TYPE", "UNRESOLVED_CURRENCY", "UNRESOLVED_INSTRUMENT", "FUNDS_INSUFFICIENT", "IDENTITY_NOT_OWNER_OF_INSTRUMENT" ]
          }
        }
      }
    },
    "ManagedCardSpendRulesCreateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "SPEND_LIMIT_CURRENCY_DIFFERENT_FROM_CARD_CURRENCY", "SPEND_LIMIT_NOT_SUPPORTED_FOR_PREPAID_MODE_CARD", "SPEND_LIMIT_DUPLICATE_INTERVAL", "SPEND_LIMIT_AMOUNT_INVALID", "SPEND_RULE_ALREADY_SET" ]
          }
        }
      }
    },
    "NoContent" : {
      "description" : "Success - No Content."
    },
    "StepUpSCAChallengePushResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The challenge id.",
            "pattern" : "^[0-9]+$"
          }
        }
      }
    },
    "MultipleSCAVerifyConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "VERIFICATION_CODE_EXPIRED", "VERIFICATION_CODE_INVALID" ]
          }
        }
      }
    },
    "UserIdentitiesConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "IDENTITY_TYPE_NOT_SUPPORTED" ]
          }
        }
      }
    },
    "ManagedAccountBlockConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_INACTIVE", "INSTRUMENT_ALREADY_BLOCKED", "INSTRUMENT_DESTROYED" ]
          }
        }
      }
    },
    "ConsumerKycGetResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "kycLevel" : {
            "$ref" : "#/definitions/KycLevel"
          },
          "ongoingKycLevel" : {
            "$ref" : "#/definitions/KycLevel"
          },
          "fullDueDiligence" : {
            "$ref" : "#/definitions/KyiStatus"
          },
          "ongoingFullDueDiligence" : {
            "$ref" : "#/definitions/KyiStatus"
          }
        }
      }
    },
    "ConsumerUpdateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "FEE_GROUP_INVALID", "COUNTRY_INVALID", "CONSUMER_VERIFIED", "EMAIL_NOT_UNIQUE", "MOBILE_OR_COUNTRY_CODE_INVALID", "COUNTRY_UNSUPPORTED", "MOBILE_NO_CHANGE_LIMIT_EXCEEDED", "TOO_FREQUENT_EMAIL_CHANGES", "EMAIL_DOMAIN_NOT_ALLOWED", "MOBILE_CHANGE_NOT_ALLOWED" ]
          }
        }
      }
    },
    "SendSCAChallengeConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "SCA_EXEMPTION_APPLIED" ]
          }
        }
      }
    },
    "OutgoingWireTransferBulkCreateResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/OutgoingWireTransferBulkCreateResponse"
      }
    },
    "InternalServerError" : {
      "description" : "Internal Server Error - There is a problem with the server. Please try again later."
    },
    "LoginWithIamResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string"
          }
        }
      }
    },
    "ManagedCardPhysicalPinUnBlockConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "PHYSICAL_CARD_NOT_ACTIVATED", "INSTRUMENT_BLOCKED", "INSTRUMENT_DESTROYED" ]
          }
        }
      }
    },
    "EnrolDeviceUsingOtpStepOneConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "CHANNEL_NOT_SUPPORTED", "CHANNEL_ALREADY_REGISTERED", "MOBILE_NUMBER_NOT_AVAILABLE", "MOBILE_NUMBER_INVALID", "MOBILE_COUNTRY_NOT_SUPPORTED", "CREDENTIALS_INACTIVE" ]
          }
        }
      }
    },
    "BeneficiaryBatchResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/BeneficiaryBatch"
      }
    },
    "UserIdentitiesGetResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "array",
        "description" : "The list of identities available to user.",
        "items" : {
          "$ref" : "#/definitions/UserIdentity"
        }
      }
    },
    "UserInviteSendConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INVITE_ALREADY_CONSUMED" ]
          }
        }
      }
    },
    "ManagedAccountStatementResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/Statement"
      }
    },
    "BeneficiaryBatchSCAChallengePushConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "CHALLENGE_LIMIT_EXCEEDED" ]
          }
        }
      }
    },
    "OutgoingWireTransferSCAVerifyConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "VERIFICATION_CODE_EXPIRED", "VERIFICATION_CODE_INVALID", "SCA_EXEMPTION_APPLIED" ]
          }
        }
      }
    },
    "SendsGetPageResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total number of records (excluding the paging limit)."
          },
          "responseCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total number of records returned in this response."
          },
          "send" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Send"
            }
          }
        }
      }
    },
    "OutgoingWireTransfersGetPageResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "transfer" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/OutgoingWireTransfer"
            }
          },
          "count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total number of records (excluding the paging limit)"
          },
          "responseCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total number of records returned in this response (always capped at 100)."
          }
        }
      }
    },
    "LogoutResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "The logout url for third party auth providers."
          }
        }
      }
    },
    "ManagedCardSpendRulesUpdateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "SPEND_LIMIT_CURRENCY_DIFFERENT_FROM_CARD_CURRENCY", "SPEND_LIMIT_NOT_SUPPORTED_FOR_PREPAID_MODE_CARD", "SPEND_LIMIT_DUPLICATE_INTERVAL", "SPEND_LIMIT_AMOUNT_INVALID" ]
          }
        }
      }
    },
    "LoginWithPasswordConflict" : {
      "description" : "The user's password has expired. Use the returned temporary token to update their password via the  '_/passwords/update_' endpoint.",
      "schema" : {
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string",
            "description" : "Temporary authorisation token required to initiate the _passwordUpdate_ operation."
          }
        }
      }
    },
    "EnrolDeviceUsingPushConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_READY", "CHANNEL_ALREADY_REGISTERED", "MOBILE_NUMBER_NOT_AVAILABLE", "CHALLENGE_LIMIT_EXCEEDED", "PASSCODE_NOT_SET", "ENROLMENT_LIMIT_EXCEEDED", "MOBILE_COUNTRY_NOT_SUPPORTED" ]
          }
        }
      }
    },
    "PasswordValidateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "UNRESOLVED_IDENTITY", "PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE", "PASSWORD_TOO_SHORT", "PASSWORD_TOO_LONG", "PASSWORD_TOO_SIMPLE" ]
          }
        }
      }
    },
    "ManagedCardRemoveConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "BALANCE_NOT_ZERO", "INSTRUMENT_ALREADY_REMOVED" ]
          }
        }
      }
    },
    "ManagedCardPhysicalActivateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "INSTRUMENT_ALREADY_ACTIVATED", "ACTIVATION_CODE_INVALID", "INSTRUMENT_BLOCKED", "INSTRUMENT_DESTROYED" ]
          }
        }
      }
    },
    "ManagedCardPhysicalReportLostConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "INSTRUMENT_ALREADY_MARKED_LOST", "INSTRUMENT_ALREADY_MARKED_STOLEN", "INSTRUMENT_DESTROYED" ]
          }
        }
      }
    },
    "OutgoingWireTransferSCAChallengeConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "description" : "Error codes:\n  * `STATE_INVALID` - The transaction no longer requires additional verification, it was either cancelled or completed.\n  * `CHANNEL_NOT_SUPPORTED` - The channel selected cannot be used to verify this type of transaction.\n  * `CHANNEL_NOT_REGISTERED` - The channel selected must be enrolled to receive one-time passwords before it can be used to verify this type of transaction.\n  * `SCA_EXEMPTION_APPLIED` - The transaction no longer requires additional verification, it was proceeded via PSD2 Regulation low value SCA exemption, it is either cancelled or completed.\n",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "SCA_EXEMPTION_APPLIED" ]
          }
        }
      }
    },
    "BeneficiaryBatchSCAChallengeConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "description" : "Error codes:\n  * `STATE_INVALID` - The operation no longer requires additional verification, it was either cancelled or completed.\n  * `CHANNEL_NOT_SUPPORTED` - The channel selected cannot be used to verify this type of operation.\n  * `CHANNEL_NOT_REGISTERED` - The channel selected must be enrolled to receive one-time passwords before it can be used to verify this type of operation.\n",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED" ]
          }
        }
      }
    },
    "ManagedAccountRemoveConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "BALANCE_NOT_ZERO", "INSTRUMENT_ALREADY_REMOVED", "INSTRUMENT_HAS_PENDING_ACTIONS", "INSTRUMENT_HAS_LINKED_CARDS" ]
          }
        }
      }
    },
    "TransferConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "PROFILE_INACTIVE", "MODEL_CONSTRAINTS_VIOLATED", "INTERCEPTOR_DENIED_TRANSACTION", "INSTRUMENT_DENIED_TRANSACTION", "SOURCE_INSTRUMENT_DESTROYED", "DESTINATION_INSTRUMENT_DESTROYED", "FOREX_TRADE_DENIED_TRANSACTION", "CURRENCY_MISMATCH", "SOURCE_INSTRUMENT_BLOCKED", "DESTINATION_INSTRUMENT_BLOCKED", "FUNDS_INSUFFICIENT", "AMOUNT_INVALID", "SOURCE_NOT_FOUND", "DESTINATION_NOT_FOUND", "FEE_NOT_CONFIGURED_FOR_CURRENCY", "DESTINATION_LIMIT_EXCEEDED", "SOURCE_CANNOT_BE_DEBIT_MODE_CARD", "DESTINATION_CANNOT_BE_DEBIT_MODE_CARD", "TRANSFER_BETWEEN_INSTRUMENTS_UNSUPPORTED", "SOURCE_AND_DESTINATION_MUST_BE_DIFFERENT", "SCHEDULED_TIMESTAMP_INVALID" ]
          }
        }
      }
    },
    "MultipleSCAChallengePushConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "CHALLENGE_LIMIT_EXCEEDED" ]
          }
        }
      }
    },
    "VerifyConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "VERIFICATION_CODE_INVALID" ]
          }
        }
      }
    },
    "ManagedCardResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/ManagedCard"
      }
    },
    "ConsumerKycStartConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "KYC_ALREADY_APPROVED", "KYC_PENDING_REVIEW", "KYC_REJECTED", "KYC_LEVEL_NOT_ALLOWED" ]
          }
        }
      }
    },
    "ConsumerResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/Consumer"
      }
    },
    "CorporateResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/Corporate"
      }
    },
    "StepUpSCAChallengeConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "MOBILE_NUMBER_INVALID" ]
          }
        }
      }
    },
    "ManagedCardPhysicalPinGetResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "pin" : {
            "$ref" : "#/definitions/SensitivePin"
          }
        }
      }
    },
    "ManagedCardPhysicalContactlessLimitResetConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "PHYSICAL_CARD_NOT_ACTIVATED", "INSTRUMENT_BLOCKED", "INSTRUMENT_DESTROYED", "PHYSICAL_CARD_TYPE_NOT_SUPPORTED" ]
          }
        }
      }
    },
    "CreatePasswordConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "UNRESOLVED_IDENTITY", "PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE", "PASSWORD_TOO_SHORT", "PASSWORD_TOO_LONG", "PASSWORD_TOO_SIMPLE", "PASSWORD_KEY_ALREADY_IN_USE", "PASSWORD_ALREADY_CREATED" ]
          }
        }
      }
    },
    "InstrumentForbidden" : {
      "description" : "Forbidden - Access to the requested resource or action is forbidden.",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STEP_UP_REQUIRED", "ACCESS_TOKEN_REQUIRED" ]
          }
        }
      }
    },
    "SendSCAVerifyConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "VERIFICATION_CODE_EXPIRED", "VERIFICATION_CODE_INVALID", "SCA_EXEMPTION_APPLIED" ]
          }
        }
      }
    },
    "ManagedAccountCreateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "PROFILE_NOT_FOUND", "PROFILE_INACTIVE", "MODEL_CONSTRAINTS_VIOLATED", "CURRENCY_NOT_SUPPORTED_BY_PROFILE", "PROVIDER_NOT_SUPPORTED_BY_PROFILE", "INSTRUMENT_NOT_FOUND", "OWNER_IDENTITY_NOT_VERIFIED", "IDENTITY_LIMITS_EXCEEDED", "PROGRAMME_LIMITS_EXCEEDED", "INNOVATOR_LIMITS_EXCEEDED", "SYSTEM_LIMITS_EXCEEDED" ]
          }
        }
      }
    },
    "EnrolDeviceUsingOtpStepTwoConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "CHANNEL_NOT_SUPPORTED", "CHANNEL_ALREADY_REGISTERED", "VERIFICATION_CODE_EXPIRED", "VERIFICATION_CODE_INVALID", "CREDENTIALS_INACTIVE" ]
          }
        }
      }
    },
    "SendBulkCreateResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/SendBulkCreateResponse"
      }
    },
    "SendBulkCreateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "description" : "Error codes:\n  * `TRANSACTION_LIMIT_EXCEEDED` - The number of transactions exceeds the limit of 1000.\n",
            "enum" : [ "TRANSACTION_LIMIT_EXCEEDED" ]
          }
        }
      }
    },
    "SCAChallengeResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "scaChallengeId" : {
            "$ref" : "#/definitions/Id"
          }
        }
      }
    },
    "ServiceUnavailable" : {
      "description" : "Service Unavailable - We're temporarily offline for maintenance. Please try again later."
    },
    "ManagedAccountsIBANUpgradeConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_ALREADY_UPGRADED_TO_IBAN", "INSTRUMENT_IS_NOT_ACTIVE", "IBAN_ALLOCATION_EXCEEDED", "IBAN_NOT_SUPPORTED", "IBAN_ALREADY_REQUESTED", "OWNER_NOT_VERIFIED" ]
          }
        }
      }
    },
    "SendSCAChallengePushConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "CHALLENGE_LIMIT_EXCEEDED", "SCA_EXEMPTION_APPLIED" ]
          }
        }
      }
    },
    "AccessTokenResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "credentials" : {
            "$ref" : "#/definitions/CredentialId"
          },
          "identity" : {
            "$ref" : "#/definitions/IdentityId"
          },
          "token" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "description" : "The token status, as follows:\n  - STANDARD: it is a standard token. \n  - STEPPED_UP: it is a stepped up token.\n",
            "enum" : [ "STANDARD", "STEPPED_UP" ]
          }
        }
      }
    },
    "BeneficiaryBatchPageResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "batches" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/BeneficiaryBatch"
            }
          },
          "count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The total number of records (excluding the paging limit)."
          },
          "responseCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The total number of records returned in this response (always capped at 100)."
          }
        }
      }
    },
    "LostPasswordResumeConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INVALID_NONCE_OR_EMAIL", "PASSWORD_ALREADY_USED", "PASSWORD_TOO_SHORT", "PASSWORD_TOO_LONG", "PASSWORD_TOO_SIMPLE", "PASSWORD_INCORRECT" ]
          }
        }
      }
    },
    "ManagedCardPhysicalReplaceDamagedConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "PHYSICAL_CARD_NOT_ACTIVATED", "INSTRUMENT_ALREADY_DESTROYED", "INSTRUMENT_ALREADY_PENDING_REPLACEMENT", "INSTRUMENT_MARKED_AS_LOST", "MAX_PRINT_CHARACTERS_EXCEEDED" ]
          }
        }
      }
    },
    "ManagedCardSpendRulesGetResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/AllLevelSpendRules"
      }
    },
    "SendResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/Send"
      }
    },
    "LoginViaBiometricsResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "challengeId" : {
            "type" : "string",
            "description" : "The unique identifier of a Biometric challenge."
          }
        }
      }
    },
    "ConsumerKycStartResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "reference" : {
            "type" : "string",
            "description" : "The reference used to initialise the KYC UI Component.",
            "pattern" : "^[0-9]+$"
          },
          "kycLevel" : {
            "$ref" : "#/definitions/KycLevel"
          }
        }
      }
    },
    "CorporateKybGetResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "kybStatus" : {
            "$ref" : "#/definitions/KyiStatus"
          },
          "ongoingKybStatus" : {
            "$ref" : "#/definitions/KyiStatus"
          }
        }
      }
    },
    "ManagedCardBlockConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_ALREADY_BLOCKED", "INSTRUMENT_DESTROYED", "INSTRUMENT_MARKED_LOST_STOLEN" ]
          }
        }
      }
    },
    "UserPatchConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "EMAIL_NOT_UNIQUE", "MOBILE_NOT_UNIQUE", "MOBILE_OR_COUNTRY_CODE_INVALID", "MOBILE_NO_CHANGE_LIMIT_EXCEEDED", "TOO_FREQUENT_EMAIL_CHANGES", "EMAIL_DOMAIN_NOT_ALLOWED", "MOBILE_CHANGE_NOT_ALLOWED" ]
          }
        }
      }
    },
    "OutgoingWireTransferResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/OutgoingWireTransfer"
      }
    },
    "ManagedCardPhysicalPinGetConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_PHYSICAL", "PHYSICAL_CARD_NOT_ACTIVATED", "PIN_NOT_SET", "PIN_TRIES_EXCEEDED", "INSTRUMENT_BLOCKED", "INSTRUMENT_DESTROYED" ]
          }
        }
      }
    },
    "MethodNotAllowed" : {
      "description" : "Method Not Allowed - The request was received but has been rejected for the requested resource.",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    },
    "TokenResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/TokenResponse"
      }
    },
    "ManagedCardAssignConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "IDENTITY_NOT_VERIFIED", "IDENTITY_NOT_ACTIVE", "CARD_ALREADY_ASSIGNED", "ACTIVATION_CODE_INVALID", "INSTRUMENT_NOT_FOUND", "PROFILE_NOT_FOUND", "MODEL_CONSTRAINTS_VIOLATED", "IDENTITY_KYC_LEVEL_STEPUP_REQUIRED", "AUTH_FORWARDING_NOT_ENABLED", "THREEDS_DETAILS_NOT_PROVIDED", "USER_NOT_ENROLLED_FOR_BIOMETRICS", "BIOMETRIC_AUTHENTICATION_NOT_SUPPORTED", "LINKED_USER_NOT_FOUND", "USER_INACTIVE", "INVALID_CHANNELS_SELECTED", "INVALID_PRIMARY_CHANNEL_SELECTED", "USER_MOBILE_NUMBER_NOT_VERIFIED", "USER_MOBILE_NUMBER_DOES_NOT_EXIST", "MORE_THAN_ONE_MOBILE_NUMBER_PROVIDED", "MOBILE_NUMBER_ALREADY_EXISTS", "TWILIO_AUTHY_AUTHENTICATION_NOT_SUPPORTED", "USER_NOT_ENROLLED_FOR_TWILIO_AUTHY" ]
          }
        }
      }
    },
    "LoginWithPasswordResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "credentials" : {
            "$ref" : "#/definitions/CredentialId"
          },
          "identity" : {
            "$ref" : "#/definitions/IdentityId"
          },
          "tokenType" : {
            "$ref" : "#/definitions/TokenType"
          },
          "token" : {
            "type" : "string",
            "description" : "An authorisation token (valid for 5 minutes from last activity) identifying the user to be used in the `auth_token` authorization header for secured operations."
          }
        }
      }
    },
    "TransferResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/Transfer"
      }
    },
    "ManagedCardConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "PAYMENT_MODEL_CONSTRAINTS_VIOLATED", "PROFILE_NOT_FOUND", "PROFILE_INACTIVE", "CURRENCY_NOT_SUPPORTED_BY_PROFILE", "PROVIDER_NOT_SUPPORTED_BY_PROFILE", "INSTRUMENT_NOT_FOUND", "COUNTRY_INVALID", "OWNER_IDENTITY_NOT_VERIFIED", "IDENTITY_LIMITS_EXCEEDED", "PROGRAMME_LIMITS_EXCEEDED", "INNOVATOR_LIMITS_EXCEEDED", "SYSTEM_LIMITS_EXCEEDED", "PARENT_MANAGED_ACCOUNT_NOT_ACTIVE", "PARENT_MANAGED_ACCOUNT_NOT_FOUND", "WALLETS_NOT_ENABLED", "WALLET_ARTWORK_NOT_SPECIFIED", "WALLET_ARTWORK_INVALID", "IDENTITY_KYC_LEVEL_STEPUP_REQUIRED", "PUSHPROVISIONING_NOT_ENABLED", "AUTH_FORWARDING_NOT_ENABLED", "THREEDS_DETAILS_NOT_PROVIDED", "USER_NOT_ENROLLED_FOR_BIOMETRICS", "BIOMETRIC_AUTHENTICATION_NOT_SUPPORTED", "LINKED_USER_NOT_FOUND", "USER_INACTIVE", "INVALID_CHANNELS_SELECTED", "INVALID_PRIMARY_CHANNEL_SELECTED", "USER_MOBILE_NUMBER_NOT_VERIFIED", "USER_MOBILE_NUMBER_DOES_NOT_EXIST", "MORE_THAN_ONE_MOBILE_NUMBER_PROVIDED", "MOBILE_NUMBER_ALREADY_EXISTS", "TWILIO_AUTHY_AUTHENTICATION_NOT_SUPPORTED", "USER_NOT_ENROLLED_FOR_TWILIO_AUTHY" ]
          }
        }
      }
    },
    "ManagedAccountResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/ManagedAccount"
      }
    },
    "EmailVerificationConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "EMAIL_NOT_FOUND", "ALREADY_VERIFIED" ]
          }
        }
      }
    },
    "Forbidden" : {
      "description" : "Forbidden - Access to the requested resource or action is forbidden."
    },
    "BeneficiaryBatchSCAVerifyConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED", "VERIFICATION_CODE_EXPIRED", "VERIFICATION_CODE_INVALID" ]
          }
        }
      }
    },
    "LoginViaBiometricsConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "CHANNEL_NOT_REGISTERED", "CHANNEL_NOT_SUPPORTED" ]
          }
        }
      }
    },
    "UserInviteConsumeConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INVITE_OR_INVITE_CODE_INVALID", "UNRESOLVED_IDENTITY", "PASSWORD_ALREADY_USED", "PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE", "PASSWORD_TOO_SHORT", "PASSWORD_TOO_LONG", "PASSWORD_TOO_SIMPLE", "PASSWORD_KEY_ALREADY_IN_USE", "PASSWORD_ALREADY_CREATED" ]
          }
        }
      }
    },
    "Locked" : {
      "description" : "Locked - Account is temporarily locked due to failed consecutive login attempts. Try again in 30 minutes."
    },
    "SendCreateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "PROFILE_INACTIVE", "MODEL_CONSTRAINTS_VIOLATED", "INTERCEPTOR_DENIED_TRANSACTION", "INSTRUMENT_DENIED_TRANSACTION", "FOREX_TRADE_DENIED_TRANSACTION", "CURRENCY_MISMATCH", "SOURCE_INSTRUMENT_BLOCKED", "DESTINATION_INSTRUMENT_BLOCKED", "SOURCE_NOT_FOUND", "DESTINATION_NOT_FOUND", "FEE_NOT_CONFIGURED_FOR_CURRENCY", "DESTINATION_LIMIT_EXCEEDED", "FUNDS_INSUFFICIENT", "AMOUNT_INVALID", "SOURCE_CANNOT_BE_DEBIT_MODE_CARD", "DESTINATION_CANNOT_BE_DEBIT_MODE_CARD", "SEND_TO_INSTRUMENT_UNSUPPORTED", "SOURCE_INSTRUMENT_DESTROYED", "DESTINATION_INSTRUMENT_DESTROYED", "SOURCE_AND_DESTINATION_MUST_BE_DIFFERENT", "IDENTITY_KYC_LEVEL_STEPUP_REQUIRED", "DESTINATION_BELONGS_TO_SAME_IDENTITY", "SOURCE_AND_DESTINATION_MUST_BE_IN_SAME_PROGRAMME", "BENEFICIARY_NOT_FOUND", "BENEFICIARY_TYPE_INVALID", "PROFILE_NOT_FOUND", "SCHEDULED_TIMESTAMP_INVALID" ]
          }
        }
      }
    },
    "LostPasswordInitiateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "MULTIPLE_ACCOUNTS_FOUND", "ACCOUNT_NOT_FOUND" ]
          }
        }
      }
    },
    "ManagedAccountIBANResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/ManagedAccountIBAN"
      }
    },
    "OutgoingWireTransferCreateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "PROFILE_INACTIVE", "MODEL_CONSTRAINTS_VIOLATED", "INTERCEPTOR_DENIED_TRANSACTION", "INSTRUMENT_DENIED_TRANSACTION", "CURRENCY_MISMATCH", "SOURCE_INSTRUMENT_BLOCKED", "SOURCE_INSTRUMENT_DESTROYED", "AMOUNT_INVALID", "FUNDS_INSUFFICIENT", "SOURCE_NOT_FOUND", "FEE_NOT_CONFIGURED_FOR_CURRENCY", "TYPE_NOT_SUPPORTED_BY_PROFILE", "IDENTITY_KYC_LEVEL_STEPUP_REQUIRED", "BENEFICIARY_NOT_FOUND", "BENEFICIARY_TYPE_INVALID", "PROFILE_NOT_FOUND", "SCHEDULED_TIMESTAMP_INVALID" ]
          }
        }
      }
    },
    "Unauthorized" : {
      "description" : "Unauthorized - Your credentials or access token are invalid."
    },
    "CreateCorporateResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/CreatedCorporate"
      }
    },
    "StepUpSCAVerifyConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "STATE_INVALID", "VERIFICATION_CODE_EXPIRED", "VERIFICATION_CODE_INVALID", "CHANNEL_NOT_SUPPORTED", "CHANNEL_NOT_REGISTERED" ]
          }
        }
      }
    },
    "ManagedCardPhysicalUpgradeConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_ALREADY_UPGRADED_TO_PHYSICAL", "CONFIG_ERROR_PRODUCT_REFERENCE", "PRODUCT_REFERENCE_NOT_SPECIFIED", "PRODUCT_REFERENCE_INVALID", "CONFIG_ERROR_CARRIER_TYPE", "CARRIER_TYPE_NOT_SPECIFIED", "CARRIER_TYPE_INVALID", "CONFIG_ERROR_CARD_BUREAU", "INSTRUMENT_BLOCKED", "INSTRUMENT_DESTROYED", "PIN_INVALID_FORMAT", "PARENT_MANAGED_ACCOUNT_BLOCKED", "MAX_PRINT_CHARACTERS_EXCEEDED" ]
          }
        }
      }
    },
    "CorporateCreateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "PAYMENT_MODEL_CONSTRAINTS_VIOLATED", "PROFILE_NOT_FOUND", "PROFILE_INACTIVE", "ROOT_EMAIL_NOT_UNIQUE", "CURRENCY_UNSUPPORTED", "FEE_GROUP_INVALID", "COUNTRY_INVALID", "TERMS_NOT_ACCEPTED", "MOBILE_OR_COUNTRY_CODE_INVALID", "COUNTRY_UNSUPPORTED", "ROOT_USER_INACTIVE", "ROOT_EMAIL_NOT_VERIFIED", "KYC_APPROVAL_MISSING", "PROFILE_MISMATCH", "COMPANY_TYPE_UNSUPPORTED", "EMAIL_DOMAIN_NOT_ALLOWED" ]
          }
        }
      }
    },
    "ManagedCardUnblockConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INSTRUMENT_NOT_BLOCKED", "INSTRUMENT_DESTROYED", "INSTRUMENT_MARKED_LOST_STOLEN" ]
          }
        }
      }
    },
    "PasswordResponse" : {
      "description" : "Success",
      "schema" : {
        "type" : "object",
        "properties" : {
          "passwordInfo" : {
            "$ref" : "#/definitions/PasswordInfo"
          },
          "token" : {
            "type" : "string",
            "description" : "The authorisation token to be used in the Authorization header for secured operations."
          }
        }
      }
    },
    "Error" : {
      "description" : "Error",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    },
    "BadRequestError" : {
      "description" : "Bad Request Error - Your request is invalid.",
      "schema" : {
        "type" : "object",
        "properties" : {
          "syntaxErrors" : {
            "$ref" : "#/definitions/SyntaxError"
          },
          "message" : {
            "type" : "string",
            "description" : "When present helps to identify and fix the problem.",
            "maxLength" : 255
          }
        }
      }
    },
    "UserInviteValidateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "INVITE_OR_INVITE_CODE_INVALID" ]
          }
        }
      }
    },
    "UserResponse" : {
      "description" : "Success",
      "schema" : {
        "$ref" : "#/definitions/User"
      }
    },
    "TooManyRequests" : {
      "description" : "Too many requests."
    },
    "PasswordUpdateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "PASSWORD_ALREADY_USED", "PASSWORD_TOO_SHORT", "PASSWORD_TOO_LONG", "PASSWORD_TOO_SIMPLE", "PASSWORD_INCORRECT" ]
          }
        }
      }
    },
    "ConsumerCreateConflict" : {
      "description" : "Conflict",
      "schema" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "enum" : [ "PAYMENT_MODEL_CONSTRAINTS_VIOLATED", "PROFILE_NOT_FOUND", "PROFILE_INACTIVE", "ROOT_EMAIL_NOT_UNIQUE", "CURRENCY_UNSUPPORTED", "FEE_GROUP_INVALID", "COUNTRY_INVALID", "TERMS_NOT_ACCEPTED", "MOBILE_OR_COUNTRY_CODE_INVALID", "COUNTRY_UNSUPPORTED", "EMAIL_DOMAIN_NOT_ALLOWED" ]
          }
        }
      }
    },
    "NotFound" : {
      "description" : "Not found - The requested resource couldn't be found.",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    }
  }
}
